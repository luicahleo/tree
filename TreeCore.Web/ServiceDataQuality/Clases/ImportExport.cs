using CapaNegocio;
using ExcelDataReader;
using Ext.Net;
using log4net;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Transactions;
using TreeCore.Data;

namespace TreeCore.Clases
{
    public class ImportExport
    {
        private static readonly ILog log = LogManager.GetLogger("");

        #region Import
        public static string CargarPaisRegionProvinciaMunicipio(System.IO.Stream datos, DocumentosCargas odoccarga)
        {

            string sSalida = "";
            DateTime datInicio;
            try
            {
                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                //excelReader.IsFirstRowAsColumnNames = true;

                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });

                RegionesController cRegiones = new RegionesController();
                PaisesController cPaises = new PaisesController();
                RegionesPaisesController cRegionesPaises = new RegionesPaisesController();
                ProvinciasController cProvincias = new ProvinciasController();
                MunicipiosController cMunicipios = new MunicipiosController();
                GlobalMunicipalidadesController cMunicipalidad = new GlobalMunicipalidadesController();
                GlobalPartidosController cPartidos = new GlobalPartidosController();
                GlobalLocalidadesController cLocalidad = new GlobalLocalidadesController();

                Regiones region = null;
                Paises pais = null;
                RegionesPaises regionPais = null;
                Provincias provincia = null;
                Municipios municipio = null;
                GlobalMunicipalidades municipalidad = null;
                GlobalPartidos partido = null;
                GlobalLocalidades localidad = null;
                int iRegionesCargados = 0;
                int iRegionesErrores = 0;
                int iRegionesTratados = 0;

                int iPaisesCargados = 0;
                int iPaisesErrores = 0;
                int iPaisesTratados = 0;

                int iRegionesPaisesCargados = 0;
                int iRegionesPaisesErrores = 0;
                int iRegionesPaisesTratados = 0;

                int iProvinciasCargados = 0;
                int iProvinciasErrores = 0;
                int iProvinciasTratados = 0;

                int iMunicipiosCargados = 0;
                int iMunicipiosErrores = 0;
                int iMunicipiosTratados = 0;

                int iMunicipalidadesCargados = 0;
                int iMunicipalidadesErrores = 0;
                int iMunicipalidadesTratados = 0;


                int iPartidosCargados = 0;
                int iPartidosErrores = 0;
                int iPartidosTratados = 0;

                int ilocalidadesCargados = 0;
                int ilocalidadesErrores = 0;
                int ilocalidadesTratados = 0;
                long ClienteID = Convert.ToInt32(odoccarga.ClienteID);
                foreach (DataRow row in result.Tables[0].Rows)
                {
                    datInicio = DateTime.Now;
                    region = new Regiones();
                    pais = new Paises();
                    regionPais = new RegionesPaises();
                    provincia = new Provincias();
                    municipio = new Municipios();
                    municipalidad = new GlobalMunicipalidades();
                    partido = new GlobalPartidos();
                    localidad = new GlobalLocalidades();


                    region = cRegiones.GetItem("ClienteID==" + ClienteID.ToString() + " && Region ==\"" + row[0].ToString() + "\"");



                    if (region == null)
                    {
                        #region REGION NO EXISTE
                        //La region no existe y la creamos

                        try
                        {
                            region = new Regiones();
                            region.Activo = true;
                            region.ClienteID = ClienteID;
                            region.Region = row[0].ToString();
                            region = cRegiones.AddItem(region);
                            iRegionesCargados++;

                            //sumar 
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex.Message);
                            LogErrorComunPaisRegionProvinciaMunicipio();
                            iRegionesErrores++;
                            continue;
                            //generar log y sumar contadores errores;


                        }
                        iRegionesTratados = iRegionesCargados + iRegionesErrores;
                        //sumar totales

                        pais = cPaises.GetItem("ClienteID==" + ClienteID.ToString() + " &&RegionID ==" + region.RegionID + " && Pais ==\"" + row[1].ToString() + "\"");

                        if (pais == null)
                        {
                            #region PAIS NO EXISTE
                            //El pais no existe y lo creamos

                            try
                            {
                                pais = new Paises();
                                pais.Activo = true;
                                pais.Pais = row[1].ToString();
                                pais.Defecto = false;
                                pais.ClienteID = ClienteID;
                                pais.PaisCod = row[1].ToString().Substring(0, 2).ToUpper();
                                pais.Pais_En = row[1].ToString();
                                pais.Pais_Fr = row[1].ToString();
                                pais.RegionID = region.RegionID;
                                pais = cPaises.AddItem(pais);
                                iPaisesCargados++;
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message);
                                LogErrorComunPaisRegionProvinciaMunicipio();
                                iPaisesErrores++;
                                continue;

                            }

                            iPaisesTratados = iPaisesCargados + iPaisesErrores;
                            regionPais = cRegionesPaises.GetItem("ClienteID==" + ClienteID.ToString() + " &&PaisID ==" + pais.PaisID + " && RegionPais ==\"" + row[2].ToString() + "\"");

                            if (regionPais == null)
                            {
                                #region REGION PAIS NO EIXSTE
                                //La region pais no existe

                                try
                                {
                                    regionPais = new RegionesPaises();
                                    regionPais.Activo = true;
                                    regionPais.Defecto = false;
                                    regionPais.RegionPais = row[2].ToString();
                                    regionPais.PaisID = pais.PaisID;
                                    regionPais.ClienteID = ClienteID;
                                    regionPais.Codigo = row[8].ToString();
                                    regionPais = cRegionesPaises.AddItem(regionPais);
                                    iRegionesPaisesCargados++;
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message);
                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                    iRegionesPaisesErrores++;
                                    continue;
                                }
                                iRegionesPaisesTratados = iRegionesPaisesErrores + iRegionesPaisesCargados;
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    #region PROVINCIA NO EXISTE
                                    //La provincia no existe

                                    try
                                    {
                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        #region MUNICIPIO NO EXISTE
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }

                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;

                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            #region MUNICIPALIDAD NO EXISTE
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARITDO NO EXISTE
                                                //Partido no existe


                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region MUNICIPALIDAD YA EXISTE
                                            //La municipalidad ya existe, comprobamos el partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    else
                                    {

                                        #region MUNICIPIO YA EXISTE
                                        //Municipio ya existe, comprobamos la municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            #region MUNICIPALIDAD NO EXISTE
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion

                                        }
                                        else
                                        {
                                            #region MUNICIPALIDAD YA EXISTE
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    #endregion
                                }
                                else
                                {

                                    #region PROVINCIA EXISTE
                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        #region MUNICIPIO NO EXISTE
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;

                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            #region MUNICIPALIDAD NO EXISTE
                                            //La municipalidad no existe

                                            try
                                            {

                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe
                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {

                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion

                                        }
                                        else
                                        {
                                            #region MUNICIPALIDAD YA EXISTE
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    else
                                    {

                                        #region MUNICIPIO YA EXISTE
                                        //El municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            #region MUNICIPALIDAD NO EXISTE
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe
                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion

                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }

                                            #endregion
                                        }
                                        else
                                        {
                                            #region MUNICIAPLIDAD YA EXISTE
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe
                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        #endregion
                                    }

                                    #endregion

                                }
                                #endregion
                            }
                            else
                            {

                                #region REGION PAIS EXISTE
                                //La region existe, comprobamos provincia y municipio
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    #region PROVINCIA NO EXISTE
                                    //La provincia no existe

                                    try
                                    {
                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        #region MUNICIPIO NO EXISTE
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;

                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            #region MUNICIPALIDAD NO EXISTE
                                            //La municipalidad no existe

                                            try
                                            {

                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EIXSTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe
                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);

                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion

                                        }
                                        else
                                        {
                                            #region MUNICIPALIDAD YA EXISTE
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PPARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe
                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region MUNICIPIO YA EXISTE
                                        //El municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            #region MUNICIPALIDAD NO EXISTE
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }

                                            #endregion
                                        }
                                        else
                                        {
                                            #region MUNICIPALIDAD YA EXISTE
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                #region PARTIDO NO EXISTE
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion

                                            }
                                            else
                                            {

                                                #region PARTIDO YA EXISTE
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        #endregion
                                    }

                                    #endregion

                                }
                                else
                                {
                                    #region PROVINCIA YA EXISTE
                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;

                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }
                                    else
                                    {
                                        //Municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {

                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }

                                    #endregion

                                }
                                #endregion
                            }
                            #endregion
                        }
                        else
                        {

                            #region PAIS YA EXISTE
                            //El pais ya existe, comprobamos la regionpais, provincipia y municipio

                            regionPais = cRegionesPaises.GetItem("ClienteID==" + ClienteID.ToString() + " &&PaisID ==" + pais.PaisID + " && RegionPais ==\"" + row[2].ToString() + "\"");

                            if (regionPais == null)
                            {
                                //La region pais no existe
                                try
                                {
                                    regionPais = new RegionesPaises();
                                    regionPais.Activo = true;
                                    regionPais.Defecto = false;
                                    regionPais.RegionPais = row[2].ToString();
                                    regionPais.PaisID = pais.PaisID;
                                    regionPais.ClienteID = ClienteID;
                                    regionPais.Codigo = row[8].ToString();
                                    regionPais = cRegionesPaises.AddItem(regionPais); iRegionesPaisesCargados++;
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message);
                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                    iRegionesPaisesErrores++;
                                    continue;
                                }
                                iRegionesPaisesTratados = iRegionesPaisesErrores + iRegionesPaisesCargados;
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    //La provincia no existe

                                    try
                                    {
                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }



                                }
                                else
                                {

                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }



                                }

                            }
                            else
                            {
                                //La region existe, comprobamos provincia y municipio
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    //La provincia no existe

                                    try
                                    {

                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {

                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {

                                        //El municipio ya existe, comprobamos municipalidad
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }
                                else
                                {

                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {
                                        //El municipio ya existe comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }

                            }

                            #endregion

                        }

                        #endregion
                    }
                    else
                    {
                        #region LA REGION YA EXISTE
                        //La region ya existe comprobamos pais, regionpais, provincia y municipio

                        pais = cPaises.GetItem("ClienteID==" + ClienteID.ToString() + " &&RegionID ==" + region.RegionID + " && Pais ==\"" + row[1].ToString() + "\"");


                        if (pais == null)
                        {
                            //El pais no existe y lo creamos
                            try
                            {
                                pais = new Paises();
                                pais.Activo = true;
                                pais.Pais = row[1].ToString();
                                pais.Defecto = false;
                                pais.PaisCod = row[1].ToString().Substring(0, 2).ToUpper();
                                pais.Pais_En = row[1].ToString();
                                pais.Pais_Fr = row[1].ToString();
                                pais.RegionID = region.RegionID;
                                pais.ClienteID = ClienteID;
                                pais = cPaises.AddItem(pais);
                                iPaisesCargados++;


                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message);
                                LogErrorComunPaisRegionProvinciaMunicipio();
                                iPaisesErrores++;
                                continue;
                            }

                            iPaisesTratados = iPaisesCargados + iPaisesErrores;


                            regionPais = cRegionesPaises.GetItem("ClienteID==" + ClienteID.ToString() + " &&PaisID ==" + pais.PaisID + " && RegionPais ==\"" + row[2].ToString() + "\"");

                            if (regionPais == null)
                            {
                                //La region pais no existe

                                try
                                {
                                    regionPais = new RegionesPaises();
                                    regionPais.Activo = true;
                                    regionPais.Defecto = false;
                                    regionPais.RegionPais = row[2].ToString();
                                    regionPais.PaisID = pais.PaisID;
                                    regionPais.ClienteID = ClienteID;
                                    regionPais.Codigo = row[8].ToString();
                                    regionPais = cRegionesPaises.AddItem(regionPais); iRegionesPaisesCargados++;
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message);
                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                    iRegionesPaisesErrores++;
                                    continue;
                                }
                                iRegionesPaisesTratados = iRegionesPaisesErrores + iRegionesPaisesCargados;
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    //La provincia no existe

                                    try
                                    {
                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {

                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {

                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }
                                    else
                                    {
                                        // El municipio ya existe, comprobamos municipalidad
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;

                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }
                                else
                                {

                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;

                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }

                            }
                            else
                            {
                                //La region existe, comprobamos provincia y municipio
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    //La provincia no existe

                                    try
                                    {
                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }



                                }
                                else
                                {

                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;

                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;

                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }

                            }

                        }
                        else
                        {
                            //El pais ya existe, comprobamos la regionpais, provincipia y municipio

                            regionPais = cRegionesPaises.GetItem("ClienteID==" + ClienteID.ToString() + " &&PaisID ==" + pais.PaisID + " && RegionPais ==\"" + row[2].ToString() + "\"");

                            if (regionPais == null)
                            {
                                //La region pais no existe

                                try
                                {
                                    regionPais = new RegionesPaises();
                                    regionPais.Activo = true;
                                    regionPais.Defecto = false;
                                    regionPais.RegionPais = row[2].ToString();
                                    regionPais.PaisID = pais.PaisID;
                                    regionPais.ClienteID = ClienteID;
                                    regionPais.Codigo = row[8].ToString();
                                    regionPais = cRegionesPaises.AddItem(regionPais); iRegionesPaisesCargados++;
                                }
                                catch (Exception ex)
                                {
                                    log.Error(ex.Message);
                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                    iRegionesPaisesErrores++;
                                    continue;
                                }
                                iRegionesPaisesTratados = iRegionesPaisesErrores + iRegionesPaisesCargados;
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    //La provincia no existe

                                    try
                                    {
                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;
                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {
                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }

                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad

                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }
                                else
                                {

                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {

                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe


                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }

                            }
                            else
                            {
                                //La region existe, comprobamos provincia y municipio
                                provincia = cProvincias.GetItem("RegionPaisID ==" + regionPais.RegionPaisID + " && Provincia ==\"" + row[3].ToString() + "\"");

                                if (provincia == null)
                                {
                                    //La provincia no existe

                                    try
                                    {

                                        provincia = new Provincias();
                                        provincia.Activo = true;
                                        provincia.Defecto = false;
                                        provincia.Provincia = row[3].ToString();
                                        provincia.RegionPaisID = regionPais.RegionPaisID;
                                        provincia.Codigo = row[9].ToString();
                                        provincia = cProvincias.AddItem(provincia);
                                        iProvinciasCargados++;
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex.Message);
                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                        iProvinciasErrores++;
                                        continue;
                                    }
                                    iProvinciasTratados = iProvinciasCargados + iProvinciasErrores;

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {

                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe
                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {

                                                    try
                                                    {

                                                        //Localidad no existe
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {

                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe
                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobamos municipalidad
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe

                                            try
                                            {

                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;

                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {

                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }
                                else
                                {

                                    //La provincia ya existe, comprobamos el municipio

                                    municipio = cMunicipios.GetItem("ProvinciaID ==" + provincia.ProvinciaID + " && Municipio ==\"" + row[4].ToString() + "\"");

                                    if (municipio == null)
                                    {
                                        //El municipio no existe

                                        try
                                        {

                                            municipio = new Municipios();
                                            municipio.Activo = true;
                                            municipio.Defecto = false;
                                            municipio.Municipio = row[4].ToString();
                                            municipio.ProvinciaID = provincia.ProvinciaID;
                                            if (row[5].ToString() != "")
                                            {
                                                municipio.FactorZona = ConvertPuntosEnComasFloat(row[5].ToString());
                                            }
                                            if (row[6].ToString() != "")
                                            {
                                                municipio.FactorComuna = ConvertPuntosEnComasFloat(row[6].ToString());
                                            }
                                            if (row[7].ToString() != "")
                                            {
                                                municipio.Factor = ConvertPuntosEnComasFloat(row[7].ToString());
                                            }
                                            municipio.Codigo = row[10].ToString();
                                            municipio = cMunicipios.AddItem(municipio);
                                            iMunicipiosCargados++;
                                        }
                                        catch (Exception ex)
                                        {
                                            log.Error(ex.Message);
                                            LogErrorComunPaisRegionProvinciaMunicipio();
                                            iMunicipiosErrores++;
                                            continue;
                                        }
                                        iMunicipiosTratados = iMunicipiosCargados + iMunicipiosErrores;
                                    }
                                    else
                                    {
                                        //El municipio ya existe, comprobar validacion final
                                        municipalidad = cMunicipalidad.GetItem("MunicipioID ==" + municipio.MunicipioID + " && Municipalidad ==\"" + row[11].ToString() + "\"");

                                        if (municipalidad == null)
                                        {
                                            //La municipalidad no existe


                                            try
                                            {
                                                municipalidad = new GlobalMunicipalidades();
                                                municipalidad.Activo = true;
                                                municipalidad.Defecto = false;
                                                municipalidad.Municipalidad = row[11].ToString();
                                                municipalidad.MunicipioID = municipio.MunicipioID;
                                                municipalidad.Codigo = row[12].ToString();
                                                municipalidad = cMunicipalidad.AddItem(municipalidad);
                                                iMunicipalidadesCargados++;
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex.Message);
                                                LogErrorComunPaisRegionProvinciaMunicipio();
                                                iMunicipalidadesErrores++;
                                                continue;
                                            }
                                            iMunicipalidadesTratados = iMunicipalidadesCargados + iMunicipalidadesErrores;
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }


                                        }
                                        else
                                        {
                                            //La municipalidad ya existe, comprobamos partido
                                            partido = cPartidos.GetItem("GlobalMunicipalidadID ==" + municipalidad.GlobalMunicipalidadID + " && Partido ==\"" + row[13].ToString() + "\"");

                                            if (partido == null)
                                            {
                                                //Partido no existe

                                                try
                                                {
                                                    partido = new GlobalPartidos();
                                                    partido.Activo = true;
                                                    partido.Defecto = false;
                                                    partido.Partido = row[13].ToString();
                                                    partido.GlobalMunicipalidadID = municipalidad.GlobalMunicipalidadID;
                                                    partido.Codigo = row[14].ToString();
                                                    partido = cPartidos.AddItem(partido);
                                                    iPartidosCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error(ex.Message);
                                                    LogErrorComunPaisRegionProvinciaMunicipio();
                                                    iPartidosErrores++;
                                                    continue;
                                                }
                                                iPartidosTratados = iPartidosCargados + iPartidosErrores;
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }

                                            }
                                            else
                                            {
                                                //El partido ya existe, comprobamos la localidad
                                                localidad = cLocalidad.GetItem("GlobalPartidoID ==" + partido.GlobalPartidoID + " && Localidad ==\"" + row[15].ToString() + "\"");

                                                if (localidad == null)
                                                {
                                                    //Localidad no existe

                                                    try
                                                    {
                                                        localidad = new GlobalLocalidades();
                                                        localidad.Activo = true;
                                                        localidad.Defecto = false;
                                                        localidad.Localidad = row[15].ToString();
                                                        localidad.GlobalPartidoID = partido.GlobalPartidoID;
                                                        localidad.Codigo = row[16].ToString();
                                                        localidad = cLocalidad.AddItem(localidad);
                                                        ilocalidadesCargados++;
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        log.Error(ex.Message);
                                                        LogErrorComunPaisRegionProvinciaMunicipio();
                                                        ilocalidadesErrores++;
                                                        continue;
                                                    }
                                                    ilocalidadesTratados = ilocalidadesCargados + ilocalidadesErrores;
                                                }
                                            }

                                        }
                                    }



                                }

                            }



                        }
                        #endregion
                    }

                    TimeSpan transcurrio = DateTime.Now - datInicio;
                    log.Info(Recursos.strDistribucionRegional + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                }

                EscritorLogs.EscribeLogs("Total regions: " + iRegionesTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Regions " + ": " + iRegionesCargados.ToString());
                EscritorLogs.EscribeLogs("Regions Errors" + ": " + iRegionesErrores.ToString());

                EscritorLogs.EscribeLogs("Total Countries " + ": " + iPaisesTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Countries " + ": " + iPaisesCargados.ToString());
                EscritorLogs.EscribeLogs("Countries Errors" + ": " + iPaisesTratados.ToString());

                EscritorLogs.EscribeLogs("Total Regions Countries" + ": " + iRegionesPaisesTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Regions Countries" + ": " + iRegionesPaisesCargados.ToString());
                EscritorLogs.EscribeLogs("Regions Countries Errors" + ": " + iRegionesPaisesErrores.ToString());


                EscritorLogs.EscribeLogs("Total Provinces " + ": " + iProvinciasTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Provinces " + ": " + iProvinciasCargados.ToString());
                EscritorLogs.EscribeLogs("Provinces Errors " + ": " + iProvinciasErrores.ToString());


                EscritorLogs.EscribeLogs("Total Municipalities " + ": " + iMunicipiosTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Municipalities" + ": " + iMunicipiosCargados.ToString());
                EscritorLogs.EscribeLogs("Municipolities Errors" + ": " + iMunicipiosErrores.ToString());

                EscritorLogs.EscribeLogs("Total  Townships" + ": " + iMunicipalidadesTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Townships" + ": " + iMunicipalidadesCargados.ToString());
                EscritorLogs.EscribeLogs("Townships Errors" + ": " + iMunicipalidadesErrores.ToString());

                EscritorLogs.EscribeLogs("Total Parties" + ": " + iPartidosTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Parties" + ": " + iPartidosCargados.ToString());
                EscritorLogs.EscribeLogs("Parties Errors" + ": " + iPartidosErrores.ToString());

                EscritorLogs.EscribeLogs("Total Locations" + ": " + ilocalidadesTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Locations" + ": " + ilocalidadesCargados.ToString());
                EscritorLogs.EscribeLogs("Locations Erros" + ": " + ilocalidadesErrores.ToString());
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strDistribucionRegional + " " + Recursos.strCodigoExcepcion100);
                sSalida = "ERROR";
            }


            return sSalida;
        }
        public static string CargarPlantillaV23SITES(System.IO.Stream datos, DocumentosCargas odoccarga)
        {


            string sSalida = "";
            string sCodigo = null;
            long cliID = 0;
            int cont = 0;

            DateTime datInicio;

            DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
            DocumentosCargas odocumentocarga = new DocumentosCargas();

            try
            {
                // Reads the information from the excel file

                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });

                // Reads client information
                if (odoccarga.ClienteID != null)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strEmplazamientos);

                    int numTabs = result.Tables.Count;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;
                    int iWarning = 0;
                    bool bActualizar = false;

                    long? operadorID = 0;
                    long? estadoGlobalID = 0;
                    long? monedaID = 0;

                    // Checks all the tabs
                    #region CARGA EMPLAZAMIENTOS

                    // Local variables
                    EmplazamientosController cEmplazamientos = new EmplazamientosController();
                    Emplazamientos emplazamiento = null;
                    Emplazamientos emplazamientoOriginal = null;
                    EstadosGlobalesController cGlobales = new EstadosGlobalesController();

                    PaisesController cSitePaises = new PaisesController();
                    EntidadesController cEntidades = new EntidadesController();
                    OperadoresController cOperadorPrincipal = new OperadoresController();
                    PropietariosController cPropietarios = new PropietariosController();
                    MonedasController cMonedas = new MonedasController();
                    RegionesController cSiteRegiones = new RegionesController();

                    EmplazamientosCategoriasSitiosController cCategoria = new EmplazamientosCategoriasSitiosController();
                    EmplazamientosTiposController cEmpTipo = new EmplazamientosTiposController();
                    EmplazamientosTiposEdificiosController cTipoEdificio = new EmplazamientosTiposEdificiosController();
                    EmplazamientosTiposEstructurasController cTipoEstructura = new EmplazamientosTiposEstructurasController();
                    EmplazamientosTamanosController cTamano = new EmplazamientosTamanosController();

                    EmplazamientosController cEmplazamientoPadre = new EmplazamientosController();
                    Emplazamientos oEmplazamientoPadre = new Emplazamientos();
                    MunicipiosController cMunicipios = new MunicipiosController();

                    // Reads client information
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    EmplazamientosAtributosConfiguracionController cConfAtributo = new EmplazamientosAtributosConfiguracionController();
                    EmplazamientosAtributosConfiguracion oConfAtributo;
                    JsonObject jsonListas = new JsonObject();
                    JsonObject jsonListaValores, oJsonAux, JsonAtributos, JsonPropiedades;
                    EmplazamientosAtributosConfiguracionTiposDatosPropiedadesController cPropiedades = new EmplazamientosAtributosConfiguracionTiposDatosPropiedadesController();
                    List<Vw_EmplazamientosAtributosTiposDatosPropiedades> listaPropiedades;
                    List<int> listaColumnasInvalidas = new List<int>();
                    List<long> listaAtributosObligatoriosIDs;
                    object oAux;
                    List<object> listaAtributos;


                    #region Carga de datos

                    List<Entidades> listaCargadaOperadores;
                    List<Monedas> listaCargadaMonedas;
                    List<EstadosGlobales> listaCargadasEstadosGlobales;
                    List<EmplazamientosCategoriasSitios> listaCargadaCategoriaSitio;
                    List<EmplazamientosTipos> listaCargadaTipos;
                    List<EmplazamientosTiposEdificios> listaCargadaTiposEdificios;
                    List<EmplazamientosTiposEstructuras> listaCargadaTiposEstructura;
                    List<EmplazamientosTamanos> listaCargadaTamano;
                    List<Municipios> listaCargadaMunicipios;

                    listaCargadaOperadores = cEntidades.GetAllOperadores(cliID);
                    listaCargadaMonedas = cMonedas.GetActivos(cliID);
                    listaCargadasEstadosGlobales = cGlobales.GetActivos(cliID);
                    listaCargadaCategoriaSitio = cCategoria.GetActivos(cliID);
                    listaCargadaTipos = cEmpTipo.GetActivos(cliID);
                    listaCargadaTiposEdificios = cTipoEdificio.GetActivos(cliID);
                    listaCargadaTiposEstructura = cTipoEstructura.GetActivos(cliID);
                    listaCargadaTamano = cTamano.GetActivos(cliID);
                    listaCargadaMunicipios = cMunicipios.GetActivos(cliID);

                    #endregion

                    #region Carga de listas

                    JsonAtributos = new JsonObject();
                    JsonPropiedades = new JsonObject();

                    List<EmplazamientosAtributosConfiguracion> listaCargadaAtributos = cConfAtributo.GetAtributosFromCliente(cliID);

                    listaAtributosObligatoriosIDs = cConfAtributo.GetAtributosObligatoriosIDs(cliID);

                    for (int r = 18; r < result.Tables[0].Columns.Count; r++)
                    {
                        oConfAtributo = cConfAtributo.GetAtributoByCodigo(cliID, result.Tables[0].Columns[r].Caption.ToString());
                        if (oConfAtributo != null)
                        {
                            if (oConfAtributo.TiposDatos.Codigo == "LISTA" || oConfAtributo.TiposDatos.Codigo == "LISTAMULTIPLE")
                            {
                                jsonListaValores = new JsonObject();
                                if (oConfAtributo.TablaModeloDatoID != null)
                                {
                                    jsonListaValores = cConfAtributo.GetJsonItemsByColumnaModeloDatosIDServicio((long)oConfAtributo.EmplazamientoAtributoConfiguracionID);
                                }
                                //else if (oConfAtributo.FuncionControlador != null && oConfAtributo.FuncionControlador != "")
                                //{
                                //    listaValores = cConfAtributo.GetListItemsComboBoxByFuncion(oConfAtributo.FuncionControlador, null, null, oConfAtributo.EmplazamientoAtributoConfiguracionID);
                                //}
                                else if (oConfAtributo.ValoresPosibles != null && oConfAtributo.ValoresPosibles != "")
                                {
                                    foreach (var item in oConfAtributo.ValoresPosibles.Split(';').ToList())
                                    {
                                        if (!jsonListaValores.TryGetValue(item, out oAux))
                                        {
                                            oJsonAux = new JsonObject();
                                            oJsonAux.Add("Text", item);
                                            oJsonAux.Add("Value", item);
                                            jsonListaValores.Add(item, oJsonAux);
                                        }
                                    }
                                }
                                jsonListas.Add(oConfAtributo.NombreAtributo, jsonListaValores);
                            }
                            JsonAtributos.Add(oConfAtributo.NombreAtributo, oConfAtributo);
                            listaPropiedades = cPropiedades.GetPropiedadesFromAtributo(oConfAtributo.EmplazamientoAtributoConfiguracionID);
                            JsonPropiedades.Add(oConfAtributo.EmplazamientoAtributoConfiguracionID.ToString(), listaPropiedades);
                            listaAtributosObligatoriosIDs.Remove(oConfAtributo.EmplazamientoAtributoConfiguracionID);
                        }
                        else
                        {
                            listaColumnasInvalidas.Add(r);
                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + result.Tables[0].Columns[r].Caption.ToString() + " invalid field");
                        }
                    }

                    #endregion

                    for (int i = 0; i < result.Tables[0].Rows.Count; i++)
                    {

                        datInicio = DateTime.Now;

                        cont = cont + 1;
                        emplazamientoOriginal = new Emplazamientos();

                        // Reads the site code
                        if (result.Tables[0].Rows[i][0].ToString() != "")
                        {
                            sCodigo = result.Tables[0].Rows[i][0].ToString();
                        }
                        else
                        {
                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + Recursos.strCodigo);
                            iErrores++;
                            continue;
                        }

                        emplazamientoOriginal = cEmplazamientos.GetEmplazamientoByCodigoyCliente(sCodigo, cliID);
                        emplazamiento = new Emplazamientos();

                        if (emplazamientoOriginal != null && emplazamientoOriginal.Codigo != null && emplazamientoOriginal.Codigo != "")
                        {
                            bActualizar = true;
                            emplazamiento.Codigo = sCodigo;
                        }
                        else
                        {
                            bActualizar = false;
                            emplazamiento.Codigo = sCodigo;
                        }


                        #region DATOS PRINCIPALES

                        emplazamiento.ClienteID = cliID;
                        emplazamiento.Propietario = "";

                        //Nombre Sitio
                        if (result.Tables[0].Rows[i][1].ToString() != "")
                        {
                            emplazamiento.NombreSitio = result.Tables[0].Rows[i][1].ToString();
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strNombre, "");
                            iErrores++;
                            continue;
                        }

                        //Operador
                        if (!result.Tables[0].Rows[i][2].ToString().Equals(""))
                        {
                            try
                            {
                                operadorID = (long)(from o in listaCargadaOperadores where o.Nombre == result.Tables[0].Rows[i][2].ToString() select o.OperadorID).FirstOrDefault();
                                if (operadorID != null && operadorID > 0)
                                {
                                    emplazamiento.OperadorID = (long)operadorID;
                                }
                                else
                                {
                                    LogErrorCampoNoCreadoSites(sCodigo, Recursos.strOperador, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception)
                            {
                                LogErrorCampoNoCreadoSites(sCodigo, Recursos.strOperador, "");
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strOperador, "");
                            iErrores++;
                            continue;
                        }

                        // Moneda
                        if (!result.Tables[0].Rows[i][3].ToString().Equals(""))
                        {
                            try
                            {
                                monedaID = (from o in listaCargadaMonedas where o.Simbolo == result.Tables[0].Rows[i][3].ToString() select o.MonedaID).FirstOrDefault();
                                if (monedaID != null && monedaID > 0)
                                {
                                    emplazamiento.MonedaID = monedaID;
                                }
                                else
                                {
                                    LogErrorCampoNoCreadoSites(sCodigo, Recursos.strMoneda, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception)
                            {
                                LogErrorCampoNoCreadoSites(sCodigo, Recursos.strMoneda, "");
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strMoneda, "");
                            iErrores++;
                            continue;
                        }

                        // Estado global
                        if (!result.Tables[0].Rows[i][4].ToString().Equals(""))
                        {
                            try
                            {
                                estadoGlobalID = (from e in listaCargadasEstadosGlobales where e.EstadoGlobal == result.Tables[0].Rows[i][4].ToString() select e.EstadoGlobalID).FirstOrDefault();
                                if (estadoGlobalID != null && estadoGlobalID > 0)
                                {
                                    emplazamiento.EstadoGlobalID = estadoGlobalID;
                                }
                                else
                                {
                                    LogErrorCampoNoCreadoSites(sCodigo, Recursos.strEstadoGlobal, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception)
                            {
                                LogErrorCampoNoCreadoSites(sCodigo, Recursos.strEstadoGlobal, "");
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strEstadoGlobal, "");
                            iErrores++;
                            continue;
                        }

                        // Categoria Sitio
                        long? categoriaID = 0;
                        if (result.Tables[0].Rows[i][5].ToString() != "")
                        {
                            try
                            {
                                categoriaID = (from c in listaCargadaCategoriaSitio where c.CategoriaSitio == result.Tables[0].Rows[i][5].ToString() select c.EmplazamientoCategoriaSitioID).FirstOrDefault();
                                if (categoriaID != null && categoriaID > 0)
                                {
                                    emplazamiento.CategoriaEmplazamientoID = categoriaID;
                                }
                                else
                                {
                                    LogErrorCampoNoCreadoSites(sCodigo, Recursos.strCategoriaSitio, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                //log.Error(ex.Message);
                                LogErrorCampoSites(sCodigo, Recursos.strCategoriaSitio, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strCategoriaSitio, "");
                            iErrores++;
                            continue;
                        }

                        // Emplazamiento Tipo                 
                        long? empTipoID = 0;
                        if (result.Tables[0].Rows[i][6].ToString() != "")
                        {
                            try
                            {
                                empTipoID = (from c in listaCargadaTipos where c.Tipo == result.Tables[0].Rows[i][6].ToString() select c.EmplazamientoTipoID).FirstOrDefault();

                                if (empTipoID != null && empTipoID > 0)
                                {
                                    emplazamiento.EmplazamientoTipoID = empTipoID;
                                }
                                else
                                {
                                    LogErrorCampoNoCreadoSites(sCodigo, Recursos.strTipoEmplazamiento, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                //log.Error(ex.Message);
                                LogErrorCampoSites(sCodigo, Recursos.strTipoEmplazamiento, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strTipoEmplazamiento, "");
                            iErrores++;
                            continue;
                        }

                        //Tipo Edificio
                        long? tipoEdificioID = 0;
                        if (result.Tables[0].Rows[i][7].ToString() != "")
                        {
                            try
                            {
                                tipoEdificioID = (from c in listaCargadaTiposEdificios where c.TipoEdificio == result.Tables[0].Rows[i][7].ToString() select c.EmplazamientoTipoEdificioID).FirstOrDefault();

                                if (tipoEdificioID != null && tipoEdificioID > 0)
                                {
                                    emplazamiento.TipoEdificacionID = tipoEdificioID;
                                }
                                else
                                {
                                    LogErrorCampoNoCreadoSites(sCodigo, Recursos.strTipoEdificio, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                //log.Error(ex.Message);
                                LogErrorCampoSites(sCodigo, Recursos.strTipoEdificio, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strTipoEdificio, "");
                            iErrores++;
                            continue;
                        }

                        //Tipo Estructura
                        long? tipoEstructuraID = 0;
                        EmplazamientosTiposEstructuras oTipoEstruc;
                        if (result.Tables[0].Rows[i][8].ToString() != "")
                        {
                            try
                            {
                                tipoEstructuraID = (from c in listaCargadaTiposEstructura where c.TipoEstructura == result.Tables[0].Rows[i][8].ToString() select c.EmplazamientoTipoEstructuraID).FirstOrDefault();

                                //tipoEstructuraID = (oTipoEstruc != null) ? oTipoEstruc.EmplazamientoTipoEstructuraID : 0;

                                if (tipoEstructuraID != null && tipoEstructuraID > 0)
                                {
                                    emplazamiento.EmplazamientoTipoEstructuraID = tipoEstructuraID;
                                }
                                else
                                {
                                    LogErrorCampoSites(sCodigo, Recursos.strTipoEstructura, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                LogErrorCampoSites(sCodigo, Recursos.strTipoEstructura, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            //LogInfoCampoSites(sCodigo, Recursos.strTipoEstructura);
                            //iWarning++;
                        }

                        // Tamaño Edificio
                        long? tamanoID = 0;
                        if (result.Tables[0].Rows[i][9].ToString() != "")
                        {
                            try
                            {
                                tamanoID = (from c in listaCargadaTamano where c.Tamano == result.Tables[0].Rows[i][9].ToString() select c.EmplazamientoTamanoID).FirstOrDefault();
                                if (tamanoID != null && tamanoID > 0)
                                {
                                    emplazamiento.EmplazamientoTamanoID = tamanoID;
                                }
                                else
                                {
                                    LogErrorCampoSites(sCodigo, Recursos.strTamano, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message);
                                LogErrorCampoSites(sCodigo, Recursos.strTamano, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            //LogInfoCampoSites(sCodigo, Recursos.strTamano);
                            //iWarning++;
                        }

                        // Fecha Activacion
                        DateTime fActiva = DateTime.MinValue;
                        if (result.Tables[0].Rows[i][10].ToString() != null && result.Tables[0].Rows[i][10].ToString() != "")
                        {
                            try
                            {
                                fActiva = GetFechaExcel(result.Tables[0].Rows[i][10].ToString());
                                if (fActiva.Date != new DateTime().Date)
                                {
                                    emplazamiento.FechaActivacion = fActiva;
                                }
                                else
                                {
                                    LogErrorCampoSites(sCodigo, Recursos.strFechaActivacion, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                //log.Error(ex.Message);
                                LogErrorCampoSites(sCodigo, Recursos.strFechaActivacion, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strFechaActivacion, "");
                            iErrores++;
                            continue;
                        }

                        // Fecha DesActivacion
                        DateTime fDesActiva = DateTime.MinValue;
                        if (result.Tables[0].Rows[i][11].ToString() != null && result.Tables[0].Rows[i][11].ToString() != "")
                        {
                            try
                            {
                                fDesActiva = GetFechaExcel(result.Tables[0].Rows[i][11].ToString());
                                if (fDesActiva.Date != new DateTime().Date)
                                {
                                    emplazamiento.FechaDesactivacion = fDesActiva;
                                }
                                else
                                {
                                    LogErrorCampoSites(sCodigo, Recursos.strFechaDesactivacion, "");
                                    iErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                LogErrorCampoSites(sCodigo, Recursos.strFechaDesactivacion, ex.Message);
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            //LogInfoCampoSites(sCodigo, Recursos.strFechaDesactivacion);
                            //iWarning++;
                        }

                        #endregion

                        #region LOCALIZACION SITIO
                        emplazamiento.Region = "";

                        // Municipio
                        if (!result.Tables[0].Rows[i][12].ToString().Equals(""))
                        {
                            Municipios municipio = (from c in listaCargadaMunicipios where c.Codigo == result.Tables[0].Rows[i][12].ToString() select c).FirstOrDefault();
                            if (municipio != null)
                            {
                                emplazamiento.Municipio = municipio.Municipio;
                                emplazamiento.MunicipioID = municipio.MunicipioID;
                                emplazamiento.Provincia = municipio.Provincias.Provincia;
                                emplazamiento.Region = municipio.Provincias.RegionesPaises.RegionPais;
                                emplazamiento.PaisID = municipio.Provincias.RegionesPaises.Paises.PaisID;
                            }
                            else
                            {
                                LogErrorCampoNoCreadoSites(sCodigo, Recursos.strMunicipio, "");
                                iErrores++;
                                continue;
                            }

                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strMunicipio, "");
                            iErrores++;
                            continue;
                        }

                        //Barrio
                        emplazamiento.Barrio = result.Tables[0].Rows[i][13].ToString();

                        // Direccion
                        if (!result.Tables[0].Rows[i][14].ToString().Equals(""))
                        {
                            emplazamiento.Direccion = result.Tables[0].Rows[i][14].ToString();
                        }
                        else
                        {
                            LogErrorCampoSites(sCodigo, Recursos.strDireccion, "");
                            iErrores++;
                            continue;
                        }

                        // Codigo postal
                        emplazamiento.CodigoPostal = result.Tables[0].Rows[i][15].ToString();

                        // Latitud - Longitud
                        if (result.Tables[0].Rows[i][16].ToString() != "" && result.Tables[0].Rows[i][17].ToString() != "" && result.Tables[0].Rows[i][16].ToString() != "0" && result.Tables[0].Rows[i][17].ToString() != "0")
                        {
                            double lat = 0;
                            double lon = 0;

                            lat = cEmplazamientos.ConvertirGrados2DecimalError(result.Tables[0].Rows[i][16].ToString().Replace(',', '.'));
                            lon = cEmplazamientos.ConvertirGrados2DecimalError(result.Tables[0].Rows[i][17].ToString().Replace(',', '.'));

                            if (lat <= 90 && lat >= -90)
                            {
                                string la = "";
                                la = result.Tables[0].Rows[i][16].ToString().Replace(',', '.');
                                emplazamiento.Latitud = Convert.ToDouble(la, System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                emplazamiento.Latitud = lat;
                            }

                            if (emplazamiento.Latitud > 90 || emplazamiento.Latitud < -90)
                            {
                                LogErrorCampoSites(sCodigo, Recursos.strLatitud, "");
                                iErrores++;
                                continue;
                            }

                            if (lon <= 180 && lon >= -180)
                            {
                                string lo = "";
                                lo = result.Tables[0].Rows[i][17].ToString().Replace(',', '.');
                                emplazamiento.Longitud = Convert.ToDouble(lo, System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                emplazamiento.Longitud = lon;
                            }

                            if (emplazamiento.Longitud > 180 || emplazamiento.Longitud < -180)
                            {
                                LogErrorCampoSites(sCodigo, Recursos.strLongitud, "");
                                iErrores++;
                                continue;
                            }
                        }
                        else
                        {
                            emplazamiento.Latitud = 0;
                            emplazamiento.Longitud = 0;
                            //LogInfoCampoNoCreadoSites(sCodigo, Recursos.strLatitud + "/" + Recursos.strLongitud);
                            //iWarning++;
                        }

                        #endregion

                        #region Datos Dinamicos

                        listaAtributos = new List<object>();
                        for (int r = 18; r < result.Tables[0].Columns.Count; r++)
                        {
                            string NombreAtributo = "";
                            string ValorAtributo = "";
                            if (!listaColumnasInvalidas.Contains(i))
                            {
                                NombreAtributo = result.Tables[0].Columns[r].ColumnName;
                                ValorAtributo = result.Tables[0].Rows[i][r].ToString();

                                oConfAtributo = (from c in listaCargadaAtributos where c.NombreAtributo == NombreAtributo select c).FirstOrDefault();
                                if (oConfAtributo.TiposDatos.Codigo == Comun.TIPODATO_CODIGO_FECHA && ValorAtributo != "")
                                {
                                    bool Correcto;
                                    DateTime dat = ComunServicios.GetFechaExcel(ValorAtributo, out Correcto);
                                    if (Correcto)
                                    {
                                        ValorAtributo = dat.ToString(CultureInfo.InvariantCulture);
                                    }
                                    else
                                    {
                                        ValorAtributo = "Error";
                                    }
                                }
                                Object Atributo = new
                                {
                                    AtributoID = oConfAtributo.EmplazamientoAtributoConfiguracionID,
                                    NombreAtributo = oConfAtributo.NombreAtributo,
                                    Valor = ValorAtributo,
                                    TipoDato = oConfAtributo.TiposDatos.Codigo,
                                    TextLista = ValorAtributo
                                };

                                listaAtributos.Add(Atributo);
                            }
                        }

                        #endregion

                        Clases.ResponseCreateController cResponse;
                        try
                        {
                            cResponse = cEmplazamientos.CreateSite(bActualizar, (bActualizar) ? emplazamientoOriginal.EmplazamientoID : 0, odoccarga.Usuarios, cliID,
                                emplazamiento.Codigo,
                                emplazamiento.NombreSitio,
                                emplazamiento.OperadorID,
                                (long)emplazamiento.EstadoGlobalID,
                                (long)emplazamiento.MonedaID,
                                (long)emplazamiento.CategoriaEmplazamientoID,
                                (long)emplazamiento.EmplazamientoTipoID,
                                emplazamiento.EmplazamientoTipoEstructuraID,
                                (long)emplazamiento.TipoEdificacionID,
                                emplazamiento.EmplazamientoTamanoID,
                                (DateTime)emplazamiento.FechaActivacion,
                                emplazamiento.FechaDesactivacion,
                                emplazamiento.PaisID,
                                (long)emplazamiento.MunicipioID,
                                emplazamiento.Direccion,
                                emplazamiento.Barrio,
                                emplazamiento.CodigoPostal,
                                emplazamiento.Longitud,
                                emplazamiento.Latitud,
                                listaAtributos,
                                jsonListas,
                                listaCargadaAtributos,
                                JsonPropiedades);

                            if (cResponse.infoResponse.Result)
                            {
                                if (bActualizar)
                                {
                                    iActualizados++;
                                }
                                else
                                {
                                    iCargados++;
                                }
                            }
                            else
                            {
                                iErrores++;
                                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmplazamientos + " " + sCodigo + " " + cResponse.infoResponse.Description);
                            }
                        }
                        catch (Exception ex)
                        {
                            iErrores++;
                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmplazamientos + " " + Recursos.strCodigoExcepcion100);
                            continue;
                        }
                        TimeSpan transcurrio = DateTime.Now - datInicio;
                        log.Info(Recursos.strEmplazamientos + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                    }

                    EscritorLogs.EscribeLogs("-------------------------");
                    EscritorLogs.EscribeLogs("SITES TO PROCESS: " + (result.Tables[0].Rows.Count).ToString());
                    EscritorLogs.EscribeLogs("SITES ADDED: " + iCargados.ToString());
                    EscritorLogs.EscribeLogs("SITES UPDATED" + ": " + iActualizados.ToString());
                    EscritorLogs.EscribeLogs("SITES WITH ERRORS: " + iErrores.ToString());
                    //EscritorLogs.EscribeLogs("WARNINGS IN SITES: " + iWarning.ToString());
                    EscritorLogs.EscribeLogs("-------------------------");

                    #endregion

                    #region Control Estadistica Cargas Masivas

                    MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
                    int iCounterExitos = 0;
                    int iCounterFallos = 0;
                    string sTipoCarga = "SITES TEMPLATE";
                    cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);

                    #endregion

                }
                else
                {
                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + "SITES UPLOAD: Client is missing");
                    sSalida = "ERROR";
                }
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmplazamientos + " " + Recursos.strCodigoExcepcion100);
                sSalida = "ERROR";
            }

            return sSalida;

        }
        public static string CargarDocumentacion(System.IO.Stream datos, DocumentosCargas odoccarga)
        {

            string sSalida = "";
            try
            {

                DateTime datInicio;
                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                OperadoresController cOperdores = new OperadoresController();
                //JM:excelReader.IsFirstRowAsColumnNames = true;
                PaisesController cPaises = new PaisesController();
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });
                DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
                DocumentosCargas odocumentocarga = new DocumentosCargas();
                string ruta = TreeCore.DirectoryMapping.GetImportDocumentsDirectory();
                string rutaWeb = TreeCore.DirectoryMapping.GetDocumentDirectory();

                // Local variables 
                string sMensaje = "";
                bool bInsertar = true;
                string sCodigo = "";
                string sFile, sObjetoNegocio;
                Documentos doc = null;
                Documentos oDocPadre = null;
                DocumentosController cDoc = new DocumentosController();
                List<Documentos> listaVersiones;
                //DocumentTipos tipo = null;
                DocumentalTiposController cTipo = new DocumentalTiposController();
                Emplazamientos emplazamiento = null;
                EmplazamientosController cEmplazamiento = new EmplazamientosController();
                ProyectosController cProyecto = new ProyectosController();
                //Proyectos proyectoLocal = null;
                long proyectoLocalID = 0;
                int iDocumentosTratados = 0;
                int iDocumentosErrores = 0;
                int iDocumentosCargados = 0;
                int iDocumentosWarning = 0;

                iDocumentosTratados = result.Tables[0].Rows.Count;

                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strDocumentos);

                foreach (DataRow row in result.Tables[0].Rows)
                {
                    datInicio = DateTime.Now;
                    try
                    {
                        oDocPadre = null;
                        listaVersiones = null;
                        sFile = row[3].ToString();
                        if (sFile != null && sFile != "")
                        {
                            doc = cDoc.getDocumentoByFile(sFile);
                            if (doc == null)
                            {
                                doc = new Documentos
                                {
                                    Activo = true,
                                    CreadorID = odoccarga.UsuarioID,
                                    Observaciones = ""
                                };
                                //Objeto de Negocio
                                if (row[0] != null && row[0].ToString() != "")
                                {
                                    switch (row[0].ToString())
                                    {
                                        case "SITE":
                                            if (row[1] != null && row[1].ToString() != "")
                                            {
                                                EmplazamientosController cEmplazamientos = new EmplazamientosController();
                                                Emplazamientos oEmplazamientos = cEmplazamientos.GetEmplazamientoByCodigo(row[1].ToString(), (long)odoccarga.ClienteID);
                                                if (oEmplazamientos != null)
                                                {
                                                    doc.EmplazamientoID = oEmplazamientos.EmplazamientoID;
                                                }
                                                else
                                                {
                                                    LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                    bInsertar = false;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                LogErrorCampoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                bInsertar = false;
                                                continue;
                                            }
                                            break;
                                        case "INVENTORY_ELEMENT":
                                            if (row[1] != null && row[1].ToString() != "")
                                            {
                                                InventarioElementosController cElementos = new InventarioElementosController();
                                                InventarioElementos oElemento = cElementos.GetElementoByCodigo(row[1].ToString(), (long)odoccarga.ClienteID);
                                                if (oElemento != null)
                                                {
                                                    doc.InventarioElementoID = oElemento.InventarioElementoID;
                                                }
                                                else
                                                {
                                                    LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                    bInsertar = false;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                LogErrorCampoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                bInsertar = false;
                                                continue;
                                            }
                                            break;
                                        case "USER":
                                            if (row[1] != null && row[1].ToString() != "")
                                            {
                                                UsuariosController cUsuarios = new UsuariosController();
                                                Usuarios oUsuario = cUsuarios.getUsuarioByEmail(row[1].ToString());
                                                if (oUsuario != null)
                                                {
                                                    doc.UsuarioID = oUsuario.UsuarioID;
                                                }
                                                else
                                                {
                                                    LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                    bInsertar = false;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                LogErrorCampoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                bInsertar = false;
                                                continue;
                                            }
                                            break;
                                        case "COMPANY":
                                            if (row[1] != null && row[1].ToString() != "")
                                            {
                                                EntidadesController cEntidades = new EntidadesController();
                                                Entidades oEntidad = cEntidades.GetEntidadByCodigo(row[1].ToString(), (long)odoccarga.ClienteID);
                                                if (oEntidad != null)
                                                {
                                                    doc.EntidadID = oEntidad.EntidadID;
                                                }
                                                else
                                                {
                                                    LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                    bInsertar = false;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                LogErrorCampoDocumentos(sFile, Recursos.strIdentificadorUnico, "");
                                                bInsertar = false;
                                                continue;
                                            }
                                            break;
                                        default:
                                            LogErrorCampoDocumentos(sFile, Recursos.strObjetoNegocio, "");
                                            bInsertar = false;
                                            continue;
                                            break;
                                    }
                                }
                                else
                                {
                                    LogErrorCampoDocumentos(sFile, Recursos.strObjetoNegocio, "");
                                    bInsertar = false;
                                    continue;
                                }

                                // Nombre
                                if (row[2] != null && row[2].ToString() != "")
                                {
                                    doc.Documento = row[2].ToString();
                                }
                                else
                                {
                                    LogErrorCampoDocumentos(sFile, Recursos.strNombre, "");
                                    bInsertar = false;
                                    continue;
                                }

                                // Extension
                                if (row[4] != null && row[4].ToString() != "")
                                {
                                    DocumentosExtensionesController cExtensiones = new DocumentosExtensionesController();
                                    DocumentosExtensiones oExtension = cExtensiones.GetExtensionbyExtension(row[4].ToString(), (long)odoccarga.ClienteID);
                                    if (oExtension != null)
                                    {
                                        doc.Extension = oExtension.Extension;
                                    }
                                    else
                                    {
                                        LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strExtension, "");
                                        bInsertar = false;
                                        continue;
                                    }
                                }
                                else
                                {
                                    LogErrorCampoDocumentos(sFile, Recursos.strExtension, "");
                                    bInsertar = false;
                                    continue;
                                }

                                // Archivo
                                if (row[3] != null && row[3].ToString() != "")
                                {
                                    try
                                    {
                                        if (File.Exists(ruta + "\\" + row[3].ToString() + "." + doc.Extension))
                                        {
                                            doc.Archivo = row[3].ToString();
                                        }
                                        else
                                        {
                                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsDocumento + " " + sFile + " " + Recursos.strArchivoInexistente);
                                            bInsertar = false;
                                            continue;
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        //log.Error(ex.Message);
                                        LogErrorCampoDocumentos(sFile, Recursos.strArchivo, ex.Message);
                                        bInsertar = false;
                                        continue;
                                    }
                                }
                                else
                                {
                                    LogErrorCampoDocumentos(sFile, Recursos.strArchivo, "");
                                    bInsertar = false;
                                    continue;
                                }

                                // Tipo
                                if (row[5] != null && row[5].ToString() != "")
                                {
                                    DocumentTiposController cDocumentoTipos = new DocumentTiposController();
                                    DocumentTipos oDocumentoTipo = cDocumentoTipos.GetDocumetoTipo(row[5].ToString());
                                    if (oDocumentoTipo != null)
                                    {
                                        doc.DocumentTipoID = oDocumentoTipo.DocumentTipoID;
                                    }
                                    else
                                    {
                                        LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strExtension, "");
                                        bInsertar = false;
                                        continue;
                                    }
                                }
                                else
                                {
                                    LogErrorCampoDocumentos(sFile, Recursos.strExtension, "");
                                    bInsertar = false;
                                    continue;
                                }

                                // Estado
                                if (row[6] != null && row[6].ToString() != "")
                                {
                                    DocumentosEstadosController cDocumentoTiposEstados = new DocumentosEstadosController();
                                    DocumentosEstados oEstado = cDocumentoTiposEstados.GetEstadobyNombre(row[6].ToString(), (long)odoccarga.ClienteID);
                                    if (oEstado != null)
                                    {
                                        doc.DocumentoEstadoID = oEstado.DocumentoEstadoID;
                                    }
                                    else
                                    {
                                        LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strEstado, "");
                                        bInsertar = false;
                                        continue;
                                    }
                                }
                                else
                                {
                                    LogErrorCampoDocumentos(sFile, Recursos.strEstado, "");
                                    bInsertar = false;
                                    continue;
                                }

                                // Documento Padre
                                //if (row[6] != null && row[6].ToString() != "")
                                //{
                                //    oDocPadre = cDoc.GetDocumentoByObjetoNegocio(row[6].ToString(), row[0].ToString(), row[1].ToString());
                                //    if (oDocPadre != null)
                                //    {
                                //        doc.DocumentoPadreID = oDocPadre.DocumentoID;
                                //    }
                                //    else
                                //    {
                                //        iDocumentosWarning++;
                                //        LogErrorCampoNoCreadoDocumentos(sFile, Recursos.strDocumentoInicial, "");
                                //    }
                                //}

                                //if (oDocPadre != null)
                                //{
                                //    listaVersiones = cDoc.GetObjectDocumentosHijos(oDocPadre.DocumentoID);
                                //    foreach (var oVer in listaVersiones)
                                //    {
                                //        if ((bool)oVer.UltimaVersion)
                                //        {
                                //            oVer.UltimaVersion = false;
                                //            cDoc.UpdateItem(oVer);
                                //        }
                                //    }
                                //    doc.UltimaVersion = true;
                                //    doc.Version = listaVersiones.Last().Version + 1;
                                //}
                                doc.Tamano = new FileInfo(ruta + "\\" + doc.Archivo + "." + doc.Extension).Length;
                                doc.Slug = cDoc.getNewDocumentSlug(doc.Documento);
                                doc = cDoc.AddItem(doc);

                                File.Move(ruta + "\\" + doc.Archivo + "." + doc.Extension, cDoc.ObtenerRutaDocumentoServicio((long)doc.DocumentTipoID, rutaWeb) + "\\" + doc.
                                    DocumentoID.ToString() + '_' + doc.Archivo + "." + doc.Extension);

                                doc.Archivo = doc.DocumentoID.ToString() + doc.Archivo;

                                cDoc.UpdateItem(doc);

                                iDocumentosCargados++;
                            }
                            else
                            {
                                iDocumentosErrores++;
                                EscritorLogs.EscribeLogs(Recursos.jsError + " " + "DOCUMENTS LOAD " + Recursos.strCodigoExcepcion100);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex.Message);
                        iDocumentosErrores++;
                        //log.Error("DOCUMENTS LOAD " + Recursos.strCodigoExcepcion100);

                    }

                    TimeSpan transcurrio = DateTime.Now - datInicio;
                    log.Info(Recursos.strDocumentos + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                }
                EscritorLogs.EscribeLogs("-------------------------");
                EscritorLogs.EscribeLogs("Total Documents" + " : " + iDocumentosTratados.ToString());
                EscritorLogs.EscribeLogs("Loaded Documents" + " : " + iDocumentosCargados.ToString());
                EscritorLogs.EscribeLogs("Documents Errors" + " : " + iDocumentosErrores.ToString());
                //EscritorLogs.EscribeLogs("Documents Warning" + " : " + iDocumentosWarning.ToString());
                EscritorLogs.EscribeLogs("-------------------------");

            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strDocumentos + " " + Recursos.strCodigoExcepcion100);
                sSalida = "ERROR";

            }

            return sSalida;
        }
        public static string CargarPlantillaContactos(System.IO.Stream datos, DocumentosCargas odoccarga)
        {
            DateTime datInicio;
            string sSalida = "";


            long cliID = 0;

            int maximo = 0;
            //string tipocarga = "PLANTILLA V23";
            DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
            DocumentosCargas odocumentocarga = new DocumentosCargas();
            try
            {
                // Reads the information from the excel file

                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });




                // Reads client information
                if (odoccarga.ClienteID != null /*&& odoccarga.OperadorID != null*/)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    // Stores the information
                    int iInitialTab = 0;

                    int numTabs = result.Tables.Count;
                    int k = 3;
                    //numTabs = 5;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;
                    int iWarning = 0;



                    if (odoccarga.TabInicial != null)
                    {
                        iInitialTab = (int)odoccarga.TabInicial;
                    }

                    if (odoccarga.TabFinal != null)
                    {
                        numTabs = (int)odoccarga.TabFinal;
                    }




                    // Checks all the tabs
                    for (k = 0; k < 5; k = k + 1)
                    {
                        switch (k)
                        {
                            #region CONTACTOS
                            case 0:

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                //EscritorLogs.EscribeLogs("start CONTACTS");
                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strContactos);
                                foreach (DataRow row in result.Tables[0].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    string sNombre = row[0].ToString();
                                    string sApellidos = row[1].ToString();
                                    string sEmail = row[2].ToString();
                                    string sPrefijo;

                                    ContactosGlobales oContacto = null;
                                    ContactosGlobalesController cContactos = new ContactosGlobalesController();
                                    PaisesController cPaises = new PaisesController();
                                    oContacto = cContactos.GetContactoByEmail(sEmail, cliID);


                                    if (oContacto != null)
                                    {
                                        //Nombre
                                        if (sNombre != "")
                                        {
                                            oContacto.Nombre = sNombre;
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strNombre, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Apellidos
                                        if (sApellidos != "")
                                        {
                                            oContacto.Apellidos = sApellidos;
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strApellidos, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Email
                                        if (row[2].ToString() != "" && row[2].ToString() != null)
                                        {
                                            oContacto.Email = row[2].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strEmail, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Prefijo
                                        if (row[3].ToString() != "" && row[3].ToString() != null)
                                        {
                                            if (cPaises.PrefijoValido(cliID, row[3].ToString()))
                                            {
                                                sPrefijo = row[3].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strPrefijo, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Telefono
                                        if (row[4].ToString() != "" && row[4].ToString() != null)
                                        {
                                            oContacto.Telefono = sPrefijo + " " + row[4].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strTelefono, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Prefijo
                                        if (row[5].ToString() != "" && row[5].ToString() != null)
                                        {
                                            if (cPaises.PrefijoValido(cliID, row[5].ToString()))
                                            {
                                                sPrefijo = row[5].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strPrefijo, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Telefono 2
                                        if (row[6].ToString() != "" && row[6].ToString() != null)
                                        {
                                            oContacto.Telefono2 = sPrefijo + " " + row[6].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strTelefono2, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Tipo entidad
                                        if (row[7].ToString() != "")
                                        {
                                            ContactosTiposController cContactosTipos = new ContactosTiposController();
                                            ContactosTipos oTipo = cContactosTipos.GetTipobyNombre(row[7].ToString(), cliID);

                                            if (oTipo != null)
                                            {
                                                oContacto.ContactoTipoID = oTipo.ContactoTipoID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strTipoContacto, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        //Municipio
                                        if (row[8].ToString() != "")
                                        {
                                            MunicipiosController cMunipios = new MunicipiosController();
                                            Municipios oMunicipio = cMunipios.GetMunicipioByCodigo(row[8].ToString(), cliID);

                                            if (oMunicipio != null)
                                            {
                                                oContacto.MunicipioID = oMunicipio.MunicipioID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strMunicipio, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        //Codigo Postal
                                        if (row[9].ToString() != "" && row[9].ToString() != null)
                                        {
                                            oContacto.CP = row[9].ToString();
                                        }
                                        else
                                        {
                                            LogInfoCampoContactos(sEmail, Recursos.strCodigoPostal);
                                            iWarning++;
                                        }

                                        //Direccion
                                        if (row[10].ToString() != "" && row[10].ToString() != null)
                                        {
                                            oContacto.Direccion = row[10].ToString();
                                        }
                                        else
                                        {
                                            LogInfoCampoContactos(sEmail, Recursos.strDireccion);
                                            iWarning++;
                                        }

                                        //Comentarios
                                        if (row[11].ToString() != "" && row[11].ToString() != null)
                                        {
                                            oContacto.Comentarios = row[11].ToString();
                                        }
                                        else
                                        {
                                            LogInfoCampoContactos(sEmail, Recursos.strComentarios);
                                            iWarning++;
                                        }

                                        cContactos.UpdateItem(oContacto);
                                        iActualizados++;
                                    }
                                    else
                                    {
                                        //Codigo Entidad
                                        oContacto = new ContactosGlobales();
                                        //Nombre
                                        if (sNombre != "")
                                        {
                                            oContacto.Nombre = sNombre;
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strNombre, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Apellidos
                                        if (sApellidos != "")
                                        {
                                            oContacto.Apellidos = sApellidos;
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strApellidos, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Email
                                        if (row[2].ToString() != "" && row[2].ToString() != null)
                                        {
                                            oContacto.Email = row[2].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strEmail, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Prefijo
                                        if (row[3].ToString() != "" && row[3].ToString() != null)
                                        {
                                            if (cPaises.PrefijoValido(cliID, row[3].ToString()))
                                            {
                                                sPrefijo = row[3].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strPrefijo, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Telefono
                                        if (row[4].ToString() != "" && row[4].ToString() != null)
                                        {
                                            oContacto.Telefono = sPrefijo + " " + row[4].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strTelefono, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Prefijo
                                        if (row[5].ToString() != "" && row[5].ToString() != null)
                                        {
                                            if (cPaises.PrefijoValido(cliID, row[5].ToString()))
                                            {
                                                sPrefijo = row[5].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strPrefijo, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Telefono 2
                                        if (row[6].ToString() != "" && row[6].ToString() != null)
                                        {
                                            oContacto.Telefono2 = sPrefijo + " " + row[6].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoContactos(sEmail, Recursos.strTelefono2, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Tipo entidad
                                        if (row[7].ToString() != "")
                                        {
                                            ContactosTiposController cContactosTipos = new ContactosTiposController();
                                            ContactosTipos oTipo = cContactosTipos.GetTipobyNombre(row[7].ToString(), cliID);

                                            if (oTipo != null)
                                            {
                                                oContacto.ContactoTipoID = oTipo.ContactoTipoID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strTipoContacto, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        //Municipio
                                        if (row[8].ToString() != "")
                                        {
                                            MunicipiosController cMunipios = new MunicipiosController();
                                            Municipios oMunicipio = cMunipios.GetMunicipioByCodigo(row[8].ToString(), cliID);

                                            if (oMunicipio != null)
                                            {
                                                oContacto.MunicipioID = oMunicipio.MunicipioID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoContactos(sEmail, Recursos.strMunicipio, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        //Codigo Postal
                                        if (row[9].ToString() != "" && row[9].ToString() != null)
                                        {
                                            oContacto.CP = row[9].ToString();
                                        }
                                        else
                                        {
                                            LogInfoCampoContactos(sEmail, Recursos.strCodigoPostal);
                                            iWarning++;
                                        }

                                        //Direccion
                                        if (row[10].ToString() != "" && row[10].ToString() != null)
                                        {
                                            oContacto.Direccion = row[10].ToString();
                                        }
                                        else
                                        {
                                            LogInfoCampoContactos(sEmail, Recursos.strDireccion);
                                            iWarning++;
                                        }

                                        //Comentarios
                                        if (row[11].ToString() != "" && row[11].ToString() != null)
                                        {
                                            oContacto.Comentarios = row[11].ToString();
                                        }
                                        else
                                        {
                                            LogInfoCampoContactos(sEmail, Recursos.strComentarios);
                                            iWarning++;
                                        }

                                        oContacto.Activo = true;
                                        oContacto.ClienteID = cliID;
                                        cContactos.AddItem(oContacto);
                                        iCargados++;
                                    }

                                    GC.Collect();
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strContactos + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }

                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL CONTACTS" + ": " + maximo);
                                EscritorLogs.EscribeLogs("CONTACTS CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END CONTACTS");
                                EscritorLogs.EscribeLogs("-------------------------");

                                break;
                            #endregion

                            #region CONTACTOS-EMPLAZAMIENTOS
                            case 1:

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;


                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strContactos + "-" + Recursos.strEmplazamientos);
                                foreach (DataRow row in result.Tables[1].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    string sCodigoSite = row[0].ToString();
                                    string sEmail = row[1].ToString();

                                    EmplazamientosController cEmplazamientos = new EmplazamientosController();
                                    Emplazamientos oEmplazmiento = cEmplazamientos.GetEmplazamientoByCodigo(sCodigoSite, cliID);

                                    ContactosGlobalesController cContactos = new ContactosGlobalesController();
                                    ContactosGlobales oContacto = cContactos.GetContactoByEmail(sEmail, cliID);

                                    ContactosGlobalesEmplazamientosController cContSites = new ContactosGlobalesEmplazamientosController();

                                    if (oEmplazmiento != null && oContacto != null)
                                    {
                                        try
                                        {
                                            if (cContSites.AddUpdateRelacion(oEmplazmiento.EmplazamientoID, oContacto.ContactoGlobalID))
                                            {
                                                iCargados++;
                                            }
                                            else
                                            {
                                                LogErrorContactoEmplazamiento(sCodigoSite, sEmail, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            LogErrorContactoEmplazamiento(sCodigoSite, sEmail, ex.Message);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        LogErrorContactoEmplazamientoNoExisten(sCodigoSite, sEmail, "");
                                        iErrores++;
                                        continue;
                                    }

                                    GC.Collect();
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strContactos + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }
                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL CONTACTS-SITES" + ": " + maximo);
                                EscritorLogs.EscribeLogs("CONTACTS-SITES CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS-SITES UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS-SITES ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS-SITES WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END CONTACTS-SITES");
                                EscritorLogs.EscribeLogs("-------------------------");

                                break;
                            #endregion

                            #region CONTACTOS-ENTIDADES
                            case 2:

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strContactos + "-" + Recursos.strEntidades);
                                foreach (DataRow row in result.Tables[2].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    string sCodigoEntidad = row[0].ToString();
                                    string sEmail = row[1].ToString();

                                    EntidadesController cEntidades = new EntidadesController();
                                    Entidades oEntidades = cEntidades.GetEntidadByCodigo(sCodigoEntidad, cliID);

                                    ContactosGlobalesController cContactos = new ContactosGlobalesController();
                                    ContactosGlobales oContacto = cContactos.GetContactoByEmail(sEmail, cliID);

                                    ContactosGlobalesEntidadesController cContEntity = new ContactosGlobalesEntidadesController();

                                    if (oEntidades != null && oContacto != null)
                                    {
                                        try
                                        {
                                            if (cContEntity.AddUpdateRelacion(oEntidades.EntidadID, oContacto.ContactoGlobalID))
                                            {
                                                iCargados++;
                                            }
                                            else
                                            {
                                                LogErrorContactoEntidades(sCodigoEntidad, sEmail, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            LogErrorContactoEntidades(sCodigoEntidad, sEmail, ex.Message);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        LogErrorContactoEntidadesNoExisten(sCodigoEntidad, sEmail, "");
                                        iErrores++;
                                        continue;
                                    }

                                    GC.Collect();
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strContactos + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }
                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL CONTACTS-ENTITIES" + ": " + maximo);
                                EscritorLogs.EscribeLogs("CONTACTS-ENTITIES CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS-ENTITIES UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS-ENTITIES ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("CONTACTS-ENTITIES WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END CONTACTS-ENTITIES");
                                EscritorLogs.EscribeLogs("-------------------------");

                                break;
                                #endregion

                                #region Control Estadistica Cargas Masivas


                                MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
                                int iCounterExitos = 0;
                                int iCounterFallos = 0;
                                string sTipoCarga = "ENTITIES";

                                cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


                                #endregion


                        }


                    }


                }
                else
                {
                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strCodigoExcepcion100);
                    sSalida = "ERROR";
                }


            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strCodigoExcepcion100);
                sSalida = "ERROR";
            }

            return sSalida;
            // Returns the result

        }
        public static string CargarPlantillaEntidades(System.IO.Stream datos, DocumentosCargas odoccarga)
        {


            string sSalida = "";


            long cliID = 0;

            int maximo = 0;
            //string tipocarga = "PLANTILLA V23";
            DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
            DocumentosCargas odocumentocarga = new DocumentosCargas();
            try
            {
                DateTime datInicio;
                // Reads the information from the excel file

                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });




                // Reads client information
                if (odoccarga.ClienteID != null /*&& odoccarga.OperadorID != null*/)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    // Stores the information
                    int iInitialTab = 0;

                    int numTabs = result.Tables.Count;
                    int k = 3;
                    //numTabs = 5;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;
                    int iWarning = 0;



                    if (odoccarga.TabInicial != null)
                    {
                        iInitialTab = (int)odoccarga.TabInicial;
                    }

                    if (odoccarga.TabFinal != null)
                    {
                        numTabs = (int)odoccarga.TabFinal;
                    }




                    // Checks all the tabs
                    for (k = 0; k < 5; k = k + 1)
                    {
                        switch (k)
                        {
                            #region ENTIDADES
                            case 0:

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strEntidades);
                                foreach (DataRow row in result.Tables[0].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    string sRazonSocial = row[0].ToString();
                                    string sIdentificador = row[1].ToString();
                                    string sEmail = row[4].ToString();
                                    string sPrefijo;

                                    Entidades Oentidad = null;
                                    EntidadesController cEntidades = new EntidadesController();
                                    Oentidad = cEntidades.GetEntidadByCodigo(sIdentificador, Convert.ToInt32(odoccarga.ClienteID));


                                    if (Oentidad != null)
                                    {
                                        //nombre Entidad
                                        if (sRazonSocial != "")
                                        {
                                            Oentidad.Nombre = sRazonSocial;
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strNombre, "");
                                            iErrores++;
                                            continue;
                                        }
                                        //Alias
                                        if (row[2].ToString() != "" && row[2].ToString() != null)
                                        {
                                            Oentidad.Alias = row[2].ToString();
                                        }
                                        else
                                        {
                                            Oentidad.Alias = "";
                                        }



                                        //Tipo entidad
                                        if (row[3].ToString() != "")
                                        {
                                            EntidadesTiposController cEntidadesTipos = new EntidadesTiposController();
                                            long tipoentidadID = cEntidadesTipos.GetTipoByNombreAll(row[3].ToString());

                                            if (tipoentidadID > 0)
                                            {
                                                Oentidad.EntidadTipoID = tipoentidadID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoEntidades(sIdentificador, Recursos.strTipoEntidad, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        //Email
                                        if (sEmail != "")
                                        {

                                            if (sEmail.Contains("@"))
                                            {
                                                Oentidad.Email = row[4].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoEntidades(sIdentificador, Recursos.strEmail, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strEmail, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Prefijo
                                        PaisesController cPaises = new PaisesController();
                                        if (row[5].ToString() != "" && row[5].ToString() != null)
                                        {
                                            if (cPaises.PrefijoValido(cliID, row[5].ToString()))
                                            {
                                                sPrefijo = row[5].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoEntidades(sEmail, Recursos.strPrefijo, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sEmail, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Telefono
                                        if (row[6].ToString() != "" && row[6].ToString() != null)
                                        {
                                            Oentidad.Telefono = sPrefijo + " " + row[6].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sEmail, Recursos.strTelefono, "");
                                            iErrores++;
                                            continue;
                                        }


                                        if (!row[67].ToString().Equals(""))
                                        {
                                            MunicipiosController cMunicipios = new MunicipiosController();
                                            Municipios municipio = cMunicipios.GetMunicipioByCodigo(row[7].ToString(), (long)odoccarga.ClienteID);
                                            if (municipio != null)
                                            {
                                                Oentidad.MunicipioID = municipio.MunicipioID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoEntidades(sIdentificador, Recursos.strMunicipio, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strMunicipio, "");
                                            iErrores++;
                                            continue;
                                        }



                                        //CodigoPostal
                                        if (row[8].ToString() != "" && row[8].ToString() != null)
                                        {
                                            Oentidad.CodigoPostal = row[8].ToString();
                                        }
                                        else
                                        {
                                            Oentidad.CodigoPostal = "";
                                        }
                                        //Direccion
                                        if (row[9].ToString() != "" && row[9].ToString() != null)
                                        {
                                            Oentidad.Direccion = row[9].ToString();
                                        }
                                        else
                                        {
                                            Oentidad.Direccion = "";
                                        }

                                        cEntidades.UpdateItem(Oentidad);
                                        iActualizados++;
                                    }
                                    else
                                    {
                                        //Codigo Entidad
                                        Oentidad = new Entidades();
                                        sRazonSocial = row[0].ToString();
                                        if (sIdentificador != "")
                                        {

                                            Oentidad.Codigo = sIdentificador;
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strCodigo, "");
                                            iErrores++;
                                            continue;
                                        }
                                        //nombre Entidad
                                        if (sRazonSocial != "")
                                        {
                                            Oentidad.Nombre = sRazonSocial;
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strNombre, "");
                                            iErrores++;
                                            continue;
                                        }
                                        //Alias
                                        if (row[2].ToString() != "" && row[2].ToString() != null)
                                        {
                                            Oentidad.Alias = row[2].ToString();
                                        }
                                        else
                                        {
                                            Oentidad.Alias = "";
                                        }

                                        //Tipo entidad
                                        if (row[3].ToString() != "")
                                        {
                                            EntidadesTiposController cEntidadesTipos = new EntidadesTiposController();
                                            long tipoentidadID = cEntidadesTipos.GetTipoByNombreAll(row[3].ToString());

                                            if (tipoentidadID > 0)
                                            {
                                                Oentidad.EntidadTipoID = tipoentidadID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoEntidades(sIdentificador, Recursos.strTipoEntidad, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        //Email
                                        if (sEmail != "")
                                        {

                                            if (sEmail.Contains("@"))
                                            {
                                                Oentidad.Email = row[4].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoEntidades(sIdentificador, Recursos.strEmail, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strEmail, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Prefijo
                                        PaisesController cPaises = new PaisesController();
                                        if (row[5].ToString() != "" && row[5].ToString() != null)
                                        {
                                            if (cPaises.PrefijoValido(cliID, row[5].ToString()))
                                            {
                                                sPrefijo = row[5].ToString();
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoEntidades(sEmail, Recursos.strPrefijo, "");
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sEmail, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //Telefono
                                        if (row[6].ToString() != "" && row[6].ToString() != null)
                                        {
                                            Oentidad.Telefono = sPrefijo + " " + row[6].ToString();
                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sEmail, Recursos.strTelefono, "");
                                            iErrores++;
                                            continue;
                                        }

                                        if (!row[7].ToString().Equals(""))
                                        {
                                            MunicipiosController cMunicipios = new MunicipiosController();
                                            Municipios municipio = cMunicipios.GetMunicipioByCodigo(row[7].ToString(), (long)odoccarga.ClienteID);
                                            if (municipio != null)
                                            {
                                                Oentidad.MunicipioID = municipio.MunicipioID;
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoEntidades(sIdentificador, Recursos.strMunicipio, "");
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            LogErrorCampoEntidades(sIdentificador, Recursos.strMunicipio, "");
                                            iErrores++;
                                            continue;
                                        }

                                        //CodigoPostal
                                        if (row[8].ToString() != "" && row[8].ToString() != null)
                                        {
                                            Oentidad.CodigoPostal = row[8].ToString();
                                        }
                                        else
                                        {
                                            Oentidad.CodigoPostal = "";
                                        }
                                        //Direccion
                                        if (row[9].ToString() != "" && row[9].ToString() != null)
                                        {
                                            Oentidad.Direccion = row[9].ToString();
                                        }
                                        else
                                        {
                                            Oentidad.Direccion = "";
                                        }

                                        Oentidad.Activo = true;
                                        Oentidad.ClienteID = cliID;
                                        cEntidades.AddItem(Oentidad);
                                        iCargados++;
                                    }

                                    GC.Collect();
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strEntidades + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }
                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL ENTITIES" + ": " + maximo);
                                EscritorLogs.EscribeLogs("ENTITIES CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("ENTITIES UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("ENTITIES ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("ENTITIES WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END ENTITIES");
                                EscritorLogs.EscribeLogs("-------------------------");

                                break;
                            #endregion

                            #region PROPIETARIOS 
                            case 1:
                                maximo = result.Tables[1].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strPropietarios);
                                foreach (DataRow row in result.Tables[1].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    Entidades OentidadPropietarios = null;
                                    EntidadesController cEntidadesPropietarios = new EntidadesController();
                                    string sCodigoEnitdadPropietarios = "";
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEnitdadPropietarios = row[0].ToString();
                                        OentidadPropietarios = cEntidadesPropietarios.GetEntidadByCodigo(sCodigoEnitdadPropietarios, Convert.ToInt32(odoccarga.ClienteID));
                                        if (OentidadPropietarios != null)
                                        {
                                            Propietarios propietario = null;
                                            PropietariosController cPropietario = new PropietariosController();
                                            ProvinciasController cProvinciasPropietarios = new ProvinciasController();
                                            MunicipiosController cMunicipiosPropietarios = new MunicipiosController();
                                            if (OentidadPropietarios.PropietarioID != null)
                                            {
                                                propietario = cPropietario.GetItem(Convert.ToInt32(OentidadPropietarios.PropietarioID));

                                                #region ACTUALIZAR PROPIETARIO
                                                try
                                                {
                                                    propietario.CodigoSAP = "";
                                                    propietario.Nombre = OentidadPropietarios.Nombre;
                                                    propietario.DNIPropietario = sCodigoEnitdadPropietarios;
                                                    propietario.Alias = OentidadPropietarios.Alias;
                                                    propietario.Email = OentidadPropietarios.Email;
                                                    propietario.Telefono = OentidadPropietarios.Telefono;
                                                    propietario.Direccion = OentidadPropietarios.Direccion;
                                                    propietario.MunicipioID = OentidadPropietarios.MunicipioID;
                                                    propietario.ProvinciaID = cMunicipiosPropietarios.GetItem(Convert.ToInt32(OentidadPropietarios.MunicipioID)).ProvinciaID;
                                                    cPropietario.UpdateItem(propietario);
                                                    iActualizados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to update the Owner: " + propietario.DNIPropietario + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to update the Owner: " + propietario.DNIPropietario + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;
                                                }

                                                #endregion

                                            }
                                            else
                                            {
                                                #region CREAR NUEVO PROPIETARIO
                                                try
                                                {
                                                    propietario = new Propietarios();
                                                    propietario.CodigoSAP = "";
                                                    propietario.Nombre = OentidadPropietarios.Nombre;
                                                    propietario.DNIPropietario = sCodigoEnitdadPropietarios;
                                                    propietario.Alias = OentidadPropietarios.Alias;
                                                    propietario.Email = OentidadPropietarios.Email;
                                                    propietario.Telefono = OentidadPropietarios.Telefono;
                                                    propietario.Direccion = OentidadPropietarios.Direccion;
                                                    propietario.MunicipioID = OentidadPropietarios.MunicipioID;
                                                    propietario.ProvinciaID = cMunicipiosPropietarios.GetItem(Convert.ToInt64( OentidadPropietarios.MunicipioID)).ProvinciaID;
                                                    propietario.Activo = true;
                                                    propietario.Defecto = true;
                                                    propietario.ClienteID = OentidadPropietarios.ClienteID;
                                                    propietario = cPropietario.AddItem(propietario);
                                                    OentidadPropietarios.PropietarioID = propietario.PropietarioID;
                                                    cEntidadesPropietarios.UpdateItem(OentidadPropietarios);
                                                    iCargados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to add the Owner: " + propietario.DNIPropietario + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to add the Owner: " + propietario.DNIPropietario + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;
                                                }

                                                #endregion
                                            }


                                        }
                                        else
                                        {
                                            LogErrorCampoNoCreadoPropietarios(sCodigoEnitdadPropietarios, Recursos.strEntidad, "");
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        LogErrorCampoNoCreadoPropietarios(sCodigoEnitdadPropietarios, Recursos.strEntidad, "");
                                        iErrores++;
                                        continue;
                                    }
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strPropietarios + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }
                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL OWNERS" + ": " + maximo);
                                EscritorLogs.EscribeLogs("OWNERS CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("OWNERS UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("OWNERS ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("OWNERS WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END OWNERS");
                                EscritorLogs.EscribeLogs("-------------------------");
                                break;
                            #endregion

                            #region OPERADORES 
                            case 2:
                                maximo = result.Tables[2].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;


                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strOperadores);

                                foreach (DataRow row in result.Tables[2].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    Entidades OentidadOperadores = null;
                                    EntidadesController cEntidadesOperadores = new EntidadesController();
                                    string sCodigoEnitdadOperadores = "";
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEnitdadOperadores = row[0].ToString();
                                        OentidadOperadores = cEntidadesOperadores.GetEntidadByCodigo(sCodigoEnitdadOperadores, Convert.ToInt32(odoccarga.ClienteID));
                                        if (OentidadOperadores != null)
                                        {
                                            Operadores operador = null;
                                            OperadoresController cOperadores = new OperadoresController();

                                            if (OentidadOperadores.OperadorID != null)
                                            {
                                                operador = cOperadores.GetItem(Convert.ToInt32(OentidadOperadores.OperadorID));
                                                #region ACTUALIZAR OPERADOR

                                                try
                                                {
                                                    //FREINDLY
                                                    if (row[1].ToString().ToUpper() == "SI" || row[1].ToString().ToUpper() == "TRUE")
                                                    {

                                                        operador.Friendly = true;

                                                    }
                                                    else if (row[1].ToString().ToUpper() == "NO" || row[1].ToString().ToUpper() == "FALSE")
                                                    {
                                                        operador.Friendly = false;
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoOperadores(sCodigoEnitdadOperadores, Recursos.strFriendly, "");
                                                        iErrores++;
                                                        continue;
                                                    }
                                                    //TORRERO
                                                    if (row[2].ToString().ToUpper() == "SI" || row[2].ToString().ToUpper() == "TRUE")
                                                    {

                                                        operador.Torrero = true;

                                                    }
                                                    else if (row[2].ToString().ToUpper() == "NO" || row[2].ToString().ToUpper() == "FALSE")
                                                    {
                                                        operador.Torrero = false;
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoOperadores(sCodigoEnitdadOperadores, Recursos.strTorreros, "");
                                                        iErrores++;
                                                        continue;
                                                    }
                                                    //CLIENTE
                                                    if (row[3].ToString().ToUpper() == "SI" || row[3].ToString().ToUpper() == "TRUE")
                                                    {

                                                        operador.EsCliente = true;

                                                    }
                                                    else if (row[3].ToString().ToUpper() == "NO" || row[3].ToString().ToUpper() == "FALSE")
                                                    {
                                                        operador.EsCliente = false;
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoOperadores(sCodigoEnitdadOperadores, Recursos.strCliente, "");
                                                        iErrores++;
                                                        continue;
                                                    }


                                                    cOperadores.UpdateItem(operador);
                                                    iActualizados++;
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to update the Operators: " + operador.CIF + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to update the Operators: " + operador.CIF + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;
                                                }

                                                #endregion

                                            }
                                            else
                                            {
                                                #region CREAR NUEVO PROPIETARIO
                                                try
                                                {
                                                    operador = new Operadores();
                                                    //FREINDLY
                                                    if (row[1].ToString().ToUpper() == "SI" || row[1].ToString().ToUpper() == "TRUE")
                                                    {

                                                        operador.Friendly = true;

                                                    }
                                                    else if (row[1].ToString().ToUpper() == "NO" || row[1].ToString().ToUpper() == "FALSE")
                                                    {
                                                        operador.Friendly = false;
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoOperadores(sCodigoEnitdadOperadores, Recursos.strFriendly, "");
                                                        iErrores++;
                                                        continue;
                                                    }
                                                    //TORRERO
                                                    if (row[2].ToString().ToUpper() == "SI" || row[2].ToString().ToUpper() == "TRUE")
                                                    {

                                                        operador.Torrero = true;

                                                    }
                                                    else if (row[2].ToString().ToUpper() == "NO" || row[2].ToString().ToUpper() == "FALSE")
                                                    {
                                                        operador.Torrero = false;
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoOperadores(sCodigoEnitdadOperadores, Recursos.strTorreros, "");
                                                        iErrores++;
                                                        continue;
                                                    }
                                                    //CLIENTE
                                                    if (row[3].ToString().ToUpper() == "SI" || row[3].ToString().ToUpper() == "TRUE")
                                                    {

                                                        operador.EsCliente = true;

                                                    }
                                                    else if (row[3].ToString().ToUpper() == "NO" || row[3].ToString().ToUpper() == "FALSE")
                                                    {
                                                        operador.EsCliente = false;
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoOperadores(sCodigoEnitdadOperadores, Recursos.strCliente, "");
                                                        iErrores++;
                                                        continue;
                                                    }

                                                    operador.Operador = OentidadOperadores.Nombre;
                                                    operador.RazonSocial = OentidadOperadores.Alias;
                                                    operador.CIF = OentidadOperadores.Codigo;
                                                    operador.CodigoPostal = OentidadOperadores.CodigoPostal;
                                                    operador.Direccion = OentidadOperadores.Direccion;
                                                    operador.ClienteID = OentidadOperadores.ClienteID;
                                                    if (OentidadOperadores.ProveedorID != null)
                                                    {
                                                        operador.ProveedorID = OentidadOperadores.ProveedorID;
                                                    }
                                                    operador.MunicipioID = OentidadOperadores.MunicipioID;
                                                    operador = cOperadores.AddItem(operador);
                                                    iCargados++;
                                                    OentidadOperadores.OperadorID = operador.OperadorID;
                                                    cEntidadesOperadores.UpdateItem(OentidadOperadores);
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to add the Operators: " + operador.CIF + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to add the Operators: " + operador.CIF + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;
                                                }

                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoNoCreadoPropietarios(sCodigoEnitdadOperadores, Recursos.strEntidad, "");
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        LogErrorCampoPropietarios(sCodigoEnitdadOperadores, Recursos.strEntidad, "");
                                        iErrores++;
                                        continue;
                                    }
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strPropietarios + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }

                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL OPERATORS" + ": " + maximo);
                                EscritorLogs.EscribeLogs("OPERATORS CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("OPERATORS UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("OWOPERATORSNERS ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("OPERATORS WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END OPERATORS");
                                EscritorLogs.EscribeLogs("-------------------------");

                                break;
                            #endregion

                            #region PROVIDERS 
                            case 3:
                                maximo = result.Tables[3].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                EscritorLogs.EscribeLogs("start PROVIDERS");

                                //                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strProveedores);


                                foreach (DataRow row in result.Tables[3].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    Entidades OentidadProveedoras = null;
                                    EntidadesController cEntidadesProveedoras = new EntidadesController();
                                    string sCodigoEnitdadProveedoras = "";
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEnitdadProveedoras = row[0].ToString();
                                        OentidadProveedoras = cEntidadesProveedoras.GetEntidadByCodigo(sCodigoEnitdadProveedoras, Convert.ToInt32(odoccarga.ClienteID));
                                        if (OentidadProveedoras != null)
                                        {
                                            Proveedores proveedor = null;
                                            ProveedoresController cproveedor = new ProveedoresController();
                                            ProvinciasController cProvinciasProveedores = new ProvinciasController();
                                            MunicipiosController cMunicipiosProveedores = new MunicipiosController();
                                            RegionesPaisesController cRegionesPaises = new RegionesPaisesController();

                                            if (OentidadProveedoras.ProveedorID != null)
                                            {
                                                proveedor = cproveedor.GetItem(Convert.ToInt32(OentidadProveedoras.ProveedorID));

                                                #region UPDATES PROVIDER
                                                //ACTUALIZAR PROVIDER
                                                try
                                                {
                                                    // LITERAL FORMA PAGO
                                                    if (row[1].ToString() != "")
                                                    {
                                                        MetodosPagosController cMetodo = new MetodosPagosController();
                                                        long metodoID = cMetodo.GetMetodoByCodigoAll(row[1].ToString());
                                                        if (metodoID > 0)
                                                        {
                                                            proveedor.MetodoPagoID = metodoID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strMetodoPago);
                                                            iWarning++;
                                                        }
                                                    }
                                                    // TIPO CONTRIBUYENTE
                                                    if (row[2].ToString() != "")
                                                    {
                                                        TiposContribuyentesController cContribuyente = new TiposContribuyentesController();
                                                        long contriID = cContribuyente.GetTiposContribuyentes(row[2].ToString());
                                                        if (contriID > 0)
                                                        {
                                                            proveedor.TipoContribuyenteID = contriID;
                                                        }
                                                        else
                                                        {
                                                            LogErrorCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strContribuyente, "");
                                                            iErrores++;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strContribuyente, "");

                                                        iErrores++;
                                                        continue;
                                                    }

                                                    // CLAVE CONDICIONES DE PAGO
                                                    CondicionesPagosController cCondiciones = new CondicionesPagosController();
                                                    if (row[3].ToString() != "")
                                                    {
                                                        CondicionesPagos condiciones = cCondiciones.GetCondicionPagoByNombre(row[3].ToString());
                                                        if (condiciones != null)
                                                        {
                                                            proveedor.CondicionPagoID = condiciones.CondicionPagoID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strCondicionPago);
                                                            iWarning++;
                                                        }
                                                    }

                                                    // GRUPO TESORERÍA
                                                    SAPGruposTesoreriasController cGrupoTesoreria = new SAPGruposTesoreriasController();
                                                    if (row[4].ToString() != "")
                                                    {
                                                        SAPGruposTesorerias grupoTesoreria = cGrupoTesoreria.GetGrupoTesoreriaByNombre(row[4].ToString());
                                                        if (grupoTesoreria != null)
                                                        {
                                                            proveedor.SAPGrupoTesoreriaID = grupoTesoreria.SAPGrupoTesoreriaID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strGrupoTesoreria);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // CLAVE PARA CLASIFICAR
                                                    SAPClavesClasificacionesController cClave = new SAPClavesClasificacionesController();
                                                    if (row[5].ToString() != "")
                                                    {
                                                        SAPClavesClasificaciones claveClasificacion = cClave.GetClaveClasificacionByNombre(row[5].ToString());
                                                        if (claveClasificacion != null)
                                                        {
                                                            proveedor.SAPClaveClasificacionID = claveClasificacion.SAPClaveClasificacionID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strClaveClasificacion);

                                                            iWarning++;
                                                        }
                                                    }

                                                    // Cuenta asociada a la contabilidad principal
                                                    SAPCuentasAsociadasController cSAPCuentasAsociadas = new SAPCuentasAsociadasController();
                                                    if (row[6].ToString() != "")
                                                    {
                                                        SAPCuentasAsociadas CuentaAsociada = cSAPCuentasAsociadas.GetCuentaAsociadaByNombre(row[6].ToString());
                                                        if (CuentaAsociada != null)
                                                        {
                                                            proveedor.SAPCuentaAsociadaID = CuentaAsociada.SAPCuentaAsociadaID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strCuentaAsociada);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // Grupo de cuentas acreedor                                        
                                                    SAPGruposCuentasController cGrupoCuenta = new SAPGruposCuentasController();
                                                    if (row[7].ToString() != "")
                                                    {
                                                        SAPGruposCuentas grupoCuenta = cGrupoCuenta.GetGrupoCuentaByNombre(row[7].ToString());
                                                        if (grupoCuenta != null)
                                                        {
                                                            proveedor.SAPGrupoCuentaID = grupoCuenta.SAPGrupoCuentaID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strGrupoCuenta);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // Tratamiento del proveedor
                                                    SAPTratamientosController cTratamiento = new SAPTratamientosController();
                                                    if (row[8].ToString() != "")
                                                    {
                                                        SAPTratamientos tratamiento = cTratamiento.GetTratamientoByNombre(row[8].ToString());
                                                        if (tratamiento != null)
                                                        {
                                                            proveedor.SAPTratamientoID = tratamiento.SAPTratamientoID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strTratamiento);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // Tipo de número de identificación fiscal (SAPTiposNIF - Codigo)
                                                    SAPTiposNIFController cTipoNif = new SAPTiposNIFController();
                                                    if (row[9].ToString() != "")
                                                    {
                                                        SAPTiposNIF tipoNif = cTipoNif.GetTipoNifByCodigo(row[9].ToString());
                                                        if (tipoNif != null)
                                                        {
                                                            proveedor.SAPTipoNIFID = tipoNif.SAPTipoNIFID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strTipoNIF);
                                                            iWarning++;
                                                        }
                                                    }

                                                    cproveedor.UpdateItem(proveedor);
                                                    iActualizados++;

                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to update the Suppliers: " + proveedor.FacturacionDNICIF + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to update the Suppliers: " + proveedor.FacturacionDNICIF + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;

                                                }
                                                #endregion

                                            }
                                            else
                                            {
                                                //AGREGAR NUEVO PROVIDER
                                                #region CREAR NUEVO PROVIDER
                                                //ACTUALIZAR PROVIDER
                                                try
                                                {
                                                    proveedor = new Proveedores();
                                                    proveedor.FacturacionDNICIF = OentidadProveedoras.Codigo;
                                                    proveedor.FacturacionRazonSocial = OentidadProveedoras.Nombre;
                                                    proveedor.FacturacionDireccion = OentidadProveedoras.Direccion;
                                                    proveedor.FacturacionCP = OentidadProveedoras.CodigoPostal;
                                                    proveedor.TelefonoContacto = OentidadProveedoras.Telefono;
                                                    proveedor.FacturacionEmail = OentidadProveedoras.Email;
                                                    proveedor.FacturacionMunicipio = cMunicipiosProveedores.GetItem(Convert.ToInt64( OentidadProveedoras.MunicipioID)).Municipio;
                                                    proveedor.FacturacionProvicia = cProvinciasProveedores.GetItem(cMunicipiosProveedores.GetItem(Convert.ToInt64(OentidadProveedoras.MunicipioID)).ProvinciaID).Provincia;
                                                    proveedor.PaisID = cRegionesPaises.GetItem(cProvinciasProveedores.GetItem(cMunicipiosProveedores.GetItem(Convert.ToInt64(OentidadProveedoras.MunicipioID)).ProvinciaID).RegionPaisID).PaisID;
                                                    proveedor.ClienteID = OentidadProveedoras.ClienteID;
                                                    proveedor.Activo = true;

                                                    // LITERAL FORMA PAGO
                                                    if (row[1].ToString() != "")
                                                    {
                                                        MetodosPagosController cMetodo = new MetodosPagosController();
                                                        long metodoID = cMetodo.GetMetodoByCodigoAll(row[1].ToString());
                                                        if (metodoID > 0)
                                                        {
                                                            proveedor.MetodoPagoID = metodoID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strMetodoPago);
                                                            iWarning++;
                                                        }
                                                    }
                                                    // TIPO CONTRIBUYENTE
                                                    if (row[2].ToString() != "")
                                                    {
                                                        TiposContribuyentesController cContribuyente = new TiposContribuyentesController();
                                                        long contriID = cContribuyente.GetTiposContribuyentes(row[2].ToString());
                                                        if (contriID > 0)
                                                        {
                                                            proveedor.TipoContribuyenteID = contriID;
                                                        }
                                                        else
                                                        {
                                                            LogErrorCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strContribuyente, "");
                                                            iErrores++;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strContribuyente, "");
                                                        iErrores++;
                                                        continue;
                                                    }

                                                    // CLAVE CONDICIONES DE PAGO
                                                    CondicionesPagosController cCondiciones = new CondicionesPagosController();
                                                    if (row[3].ToString() != "")
                                                    {
                                                        CondicionesPagos condiciones = cCondiciones.GetCondicionPagoByNombre(row[3].ToString());
                                                        if (condiciones != null)
                                                        {
                                                            proveedor.CondicionPagoID = condiciones.CondicionPagoID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strCondicionPago);

                                                            iWarning++;
                                                        }
                                                    }

                                                    // GRUPO TESORERÍA
                                                    SAPGruposTesoreriasController cGrupoTesoreria = new SAPGruposTesoreriasController();
                                                    if (row[4].ToString() != "")
                                                    {
                                                        SAPGruposTesorerias grupoTesoreria = cGrupoTesoreria.GetGrupoTesoreriaByNombre(row[4].ToString());
                                                        if (grupoTesoreria != null)
                                                        {
                                                            proveedor.SAPGrupoTesoreriaID = grupoTesoreria.SAPGrupoTesoreriaID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strGrupoTesoreria);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // CLAVE PARA CLASIFICAR
                                                    SAPClavesClasificacionesController cClave = new SAPClavesClasificacionesController();
                                                    if (row[5].ToString() != "")
                                                    {
                                                        SAPClavesClasificaciones claveClasificacion = cClave.GetClaveClasificacionByNombre(row[5].ToString());
                                                        if (claveClasificacion != null)
                                                        {
                                                            proveedor.SAPClaveClasificacionID = claveClasificacion.SAPClaveClasificacionID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strClaveClasificacion);

                                                            iWarning++;
                                                        }
                                                    }

                                                    // Cuenta asociada a la contabilidad principal
                                                    SAPCuentasAsociadasController cSAPCuentasAsociadas = new SAPCuentasAsociadasController();
                                                    if (row[6].ToString() != "")
                                                    {
                                                        SAPCuentasAsociadas CuentaAsociada = cSAPCuentasAsociadas.GetCuentaAsociadaByNombre(row[6].ToString());
                                                        if (CuentaAsociada != null)
                                                        {
                                                            proveedor.SAPCuentaAsociadaID = CuentaAsociada.SAPCuentaAsociadaID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strCuentaAsociada);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // Grupo de cuentas acreedor                                        
                                                    SAPGruposCuentasController cGrupoCuenta = new SAPGruposCuentasController();
                                                    if (row[7].ToString() != "")
                                                    {
                                                        SAPGruposCuentas grupoCuenta = cGrupoCuenta.GetGrupoCuentaByNombre(row[7].ToString());
                                                        if (grupoCuenta != null)
                                                        {
                                                            proveedor.SAPGrupoCuentaID = grupoCuenta.SAPGrupoCuentaID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strGrupoCuenta);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // Tratamiento del proveedor
                                                    SAPTratamientosController cTratamiento = new SAPTratamientosController();
                                                    if (row[8].ToString() != "")
                                                    {
                                                        SAPTratamientos tratamiento = cTratamiento.GetTratamientoByNombre(row[8].ToString());
                                                        if (tratamiento != null)
                                                        {
                                                            proveedor.SAPTratamientoID = tratamiento.SAPTratamientoID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strTratamiento);

                                                            iWarning++;
                                                        }
                                                    }
                                                    // Tipo de número de identificación fiscal (SAPTiposNIF - Codigo)
                                                    SAPTiposNIFController cTipoNif = new SAPTiposNIFController();
                                                    if (row[9].ToString() != "")
                                                    {
                                                        SAPTiposNIF tipoNif = cTipoNif.GetTipoNifByCodigo(row[9].ToString());
                                                        if (tipoNif != null)
                                                        {
                                                            proveedor.SAPTipoNIFID = tipoNif.SAPTipoNIFID;
                                                        }
                                                        else
                                                        {
                                                            LogInfoCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strTipoNIF);
                                                            iWarning++;
                                                        }
                                                    }


                                                    proveedor = cproveedor.AddItem(proveedor);
                                                    iCargados++;
                                                    OentidadProveedoras.ProveedorID = proveedor.ProveedorID;
                                                    cEntidadesProveedoras.UpdateItem(OentidadProveedoras);


                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to add the Suppliers: " + proveedor.FacturacionDNICIF + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to add the Suppliers: " + proveedor.FacturacionDNICIF + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;
                                                }
                                                #endregion


                                            }
                                        }
                                        else
                                        {
                                            LogErrorCampoNoCreadoProveedores(sCodigoEnitdadProveedoras, Recursos.strEntidad, "");
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        LogErrorCampoProveedores(sCodigoEnitdadProveedoras, Recursos.strEntidad, "");
                                        iErrores++;
                                        continue;
                                    }
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strProveedores + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }

                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL PROVIDERS" + ": " + maximo);
                                EscritorLogs.EscribeLogs("PROVIDERS CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("PROVIDERS UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("PROVIDERS ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("PROVIDERS WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END PROVIDERS");
                                EscritorLogs.EscribeLogs("-------------------------");
                                break;
                            #endregion

                            #region EMPRESAS PROVEEDOREAS 
                            case 4:
                                maximo = result.Tables[4].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;


                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strEmpresasProveedoras);

                                foreach (DataRow row in result.Tables[4].Rows)
                                {
                                    datInicio = DateTime.Now;
                                    EntidadesController cEntidadesEmpresasProveedoras = new EntidadesController();
                                    Entidades OentidadesEmpresaProveedora = null;
                                    string sCodigoEnitdadEmpresaProveedora = "";
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEnitdadEmpresaProveedora = row[0].ToString();
                                        OentidadesEmpresaProveedora = cEntidadesEmpresasProveedoras.GetEntidadByCodigo(sCodigoEnitdadEmpresaProveedora, Convert.ToInt32(odoccarga.ClienteID));
                                        if (OentidadesEmpresaProveedora != null)
                                        {
                                            EmpresasProveedoras empresaproveedora = null;
                                            EmpresasProveedorasController cEmpresasProveedoras = new EmpresasProveedorasController();
                                            cEmpresasProveedoras.SetDataContext(cEntidadesEmpresasProveedoras.Context);
                                            EmpresasProveedorasProyectosTiposController cEmpresasProveedorasTipos = new EmpresasProveedorasProyectosTiposController();
                                            cEmpresasProveedorasTipos.SetDataContext(cEmpresasProveedoras.Context);
                                            List<EmpresasProveedorasProyectosTipos> lempresaproveedoratipoproyecto = new List<EmpresasProveedorasProyectosTipos>();
                                            EmpresasProveedorasProyectosTipos empresaproveedoratipoproyecto = new EmpresasProveedorasProyectosTipos();
                                            ProyectosTiposController cProyectosTipos = new ProyectosTiposController();
                                            cProyectosTipos.SetDataContext(cEmpresasProveedoras.Context);
                                            if (OentidadesEmpresaProveedora.EmpresaProveedoraID != null)
                                            {
                                                empresaproveedora = cEmpresasProveedoras.GetItem(Convert.ToInt32(OentidadesEmpresaProveedora.EmpresaProveedoraID));

                                                #region ACTUALIZAR EMPRESAS PROVEEDORAS
                                                try
                                                {
                                                    //MODULO
                                                    if (row[1].ToString() != null)
                                                    {
                                                        lempresaproveedoratipoproyecto = cEmpresasProveedorasTipos.getByEmpresaProveedora(empresaproveedora.EmpresaProveedoraID);
                                                        if (lempresaproveedoratipoproyecto.Count <= 0)
                                                        {
                                                            empresaproveedoratipoproyecto = new EmpresasProveedorasProyectosTipos();
                                                            empresaproveedoratipoproyecto.EmpresaProveedoraID = empresaproveedora.EmpresaProveedoraID;
                                                            empresaproveedoratipoproyecto.ProyectoTipoID = cProyectosTipos.GetProyectosTiposIDByNombre(row[1].ToString());
                                                            if (empresaproveedoratipoproyecto.ProyectoTipoID >= 0)
                                                            {
                                                                cEmpresasProveedorasTipos.AddItem(empresaproveedoratipoproyecto);
                                                                iActualizados++;
                                                            }
                                                            else
                                                            {
                                                                LogErrorCampoNoCreadoEmpresasProveedoras(sCodigoEnitdadEmpresaProveedora, Recursos.strModulo, "");
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }

                                                    }
                                                    else
                                                    {

                                                        LogErrorCampoNoCreadoEmpresasProveedoras(sCodigoEnitdadEmpresaProveedora, Recursos.strModulo, "");
                                                        iErrores++;
                                                        continue;
                                                    }




                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Excepcion to update the Supplier Companies: " + empresaproveedora.CIF + " - " + ex.Message);
                                                    EscritorLogs.EscribeLogs("Excepcion to update the Supplier Companies: " + empresaproveedora.CIF + " - " + Recursos.strCodigoExcepcion100);
                                                    iErrores++;
                                                    continue;
                                                }





                                                #endregion

                                            }
                                            else
                                            {
                                                #region CREAR NUEVA EMPRESAS PROVEEDORAS
                                                using (TransactionScope trans = new TransactionScope(TransactionScopeOption.RequiresNew, new TimeSpan(0)))
                                                {
                                                    try
                                                    {

                                                        empresaproveedora = new EmpresasProveedoras();
                                                        empresaproveedora.EmpresaProveedora = OentidadesEmpresaProveedora.Nombre;
                                                        empresaproveedora.Email = OentidadesEmpresaProveedora.Email;
                                                        empresaproveedora.CIF = OentidadesEmpresaProveedora.Codigo;
                                                        empresaproveedora.CodigoPostal = OentidadesEmpresaProveedora.CodigoPostal;
                                                        empresaproveedora.Direccion = OentidadesEmpresaProveedora.Direccion;
                                                        empresaproveedora.Telefono = OentidadesEmpresaProveedora.Direccion;
                                                        empresaproveedora.ClienteID = OentidadesEmpresaProveedora.ClienteID;
                                                        empresaproveedora.Activo = true;
                                                        empresaproveedora.TokenActivos = true;
                                                        if (OentidadesEmpresaProveedora.ProveedorID != null)
                                                        {
                                                            empresaproveedora.ProveedorID = OentidadesEmpresaProveedora.ProveedorID;
                                                        }
                                                        empresaproveedora.MunicipioID = OentidadesEmpresaProveedora.MunicipioID;
                                                        empresaproveedora = cEmpresasProveedoras.AddItem(empresaproveedora);

                                                        iCargados++;
                                                        OentidadesEmpresaProveedora.EmpresaProveedoraID = empresaproveedora.EmpresaProveedoraID;
                                                        cEntidadesEmpresasProveedoras.UpdateItem(OentidadesEmpresaProveedora);
                                                        if (row[1].ToString() != null)
                                                        {

                                                            empresaproveedoratipoproyecto = new EmpresasProveedorasProyectosTipos();
                                                            empresaproveedoratipoproyecto.EmpresaProveedoraID = empresaproveedora.EmpresaProveedoraID;
                                                            empresaproveedoratipoproyecto.ProyectoTipoID = cProyectosTipos.GetProyectosTiposIDByNombre(row[1].ToString());
                                                            if (empresaproveedoratipoproyecto.ProyectoTipoID > 0)
                                                            {
                                                                cEmpresasProveedorasTipos.AddItem(empresaproveedoratipoproyecto);
                                                                iActualizados++;
                                                            }
                                                            else
                                                            {
                                                                trans.Dispose();
                                                                LogErrorCampoNoCreadoEmpresasProveedoras(sCodigoEnitdadEmpresaProveedora, Recursos.strModulo, "");
                                                                iErrores++;
                                                                continue;
                                                            }


                                                        }
                                                        else
                                                        {
                                                            trans.Dispose();
                                                            LogErrorCampoNoCreadoEmpresasProveedoras(sCodigoEnitdadEmpresaProveedora, Recursos.strModulo, "");
                                                            iErrores++;
                                                            continue;
                                                        }
                                                        trans.Complete();
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        trans.Dispose();
                                                        log.Error("Excepcion to add the Supplier Companies: " + empresaproveedora.CIF + " - " + ex.Message);
                                                        EscritorLogs.EscribeLogs("Excepcion to add the Supplier Companies: " + empresaproveedora.CIF + " - " + Recursos.strCodigoExcepcion100);
                                                        iErrores++;
                                                        continue;
                                                    }
                                                }

                                                #endregion
                                            }

                                        }
                                        else
                                        {
                                            LogErrorCampoEmpresasProveedoras(sCodigoEnitdadEmpresaProveedora, Recursos.strEntidad, "");
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        LogErrorCampoEmpresasProveedoras(sCodigoEnitdadEmpresaProveedora, Recursos.strEntidad, "");
                                        iErrores++;
                                        continue;
                                    }
                                    TimeSpan transcurrio = DateTime.Now - datInicio;
                                    log.Info(Recursos.strEmpresasProveedoras + " loaded line in " + transcurrio.TotalMilliseconds.ToString());
                                }

                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL SERVICES PROVIDERS" + ": " + maximo);
                                EscritorLogs.EscribeLogs("SERVICES PROVIDERS CHARGED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("SERVICES PROVIDERS UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("SERVICES PROVIDERS ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("SERVICES PROVIDERS WARNING" + ": " + iWarning.ToString());
                                EscritorLogs.EscribeLogs("END SERVICES PROVIDERS");
                                EscritorLogs.EscribeLogs("-------------------------");

                                break;
                                #endregion


                                #region Control Estadistica Cargas Masivas


                                MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
                                int iCounterExitos = 0;
                                int iCounterFallos = 0;
                                string sTipoCarga = "ENTITIES";

                                cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


                                #endregion


                        }


                    }


                }
                else
                {
                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEntidad + " " + Recursos.strCodigoExcepcion100);
                    //log.Error("SERVICEIMPORTEXPORTENTITIES; " + "ENTITIES LOAD" + Recursos.strCodigoExcepcion100);
                    sSalida = "ERROR";
                }


            }
            catch (Exception ex)
            {
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEntidad + " " + Recursos.strCodigoExcepcion100);
                log.Error(ex.Message);
                //log.Error("SERVICEIMPORTEXPORTENTITIES; " + "ENTITIES LOAD" + Recursos.strCodigoExcepcion100);
                sSalida = "ERROR";
            }

            return sSalida;
            // Returns the result

        }
        public static string CargarPlantillaUsuarios(System.IO.Stream datos, DocumentosCargas odoccarga)
        {
            string sSalida = "";
            long cliID = 0;
            int maximo = 0;

            try
            {
                DateTime datInicio;
                DateTime datInicioFila;

                TimeSpan minTiempoFila = new TimeSpan();
                TimeSpan maxTiempoFila = new TimeSpan();
                TimeSpan tiempoFila = new TimeSpan();

                // Reads the information from the excel file
                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });

                // Read information
                if (odoccarga.ClienteID != null)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    // Stores the information
                    int numTabs = result.Tables.Count;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;

                    TimeSpan tiempoTotal;
                    double promedio;

                    EntidadesController cEntidades = new EntidadesController();

                    UsuariosController cUsuarios = new UsuariosController();
                    cUsuarios.SetDataContext(cEntidades.Context);

                    UsuariosRolesController cUsuariosRoles = new UsuariosRolesController();
                    cUsuariosRoles.SetDataContext(cEntidades.Context);

                    RolesController cRoles = new RolesController();
                    cRoles.SetDataContext(cEntidades.Context);

                    PaisesController cPaises = new PaisesController();
                    cPaises.SetDataContext(cEntidades.Context);

                    List<Entidades> listaEntidades = cEntidades.GetAllEntidadesByClienteID(cliID);
                    List<Usuarios> listaUsuarios = cUsuarios.GetAllUsersByClienteID(cliID);
                    List<UsuariosRoles> listasVinculaciones = cUsuariosRoles.GetActivos(cliID);
                    List<Roles> listaRoles = cRoles.GetActivos(cliID);

                    // Checks all the tabs
                    for (int k = 0; k < numTabs; k++)
                    {
                        switch (k)
                        {
                            #region USUARIOS
                            case 0:

                                datInicio = DateTime.Now;

                                minTiempoFila = new TimeSpan();
                                maxTiempoFila = new TimeSpan();
                                tiempoFila = new TimeSpan();

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;

                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strUsuarios);

                                foreach (DataRow row in result.Tables[0].Rows)
                                {
                                    try
                                    {

                                        datInicioFila = DateTime.Now;

                                        string sNombre = row[0].ToString();
                                        string sApellidos = row[1].ToString();
                                        string sPrefijo = row[2].ToString();
                                        string sTelefono = row[3].ToString();
                                        string sEmail = row[4].ToString();
                                        string sEntidad = row[5].ToString();
                                        string sFechaExpiracion = row[6].ToString();

                                        Entidades oEntidad = null;
                                        oEntidad = (from c in listaEntidades where c.Nombre == sEntidad select c).FirstOrDefault();

                                        DateTime FechaExpiracion = GetFechaExcel(sFechaExpiracion);

                                        if (sNombre.Equals(""))
                                        {
                                            LogErrorCampoUsuarios(sNombre, Recursos.strNombre, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (sApellidos.Equals(""))
                                        {
                                            LogErrorCampoUsuarios(sApellidos, Recursos.strApellidos, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (sPrefijo.Equals(""))
                                        {
                                            LogErrorCampoUsuarios(sTelefono, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (!cPaises.PrefijoValido(cliID, sPrefijo))
                                        {
                                            LogErrorCampoNoCreadoUsuarios(sTelefono, Recursos.strPrefijo, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (sTelefono.Equals(""))
                                        {
                                            LogErrorCampoUsuarios(sTelefono, Recursos.strTelefono, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (sEmail.Equals("") || !RegexUtilities.IsValidEmail(sEmail))
                                        {
                                            LogErrorCampoUsuarios(sEmail, Recursos.strEmail, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (sEntidad.Equals("") || oEntidad == null)
                                        {
                                            LogErrorCampoNoCreadoUsuarios(sEntidad, Recursos.strEntidad, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else if (sFechaExpiracion.Equals("") || FechaExpiracion == DateTime.MinValue)
                                        {
                                            LogErrorCampoUsuarios(sFechaExpiracion, Recursos.strUsuarioExpiracion, "");
                                            iErrores++;
                                            continue;
                                        }
                                        else
                                        {
                                            Usuarios oUsuario = null;
                                            oUsuario = (from c in listaUsuarios where c.EMail == sEmail select c).FirstOrDefault();

                                            //Editar
                                            if (oUsuario != null)
                                            {
                                                oUsuario.Nombre = sNombre;
                                                oUsuario.Apellidos = sApellidos;
                                                oUsuario.Telefono = sPrefijo + " " + sTelefono;
                                                oUsuario.EMail = sEmail;
                                                oUsuario.EntidadID = oEntidad.EntidadID;
                                                oUsuario.FechaCaducidadUsuario = FechaExpiracion;
                                                oUsuario.FechaUltimoCambio = DateTime.Today.Date;
                                                cUsuarios.UpdateItem(oUsuario);
                                                iActualizados++;
                                            }
                                            else
                                            {
                                                oUsuario = new Usuarios();
                                                oUsuario.Nombre = sNombre;
                                                oUsuario.Apellidos = sApellidos;
                                                oUsuario.Telefono = sPrefijo + " " + sTelefono;
                                                oUsuario.EMail = sEmail;
                                                oUsuario.EntidadID = oEntidad.EntidadID;
                                                oUsuario.FechaCaducidadUsuario = FechaExpiracion;
                                                oUsuario.UltimasClaves = "";
                                                oUsuario.CambiarClave = true;
                                                oUsuario.Activo = true;
                                                oUsuario.ClienteID = cliID;
                                                oUsuario.FechaUltimoCambio = DateTime.Today.Date;
                                                string password = System.Web.Security.Membership.GeneratePassword(8, 1);
                                                oUsuario.Clave = Tree.Utiles.md5.MD5String(password);

                                                string contenidoEmail = TreeCore.Email.GetPlantillaEmailAddUser(sNombre, sEmail, password);
                                                string correcto = TreeCore.Email.SendMail(sEmail, "TREE", "", "Welcome to TREE", "", contenidoEmail, "");

                                                cUsuarios.Context.Usuarios.InsertOnSubmit(oUsuario);

                                                listaUsuarios.Add(oUsuario);

                                                iCargados++;
                                            }
                                        }

                                        GC.Collect();

                                        tiempoFila = DateTime.Now - datInicioFila;
                                        log.Info(Recursos.strInventario + " loaded line in " + tiempoFila.TotalMilliseconds.ToString());

                                        if (minTiempoFila != TimeSpan.MinValue || tiempoFila < minTiempoFila)
                                        {
                                            minTiempoFila = tiempoFila;
                                        }

                                        if (tiempoFila > maxTiempoFila)
                                        {
                                            maxTiempoFila = tiempoFila;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuarios + ": " + Recursos.strCodigoExcepcion100);
                                        log.Error(ex.Message);
                                    }
                                }

                                cUsuarios.Context.SubmitChanges();

                                tiempoTotal = DateTime.Now - datInicio;
                                promedio = tiempoTotal.TotalMilliseconds / maximo;

                                EscritorLogs.EscribeLogs("COMPLETION TIME: " + DateTime.Now.ToString());
                                EscritorLogs.EscribeLogs("TOTAL TIME SPENT (MINUTES)" + ": " + tiempoTotal.TotalMinutes.ToString());
                                EscritorLogs.EscribeLogs("AVERAGE TIME PER ROW (MILLISECONDS)" + ": " + promedio.ToString());
                                EscritorLogs.EscribeLogs("MIN TIME (MILLISECONDS)" + ": " + minTiempoFila.TotalMilliseconds.ToString());
                                EscritorLogs.EscribeLogs("MAX TIME (MILLISECONDS)" + ": " + maxTiempoFila.TotalMilliseconds.ToString());
                                EscritorLogs.EscribeLogs("-------------------------");

                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL USERS" + ": " + maximo);
                                EscritorLogs.EscribeLogs("USERS ADDED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("USERS UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("USERS ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("END USERS");
                                EscritorLogs.EscribeLogs("-------------------------");

                                GC.Collect();

                                break;


                            #endregion                            

                            #region USUARIOS ROLES
                            case 1:

                                datInicio = DateTime.Now;

                                minTiempoFila = new TimeSpan();
                                maxTiempoFila = new TimeSpan();
                                tiempoFila = new TimeSpan();

                                maximo = result.Tables[1].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;

                                EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strUsuarios + " Roles");

                                foreach (DataRow row in result.Tables[1].Rows)
                                {
                                    try
                                    {

                                        datInicioFila = DateTime.Now;

                                        string sEmail = row[0].ToString();
                                        string sRol = row[1].ToString();

                                        Usuarios oUsuario = null;
                                        Roles oRol = null;
                                        UsuariosRoles oVinculacion = null;

                                        oUsuario = (from c in listaUsuarios where c.EMail == sEmail select c).FirstOrDefault();

                                        if (oUsuario == null)
                                        {
                                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuario + " " + sEmail + " " + Recursos.LogErrorCampoNoCreado);
                                            iErrores++;
                                            continue;
                                        }

                                        oRol = (from c in listaRoles where c.Nombre == sRol select c).FirstOrDefault();

                                        if (oRol == null)
                                        {
                                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strRol + " " + sRol + " " + Recursos.LogErrorCampoNoCreado);
                                            iErrores++;
                                            continue;
                                        }

                                        oVinculacion = (from c in listasVinculaciones where c.UsuarioID == oUsuario.UsuarioID && c.RolID == oRol.RolID select c).FirstOrDefault();

                                        if (oVinculacion != null)
                                        {
                                            iActualizados++;
                                        }
                                        else
                                        {
                                            oVinculacion = new UsuariosRoles
                                            {
                                                UsuarioID = oUsuario.UsuarioID,
                                                RolID = oRol.RolID
                                            };
                                            cUsuariosRoles.Context.UsuariosRoles.InsertOnSubmit(oVinculacion);
                                            listasVinculaciones.Add(oVinculacion);
                                            iCargados++;
                                        }

                                        GC.Collect();

                                        tiempoFila = DateTime.Now - datInicioFila;
                                        log.Info(Recursos.strInventario + " loaded line in " + tiempoFila.TotalMilliseconds.ToString());

                                        if (minTiempoFila != TimeSpan.MinValue || tiempoFila < minTiempoFila)
                                        {
                                            minTiempoFila = tiempoFila;
                                        }

                                        if (tiempoFila > maxTiempoFila)
                                        {
                                            maxTiempoFila = tiempoFila;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuarios + " Roles" + ": " + Recursos.strCodigoExcepcion100);
                                        log.Error(ex.Message);
                                    }
                                }

                                cUsuariosRoles.Context.SubmitChanges();

                                tiempoTotal = DateTime.Now - datInicio;
                                promedio = tiempoTotal.TotalMilliseconds / maximo;

                                EscritorLogs.EscribeLogs("COMPLETION TIME: " + DateTime.Now.ToString());
                                EscritorLogs.EscribeLogs("TOTAL TIME SPENT (MINUTES)" + ": " + tiempoTotal.TotalMinutes.ToString());
                                EscritorLogs.EscribeLogs("AVERAGE TIME PER ROW (MILLISECONDS)" + ": " + promedio.ToString());
                                EscritorLogs.EscribeLogs("MIN TIME (MILLISECONDS)" + ": " + minTiempoFila.TotalMilliseconds.ToString());
                                EscritorLogs.EscribeLogs("MAX TIME (MILLISECONDS)" + ": " + maxTiempoFila.TotalMilliseconds.ToString());
                                EscritorLogs.EscribeLogs("-------------------------");

                                EscritorLogs.EscribeLogs("-------------------------");
                                EscritorLogs.EscribeLogs("TOTAL USERS ROLES" + ": " + maximo);
                                EscritorLogs.EscribeLogs("USERS ROLES ADDED" + ": " + iCargados.ToString());
                                EscritorLogs.EscribeLogs("USERS ROLES UPDATED" + ": " + iActualizados.ToString());
                                EscritorLogs.EscribeLogs("USERS ROLES ERROR" + ": " + iErrores.ToString());
                                EscritorLogs.EscribeLogs("END USERS ROLES");
                                EscritorLogs.EscribeLogs("-------------------------");

                                GC.Collect();

                                break;


                                #endregion

                        }
                    }

                    #region Control Estadistica Cargas Masivas

                    MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
                    int iCounterExitos = 0;
                    int iCounterFallos = 0;
                    string sTipoCarga = "USERS";
                    cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);

                    #endregion

                }
                else
                {
                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuarios + " " + Recursos.strCodigoExcepcion100);
                    sSalida = "ERROR";
                }
            }
            catch (Exception ex)
            {
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuarios + " " + Recursos.strCodigoExcepcion100);
                log.Error(ex.Message);
                sSalida = "ERROR";
            }

            return sSalida;
        }



        #region Inventario

        public class AtributoInventario
        {
            public long AtributoInventarioID { get; set; }
            public string NombreAtributo { get; set; }
            public string TipoDato { get; set; }
            public string ListaValores { get; set; }
            public Dictionary<long, string> ListaIDValores { get; set; }
            public bool Obligatorio { get; set; }
            public bool CodigoUnico { get; set; }
            public long IndiceColumna { get; set; }
        }

        public class ValoresAtributos
        {
            public long ValorAtributoID { get; set; }
            public AtributoInventario Atributo { get; set; }
            public string ValorAtributo { get; set; }
        }

        public static string CargaMasivaInventario(System.IO.Stream datos, DocumentosCargas odoccarga)
        {
            string res = "";


            List<DataTable> dataTable = new List<DataTable>();
            EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strElementosInventario);
            dataTable = ReadAsDataTable(datos, odoccarga.RutaDocumento);
            if (dataTable.Count > 0)
            {
                res = CargarInventarioV3(dataTable, odoccarga);
            }
            else
            {
                res = "Datos sin procesar";
            }



            return res;
        }
        public static string CargaMasivaSubcategorias(System.IO.Stream datos, DocumentosCargas odoccarga)
        {
            string res = "";

            List<DataTable> dataTable = new List<DataTable>();
            EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.jsFormSectionPlantillas);
            dataTable = ReadAsDataTable(datos, odoccarga.RutaDocumento);
            if (dataTable.Count > 0)
            {
                res = CargarSubcategorias(dataTable, odoccarga);
            }
            else
            {
                res = "Datos sin procesar";
            }

            DateTime datFin = DateTime.Now;

            return res;
        }

        public static List<DataTable> ReadAsDataTable(System.IO.Stream datos, string fileName)
        {

            InventarioCategoriasController cCategoria = new InventarioCategoriasController();
            List<DataTable> listaTablas = new List<DataTable>();

            IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
            System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
            prov.NumberDecimalSeparator = ".";

            DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
            {
                ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                {
                    UseHeaderRow = true
                }
            });

            foreach (DataTable oTabla in result.Tables)
            {
                if (oTabla.Rows.Count > 0)
                {
                    listaTablas.Add(oTabla);
                }
            }

            excelReader.Close();

            return listaTablas;
        }

        public static string CargarInventarioV3(List<DataTable> ListDataTable, DocumentosCargas odoccarga)
        {
            DateTime datInicioCategoria;
            DateTime datFin;
            DateTime datInicioFila;
            string salida = "";
            bool bPermiteGuardar = true;

            InventarioCategoriasController cCategoria = new InventarioCategoriasController();
            InventarioCategorias oCat;

            CoreInventarioCategoriasAtributosCategoriasController cCategoriasVin = new CoreInventarioCategoriasAtributosCategoriasController();
            cCategoriasVin.SetDataContext(cCategoria.Context);

            CoreAtributosConfiguracionesController cConfAtributo = new CoreAtributosConfiguracionesController();
            cConfAtributo.SetDataContext(cCategoria.Context);
            CoreAtributosConfiguraciones oConfAtributo;

            InventarioElementosAtributosEstadosController cEstados = new InventarioElementosAtributosEstadosController();
            cEstados.SetDataContext(cCategoria.Context);

            EntidadesController cEntidates = new EntidadesController();
            cEntidates.SetDataContext(cCategoria.Context);

            EmplazamientosController cEmplazamientos = new EmplazamientosController();
            cEmplazamientos.SetDataContext(cCategoria.Context);

            InventarioElementosController cElementos = new InventarioElementosController();
            cElementos.SetDataContext(cCategoria.Context);
            List<InventarioElementos> listaElementos;

            InventarioElementosHistoricosController cHistorico = new InventarioElementosHistoricosController();
            cHistorico.SetDataContext(cCategoria.Context);

            InventarioElementosAtributosController cAtributo = new InventarioElementosAtributosController();
            cAtributo.SetDataContext(cCategoria.Context);

            CoreInventarioCategoriasAtributosCategoriasController cCatVin = new CoreInventarioCategoriasAtributosCategoriasController();
            cCatVin.SetDataContext(cCategoria.Context);

            CoreInventarioCategoriasAtributosCategoriasConfiguracionesController cCatConf = new CoreInventarioCategoriasAtributosCategoriasConfiguracionesController();
            cCatConf.SetDataContext(cCategoria.Context);
            CoreInventarioCategoriasAtributosCategoriasConfiguraciones oCatConf;

            CoreInventarioPlantillasAtributosCategoriasController cPlantillas = new CoreInventarioPlantillasAtributosCategoriasController();
            cPlantillas.SetDataContext(cCategoria.Context);
            CoreInventarioPlantillasAtributosCategorias oPlantilla;

            CoreInventarioElementosPlantillasAtributosCategoriasAtributosController cPlantillasCat = new CoreInventarioElementosPlantillasAtributosCategoriasAtributosController();
            cPlantillas.SetDataContext(cCategoria.Context);

            CoreAtributosConfiguracionTiposDatosPropiedadesController cPropiedades = new CoreAtributosConfiguracionTiposDatosPropiedadesController();
            cPropiedades.SetDataContext(cCategoria.Context);

            InventarioPlantillasAtributosJsonController cPlaAtributos = new InventarioPlantillasAtributosJsonController();

            List<object> listaAtributos;
            List<InventarioElementosAtributosJson> listaAtributosPlantillas;
            List<object> listaPlantillas;

            InventarioElementos oElemento = null;
            int iElementosErrores = 0;
            int iElementosCargados = 0;
            int iElementosActualizados = 0;
            int iElementosTratados = 0;
            int iAtributosCargados = 0;
            int iAtributosActualizados = 0;
            int iAtributosErrores = 0;
            int iAtributosTratados = 0;

            try
            {
                long lCliID = (long)odoccarga.ClienteID;

                foreach (DataTable dataTable in ListDataTable)
                {
                    int IndiceFila = 0;
                    string Categoria = dataTable.TableName;

                    oCat = cCategoria.GetInventarioCategoriaIDByNombre(Categoria, lCliID);

                    if (oCat != null)
                    {
                        datInicioCategoria = DateTime.Now;
                        TimeSpan minTiempoFila = new TimeSpan();
                        TimeSpan maxTiempoFila = new TimeSpan();
                        TimeSpan tiempoFila = new TimeSpan();

                        EscritorLogs.EscribeLogs("-------------------------");
                        EscritorLogs.EscribeLogs("INVENTORY ELEMENT: " + Categoria);
                        EscritorLogs.EscribeLogs("START TIME: " + datInicioCategoria.ToString());

                        JsonObject jsonListas = new JsonObject();
                        List<long> listaPlantillasObligatorias, listaAtributosObligatoriosIDs;
                        JsonObject jsonRestricciones = new JsonObject();
                        JsonObject jsonAtributos = new JsonObject();

                        List<Vw_CoreAtributosConfiguracionTiposDatosPropiedades> listaPropiedades;
                        JsonObject jsonListaValores, oJsonAux;
                        List<int> listaColumnasInvalidas = new List<int>();
                        object oAux;

                        #region Cargar de listas

                        List<Emplazamientos> listaCargadaEmplazamientos;
                        List<InventarioElementosAtributosEstados> listaCargadaEstados;
                        List<Entidades> listaCargadaOperadores;

                        List<CoreAtributosConfiguraciones> listaCargadaAtributos;
                        JsonObject listaCargadaPlantillas = new JsonObject();
                        List<CoreInventarioPlantillasAtributosCategorias> listaAuxPlantillas;

                        listaCargadaEmplazamientos = cEmplazamientos.GetActivos(lCliID);
                        listaCargadaEstados = cEstados.GetActivos(lCliID);
                        listaCargadaOperadores = cEntidates.GetAllOperadores(lCliID);

                        listaCargadaAtributos = cCatVin.GetAtributosByInventarioCategoriaID(oCat.InventarioCategoriaID);

                        foreach (var oPlConf in cCatVin.GetSubcategoriaPlantillasValores(oCat.InventarioCategoriaID))
                        {
                            listaCargadaPlantillas.Add(oPlConf.InventarioAtributosCategorias.InventarioAtributoCategoria, cPlantillas.GetPlantillasConf(oPlConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID));
                        }

                        listaElementos = cElementos.GetGridDinamicoInventariov2(oCat.InventarioCategoriaID, 0);

                        listaPlantillasObligatorias = cPlantillasCat.GetListaConfiguracionesIDPlantillasObligatorias(oCat.InventarioCategoriaID);
                        listaAtributosObligatoriosIDs = cCatVin.GetListaConfiguracionesIDAtributosObligatorios(oCat.InventarioCategoriaID);

                        #endregion

                        #region Comprobacion de Atributos

                        for (int r = 5; r < dataTable.Columns.Count; r++)
                        {
                            if (!dataTable.Columns[r].Caption.ToString().Contains("Key:"))
                            {
                                try
                                {
                                    oConfAtributo = (from c in listaCargadaAtributos where c.Codigo == dataTable.Columns[r].Caption.ToString() select c).First();
                                    if (oConfAtributo != null)
                                    {
                                        if (oConfAtributo.TiposDatos.Codigo == "LISTA" || oConfAtributo.TiposDatos.Codigo == "LISTAMULTIPLE")
                                        {
                                            jsonListaValores = new JsonObject();
                                            if (oConfAtributo.TablaModeloDatoID != null)
                                            {
                                                jsonListaValores = cConfAtributo.GetJsonItemsServicio((long)oConfAtributo.CoreAtributoConfiguracionID);
                                            }
                                            else if (oConfAtributo.ValoresPosibles != null && oConfAtributo.ValoresPosibles != "")
                                            {
                                                foreach (var item in oConfAtributo.ValoresPosibles.Split(';').ToList())
                                                {
                                                    if (!jsonListaValores.TryGetValue(item, out oAux))
                                                    {
                                                        oJsonAux = new JsonObject();
                                                        oJsonAux.Add("Text", item);
                                                        oJsonAux.Add("Value", item);
                                                        jsonListaValores.Add(item, oJsonAux);
                                                    }
                                                }
                                            }
                                            jsonListas.Add(oConfAtributo.Codigo, jsonListaValores);
                                        }

                                        jsonAtributos.Add(oConfAtributo.Codigo, oConfAtributo);
                                        listaPropiedades = cPropiedades.GetVwPropiedadesFromAtributo(oConfAtributo.CoreAtributoConfiguracionID);
                                        jsonRestricciones.Add(oConfAtributo.CoreAtributoConfiguracionID.ToString(), listaPropiedades);
                                        listaAtributosObligatoriosIDs.Remove(oConfAtributo.CoreAtributoConfiguracionID);
                                    }
                                    else
                                    {
                                        listaColumnasInvalidas.Add(r);
                                        EscritorLogs.EscribeLogs(Recursos.jsError + " " + dataTable.Columns[r].Caption.ToString() + " invalid field");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    listaColumnasInvalidas.Add(r);
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + dataTable.Columns[r].Caption.ToString() + " invalid field");
                                }
                            }
                            else
                            {
                                oCatConf = cCatConf.GetPlantillaValoresByNombreCategoria(dataTable.Columns[r].Caption.ToString().Replace("Key:", ""), oCat.InventarioCategoriaID);
                                if (oCatConf == null)
                                {
                                    listaColumnasInvalidas.Add(r);
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + dataTable.Columns[r].Caption.ToString() + " invalid template");
                                }
                                else
                                {
                                    //listaPlantillasObligatorias.Remove(oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID);
                                }
                            }
                        }

                        #endregion

                        if (listaAtributosObligatoriosIDs.Count > 0)
                        {
                            bPermiteGuardar = false;
                        }

                        string NombreAtributo, ValorAtributo, CodigoEmplazamiento, NombreElemento, CodigoElemento, EstadoElemento, Entidad;
                        long EmplazamientoID, EstadoElementoID;
                        long? OperadorID;
                        object oAuxPla;

                        foreach (DataRow row in dataTable.Rows)
                        {
                            datInicioFila = DateTime.Now;

                            CodigoEmplazamiento = row[0].ToString();
                            NombreElemento = row[1].ToString();
                            CodigoElemento = row[2].ToString();
                            EstadoElemento = row[3].ToString();
                            Entidad = row[4].ToString();

                            try
                            {
                                oElemento = (from c in listaElementos where c.NumeroInventario == CodigoElemento select c).FirstOrDefault();
                            }
                            catch (Exception)
                            {
                                oElemento = null;
                                if (!bPermiteGuardar)
                                {
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " Could not add " + CodigoElemento + " because mandatory fields are missing ");
                                    iElementosErrores++;
                                    continue;
                                }
                            }

                            #region VALORES ESTATICOS

                            try
                            {
                                EmplazamientoID = (from c in listaCargadaEmplazamientos where c.Codigo == CodigoEmplazamiento select c.EmplazamientoID).First();
                                if (EmplazamientoID == 0 || (oElemento != null && oElemento.EmplazamientoID != EmplazamientoID))
                                {
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsInventarioElemento + " " + CodigoElemento + ", can't change inventory site");
                                    iElementosErrores++;
                                    continue;
                                }
                            }
                            catch (Exception ex)
                            {
                                LogErrorCampoNoCreadoInventario(NombreElemento, Recursos.strCodigoEmplazamiento, "");
                                iElementosErrores++;
                                continue;
                            }

                            if (NombreElemento == "")
                            {
                                LogErrorCampoInventario(NombreElemento, Recursos.strNombre, "");
                                iElementosErrores++;
                                continue;
                            }

                            if (NombreElemento.Length > 100)
                            {
                                LogErrorTamañoExcedido(Recursos.strNombre, NombreElemento, 50);
                                iElementosErrores++;
                                continue;
                            }

                            if (CodigoElemento == "")
                            {
                                LogErrorCampoInventario(CodigoElemento, Recursos.strCodigo, "");
                                iElementosErrores++;
                                continue;
                            }

                            if (CodigoElemento.Length > 100)
                            {
                                LogErrorTamañoExcedido(Recursos.strCodigo, CodigoElemento, 50);
                                iElementosErrores++;
                                continue;
                            }

                            try
                            {
                                EstadoElementoID = (from c in listaCargadaEstados where c.Codigo == EstadoElemento select c.InventarioElementoAtributoEstadoID).First();
                            }
                            catch (Exception)
                            {
                                LogErrorCampoNoCreadoInventario(CodigoElemento, Recursos.strEstado, "");
                                iElementosErrores++;
                                continue;
                            }

                            try
                            {
                                OperadorID = (from c in listaCargadaOperadores where c.Codigo == Entidad select c.OperadorID).First();
                            }
                            catch (Exception)
                            {
                                LogErrorCampoNoCreadoInventario(CodigoElemento, Recursos.strOperador, "");
                                iElementosErrores++;
                                continue;
                            }

                            #endregion

                            listaAtributos = new List<object>();
                            listaAtributosPlantillas = new List<InventarioElementosAtributosJson>();
                            listaPlantillas = new List<object>();
                            for (int i = 5; i < dataTable.Columns.Count; i++)
                            {
                                NombreAtributo = "";
                                ValorAtributo = "";
                                if (!listaColumnasInvalidas.Contains(i))
                                {
                                    NombreAtributo = dataTable.Columns[i].ColumnName;
                                    ValorAtributo = row[i].ToString();

                                    if (NombreAtributo.Contains("Key:"))
                                    {
                                        if (ValorAtributo != "")
                                        {
                                            if (listaCargadaPlantillas.TryGetValue(NombreAtributo.Replace("Key:", ""), out oAuxPla))
                                            {
                                                listaAuxPlantillas = (List<CoreInventarioPlantillasAtributosCategorias>)oAuxPla;
                                                try
                                                {
                                                    oPlantilla = (from c in listaAuxPlantillas where c.Nombre == ValorAtributo select c).First();
                                                    if (oPlantilla != null)
                                                    {
                                                        Object plantilla = new
                                                        {
                                                            PlantillaID = oPlantilla.CoreInventarioPlantillaAtributoCategoriaID,
                                                            InvCatConfID = oPlantilla.CoreInventarioCategoriaAtributoCategoriaConfiguracionID,
                                                            NombrePlantilla = oPlantilla.Nombre
                                                        };
                                                        listaPlantillas.Add(plantilla);
                                                        foreach (var item in cPlaAtributos.Deserializacion(oPlantilla.JsonAtributosDinamicos))
                                                        {
                                                            InventarioElementosAtributosJson Atributo = new InventarioElementosAtributosJson
                                                            {
                                                                AtributoID = item.AtributoID,
                                                                NombreAtributo = item.NombreAtributo,
                                                                Valor = item.Valor,
                                                                TipoDato = item.TipoDato,
                                                                TextLista = item.TextLista
                                                            };

                                                            listaAtributosPlantillas.Add(Atributo);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LogErrorCampoNoCreadoInventario(CodigoElemento, NombreAtributo.Replace("Key:", ""), "");
                                                        iElementosErrores++;
                                                        continue;
                                                    }
                                                }
                                                catch (Exception)
                                                {
                                                    LogErrorCampoNoCreadoInventario(CodigoElemento, NombreAtributo.Replace("Key:", ""), "");
                                                    iElementosErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                LogErrorCampoNoCreadoInventario(CodigoElemento, NombreAtributo.Replace("Key:", ""), "");
                                                iElementosErrores++;
                                                continue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        oConfAtributo = (from c in listaCargadaAtributos where c.Codigo == NombreAtributo select c).First();
                                        if (oConfAtributo.TiposDatos.Codigo == Comun.TIPODATO_CODIGO_FECHA && ValorAtributo != "")
                                        {
                                            bool Correcto;
                                            DateTime dat = ComunServicios.GetFechaExcel(ValorAtributo, out Correcto);
                                            if (Correcto)
                                            {
                                                ValorAtributo = dat.ToString(CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                ValorAtributo = "Error";
                                            }
                                        }
                                        Object Atributo = new
                                        {
                                            AtributoID = oConfAtributo.CoreAtributoConfiguracionID,
                                            NombreAtributo = oConfAtributo.Nombre,
                                            Valor = ValorAtributo,
                                            TipoDato = oConfAtributo.TiposDatos.Codigo,
                                            TextLista = ValorAtributo
                                        };

                                        listaAtributos.Add(Atributo);

                                    }
                                }
                            }

                            Clases.ResponseCreateController cResponse;
                            try
                            {
                                List<string> listaWarning;
                                if (oElemento == null)
                                {
                                    cResponse = cElementos.CreateUpdateInventarioElementos(
                                        NombreElemento,
                                        CodigoElemento,
                                        EstadoElementoID,
                                        oCat.InventarioCategoriaID,
                                        (long)OperadorID,
                                        null,
                                        EmplazamientoID,
                                        odoccarga.UsuarioID,
                                        listaAtributos,
                                        listaPlantillas,
                                        listaAtributosPlantillas,
                                        out listaWarning,
                                        null,
                                        jsonListas,
                                        listaPlantillasObligatorias,
                                        jsonRestricciones,
                                        jsonAtributos
                                        );
                                }
                                else
                                {
                                    cResponse = cElementos.CreateUpdateInventarioElementos(
                                        NombreElemento,
                                        CodigoElemento,
                                        EstadoElementoID,
                                        oCat.InventarioCategoriaID,
                                        (long)OperadorID,
                                        null,
                                        EmplazamientoID,
                                        odoccarga.UsuarioID,
                                        listaAtributos,
                                        listaPlantillas,
                                        listaAtributosPlantillas,
                                        out listaWarning,
                                        oElemento.InventarioElementoID,
                                        jsonListas,
                                        listaPlantillasObligatorias,
                                        jsonRestricciones,
                                        jsonAtributos
                                        );
                                }
                                if (cResponse.infoResponse.Result)
                                {
                                    if (oElemento == null)
                                    {
                                        iElementosCargados++;
                                        listaElementos.Add((InventarioElementos)cResponse.Data);
                                    }
                                    else
                                    {
                                        iElementosActualizados++;
                                    }
                                    if (listaWarning.Count > 0)
                                    {
                                        iAtributosErrores += listaWarning.Count;
                                        foreach (var item in listaWarning)
                                        {
                                            LogInfoCampoInventario(CodigoElemento, item);
                                        }
                                    }
                                }
                                else
                                {
                                    iElementosErrores++;
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strElementosInventario + ": " + CodigoElemento + ". " + cResponse.infoResponse.Description);
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message);
                                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strElementosInventario + " " + Recursos.strCodigoExcepcion100);
                                iElementosErrores++;
                                continue;
                            }

                            IndiceFila++;
                            tiempoFila = DateTime.Now - datInicioFila;
                            log.Info(Recursos.strInventario + " loaded line in " + tiempoFila.TotalMilliseconds.ToString());

                            if (minTiempoFila != TimeSpan.MinValue || tiempoFila < minTiempoFila)
                            {
                                minTiempoFila = tiempoFila;
                            }

                            if (tiempoFila > maxTiempoFila)
                            {
                                maxTiempoFila = tiempoFila;
                            }

                        }

                        cCategoria.Context.SubmitChanges();

                        TimeSpan tiempoTotal = DateTime.Now - datInicioCategoria;
                        var promedio = tiempoTotal.TotalMilliseconds / dataTable.Rows.Count;

                        EscritorLogs.EscribeLogs("COMPLETION TIME: " + DateTime.Now.ToString());
                        EscritorLogs.EscribeLogs("TOTAL TIME SPENT (MINUTES)" + ": " + tiempoTotal.TotalMinutes.ToString());
                        EscritorLogs.EscribeLogs("AVERAGE TIME PER ROW (MILLISECONDS)" + ": " + promedio.ToString());
                        EscritorLogs.EscribeLogs("MIN TIME (MILLISECONDS)" + ": " + minTiempoFila.TotalMilliseconds.ToString());
                        EscritorLogs.EscribeLogs("MAX TIME (MILLISECONDS)" + ": " + maxTiempoFila.TotalMilliseconds.ToString());
                        EscritorLogs.EscribeLogs("-------------------------");

                        GC.Collect();
                    }
                    else
                    {
                        EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strElementosInventario + " The object of the Template file does not exist in the tool");
                        iElementosErrores++;
                    }
                }

                iElementosTratados = iElementosCargados + iElementosActualizados + iElementosErrores;
                iAtributosTratados = iAtributosErrores + iAtributosCargados + iAtributosActualizados;

                EscritorLogs.EscribeLogs("-------------------------");
                EscritorLogs.EscribeLogs("TOTAL ELEMENTS" + ": " + iElementosTratados);
                EscritorLogs.EscribeLogs("ELEMENTS CHARGED" + ": " + iElementosCargados.ToString());
                EscritorLogs.EscribeLogs("ELEMENTS UPDATED" + ": " + iElementosActualizados.ToString());
                EscritorLogs.EscribeLogs("ELEMENTS WITH ERRORS" + ": " + iElementosErrores.ToString());
                EscritorLogs.EscribeLogs("WARNINGS IN ELEMENTS" + ": " + iAtributosErrores);
                EscritorLogs.EscribeLogs("-------------------------");

                //EscritorLogs.EscribeLogs("ATTRIBUTES UPDATED" + ": " + iAtributosActualizados);
            }
            catch (Exception ex)
            {
                string msg = "INVENTORY LOAD" + " Exception Code 100";
                EscritorLogs.EscribeLogs("INVENTORY LOADES" + ": Data Read Error" + ": " + Recursos.strCodigoExcepcion100);
                log.Error(ex.Message);
                salida = "Exception Code 100";
            }

            return salida;

        }

        public static string CargarSubcategorias(List<DataTable> ListDataTable, DocumentosCargas odoccarga)
        {
            string salida = "";
            DateTime datInicio;
            DateTime datInicioCategoria;
            DateTime datInicioFila;

            CoreInventarioCategoriasAtributosCategoriasConfiguracionesController cCategoriasConf = new CoreInventarioCategoriasAtributosCategoriasConfiguracionesController();
            CoreInventarioCategoriasAtributosCategoriasConfiguraciones oCatConf;

            CoreAtributosConfiguracionesController cConfAtributo = new CoreAtributosConfiguracionesController();
            cConfAtributo.SetDataContext(cCategoriasConf.Context);
            CoreAtributosConfiguraciones oConfAtributo;

            CoreInventarioPlantillasAtributosCategoriasController cPlantillas = new CoreInventarioPlantillasAtributosCategoriasController();
            cPlantillas.SetDataContext(cCategoriasConf.Context);
            List<CoreInventarioPlantillasAtributosCategorias> listaPlantillas;


            CoreAtributosConfiguracionTiposDatosPropiedadesController cPropiedades = new CoreAtributosConfiguracionTiposDatosPropiedadesController();
            cPropiedades.SetDataContext(cCategoriasConf.Context);

            List<object> listaAtributos;

            CoreInventarioPlantillasAtributosCategorias oPlantilla = null;
            int iElementosErrores = 0;
            int iElementosCargados = 0;
            int iElementosActualizados = 0;
            int iElementosTratados = 0;
            int iAtributosCargados = 0;
            int iAtributosActualizados = 0;
            int iAtributosErrores = 0;
            int iAtributosTratados = 0;

            try
            {
                long lCliID = (long)odoccarga.ClienteID;

                foreach (DataTable dataTable in ListDataTable)
                {
                    int IndiceFila = 0;
                    string Categoria = dataTable.TableName;

                    oCatConf = cCategoriasConf.GetPlantillaByNombre(Categoria, lCliID);

                    if (oCatConf != null)
                    {
                        datInicioCategoria = DateTime.Now;
                        TimeSpan minTiempoFila = new TimeSpan();
                        TimeSpan maxTiempoFila = new TimeSpan();
                        TimeSpan tiempoFila = new TimeSpan();

                        EscritorLogs.EscribeLogs("-------------------------");
                        EscritorLogs.EscribeLogs("FORM SECTION: " + Categoria);
                        EscritorLogs.EscribeLogs("START TIME: " + datInicioCategoria.ToString());

                        JsonObject jsonListas = new JsonObject();
                        List<long> listaAtributosObligatoriosIDs;
                        JsonObject jsonRestricciones = new JsonObject();
                        JsonObject jsonAtributos = new JsonObject();

                        List<Vw_CoreAtributosConfiguracionTiposDatosPropiedades> listaPropiedades;
                        JsonObject jsonListaValores, oJsonAux;
                        List<int> listaColumnasInvalidas = new List<int>();
                        object oAux;

                        #region Carga de listas

                        listaPlantillas = cPlantillas.GetPlantillasConf(oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID);

                        #endregion

                        #region Comprobacion de Atributos

                        List<CoreAtributosConfiguraciones> listaCargadaAtributos = cCategoriasConf.GetListaAtributos(oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID);

                        listaAtributosObligatoriosIDs = cCategoriasConf.GetListaConfiguracionesIDAtributosObligatorios(oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID);

                        for (int r = 1; r < dataTable.Columns.Count; r++)
                        {
                            oConfAtributo = cConfAtributo.GetAtributoByCodigoyCategoriaConfiguracion(dataTable.Columns[r].Caption.ToString(), oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID);
                            if (oConfAtributo != null)
                            {
                                if (oConfAtributo.TiposDatos.Codigo == "LISTA" || oConfAtributo.TiposDatos.Codigo == "LISTAMULTIPLE")
                                {
                                    jsonListaValores = new JsonObject();
                                    if (oConfAtributo.TablaModeloDatoID != null)
                                    {
                                        jsonListaValores = cConfAtributo.GetJsonItemsServicio((long)oConfAtributo.CoreAtributoConfiguracionID);
                                    }
                                    else if (oConfAtributo.ValoresPosibles != null && oConfAtributo.ValoresPosibles != "")
                                    {
                                        foreach (var item in oConfAtributo.ValoresPosibles.Split(';').ToList())
                                        {
                                            if (!jsonListaValores.TryGetValue(item, out oAux))
                                            {
                                                oJsonAux = new JsonObject();
                                                oJsonAux.Add("Text", item);
                                                oJsonAux.Add("Value", item);
                                                jsonListaValores.Add(item, oJsonAux);
                                            }
                                        }
                                    }
                                    jsonListas.Add(oConfAtributo.Codigo, jsonListaValores);
                                }
                                jsonAtributos.Add(oConfAtributo.Codigo, oConfAtributo);
                                listaPropiedades = cPropiedades.GetVwPropiedadesFromAtributo(oConfAtributo.CoreAtributoConfiguracionID);
                                jsonRestricciones.Add(oConfAtributo.CoreAtributoConfiguracionID.ToString(), listaPropiedades);
                                listaAtributosObligatoriosIDs.Remove(oConfAtributo.CoreAtributoConfiguracionID);
                            }
                            else
                            {
                                listaColumnasInvalidas.Add(r);
                                LogErrorCampoSubcategorias("", dataTable.Columns[r].Caption.ToString(), "");
                            }
                        }

                        #endregion

                        foreach (DataRow row in dataTable.Rows)
                        {
                            datInicioFila = DateTime.Now;

                            string NombreAtributo;
                            string ValorAtributo;
                            string NombrePlantilla = row[0].ToString();

                            oPlantilla = (from c in listaPlantillas where c.Nombre == NombrePlantilla select c).FirstOrDefault();

                            if (oPlantilla == null && listaAtributosObligatoriosIDs.Count > 0)
                            {
                                EscritorLogs.EscribeLogs(Recursos.jsError + " Could not add " + NombrePlantilla + ": Mandatory fields are missing ");
                                iElementosErrores++;
                                continue;
                            }

                            #region VALORES ESTATICOS

                            if (NombrePlantilla == "")
                            {
                                LogErrorCampoSubcategorias(NombrePlantilla, Recursos.strNombre, "");
                                iElementosErrores++;
                                continue;
                            }

                            if (NombrePlantilla.Length > 50)
                            {
                                LogErrorTamañoExcedido(Recursos.strNombre, NombrePlantilla, 50);
                                iElementosErrores++;
                                continue;
                            }

                            #endregion

                            listaAtributos = new List<object>();
                            for (int i = 1; i < dataTable.Columns.Count; i++)
                            {
                                NombreAtributo = "";
                                ValorAtributo = "";
                                if (!listaColumnasInvalidas.Contains(i))
                                {
                                    NombreAtributo = dataTable.Columns[i].ColumnName;
                                    ValorAtributo = row[i].ToString();

                                    oConfAtributo = (from c in listaCargadaAtributos where c.Codigo == NombreAtributo select c).First();
                                    if (oConfAtributo.TiposDatos.Codigo == Comun.TIPODATO_CODIGO_FECHA && ValorAtributo != "")
                                    {
                                        bool Correcto;
                                        DateTime dat = ComunServicios.GetFechaExcel(ValorAtributo, out Correcto);
                                        if (Correcto)
                                        {
                                            ValorAtributo = dat.ToString(CultureInfo.InvariantCulture);
                                        }
                                        else
                                        {
                                            ValorAtributo = "Error";
                                        }
                                    }
                                    Object Atributo = new
                                    {
                                        AtributoID = oConfAtributo.CoreAtributoConfiguracionID,
                                        NombreAtributo = oConfAtributo.Nombre,
                                        Valor = ValorAtributo,
                                        TipoDato = oConfAtributo.TiposDatos.Codigo,
                                        TextLista = ValorAtributo
                                    };

                                    listaAtributos.Add(Atributo);
                                }
                            }

                            Clases.ResponseCreateController cResponse;
                            try
                            {
                                if (oPlantilla == null)
                                {
                                    cResponse = cPlantillas.CreateUpdatePlantillaCategorias(
                                        NombrePlantilla,
                                        NombrePlantilla,
                                        odoccarga.UsuarioID,
                                        listaAtributos,
                                        oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID,
                                        null,
                                        jsonListas
                                        );
                                }
                                else
                                {
                                    cResponse = cPlantillas.CreateUpdatePlantillaCategorias(
                                        NombrePlantilla,
                                        NombrePlantilla,
                                        odoccarga.UsuarioID,
                                        listaAtributos,
                                        oCatConf.CoreInventarioCategoriaAtributoCategoriaConfiguracionID,
                                        oPlantilla.CoreInventarioPlantillaAtributoCategoriaID,
                                        jsonListas
                                        );
                                }
                                if (cResponse.infoResponse.Result)
                                {
                                    if (oPlantilla == null)
                                    {
                                        iElementosCargados++;
                                    }
                                    else
                                    {
                                        iElementosActualizados++;
                                    }
                                    if (oPlantilla == null)
                                    {
                                        listaPlantillas.Add((CoreInventarioPlantillasAtributosCategorias)cResponse.Data);
                                    }
                                }
                                else
                                {
                                    iElementosErrores++;
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " " + NombrePlantilla + " " + cResponse.infoResponse.Description);
                                }
                            }
                            catch (Exception ex)
                            {
                                log.Error(ex.Message);
                                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " " + Recursos.strCodigoExcepcion100);
                                iElementosErrores++;
                                continue;
                            }

                            IndiceFila++;

                            tiempoFila = DateTime.Now - datInicioFila;
                            log.Info(Recursos.strInventario + " loaded line in " + tiempoFila.TotalMilliseconds.ToString());

                            if (minTiempoFila != TimeSpan.MinValue || tiempoFila < minTiempoFila)
                            {
                                minTiempoFila = tiempoFila;
                            }

                            if (tiempoFila > maxTiempoFila)
                            {
                                maxTiempoFila = tiempoFila;
                            }
                        }

                        cPlantillas.Context.SubmitChanges();

                        TimeSpan tiempoTotal = DateTime.Now - datInicioCategoria;
                        var promedio = tiempoTotal.TotalMilliseconds / dataTable.Rows.Count;

                        EscritorLogs.EscribeLogs("COMPLETION TIME: " + DateTime.Now.ToString());
                        EscritorLogs.EscribeLogs("TOTAL TIME SPENT (MINUTES)" + ": " + tiempoTotal.TotalMinutes.ToString());
                        EscritorLogs.EscribeLogs("AVERAGE TIME PER ROW (MILLISECONDS)" + ": " + promedio.ToString());
                        EscritorLogs.EscribeLogs("MIN TIME (MILLISECONDS)" + ": " + minTiempoFila.TotalMilliseconds.ToString());
                        EscritorLogs.EscribeLogs("MAX TIME (MILLISECONDS)" + ": " + maxTiempoFila.TotalMilliseconds.ToString());
                        EscritorLogs.EscribeLogs("-------------------------");

                        GC.Collect();
                    }
                    else
                    {
                        EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " The object of the Template file does not exist in the tool");
                        iElementosErrores++;
                    }
                }

                iElementosTratados = iElementosCargados + iElementosActualizados + iElementosErrores;
                iAtributosTratados = iAtributosErrores + iAtributosCargados + iAtributosActualizados;

                EscritorLogs.EscribeLogs("-------------------------");
                EscritorLogs.EscribeLogs("TOTAL TEMPLATES" + ": " + iElementosTratados);
                EscritorLogs.EscribeLogs("TEMPLATES CHARGED" + ": " + iElementosCargados.ToString());
                EscritorLogs.EscribeLogs("TEMPLATES UPDATED" + ": " + iElementosActualizados.ToString());
                EscritorLogs.EscribeLogs("TEMPLATES WITH ERRORS" + ": " + iElementosErrores.ToString());
                EscritorLogs.EscribeLogs("-------------------------");
            }
            catch (Exception ex)
            {
                EscritorLogs.EscribeLogs("FORM SECTIONS IMPORT: Data Read Error" + ": " + Recursos.strCodigoExcepcion100);
                log.Error(ex.Message);
                salida = "Exception Code 100";
            }

            return salida;

        }

        private static InventarioCategoriasVinculaciones GetVinculacionDefecto(long CategoriaID, long? CategoriaPadreID, long? lEmplazamientoTipoID, List<InventarioCategoriasVinculaciones> listaCargada)
        {
            List<InventarioCategoriasVinculaciones> listaDatos;
            InventarioCategoriasVinculaciones oDato;
            try
            {
                listaDatos = (from c in listaCargada
                              where
                                    !(c.EmplazamientoTipoID.HasValue) &&
                                    c.Activo &&
                                    ((CategoriaPadreID != null) ? c.InventarioCategoriaPadreID == CategoriaPadreID : !(c.InventarioCategoriaPadreID.HasValue)) &&
                                    c.InventarioCategoriaID == CategoriaID
                              select c).ToList();
                if (listaDatos.Count == 0)
                {
                    listaDatos = (from c in listaCargada
                                  where
                                        c.EmplazamientoTipoID == lEmplazamientoTipoID &&
                                        c.Activo &&
                                        ((CategoriaPadreID != null) ? c.InventarioCategoriaPadreID == CategoriaPadreID : !(c.InventarioCategoriaPadreID.HasValue)) &&
                                        c.InventarioCategoriaID == CategoriaID
                                  select c).ToList();
                    if (listaDatos.Count == 0)
                    {
                        oDato = null;
                    }
                    else
                    {
                        oDato = listaDatos.First();
                    }
                }
                else
                {
                    oDato = listaDatos.First();
                }

            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                oDato = null;
            }
            return oDato;
        }

        public static string CargarPlantillaElementosVinculaciones(System.IO.Stream datos, DocumentosCargas odoccarga)
        {
            DateTime datInicioCategoria;
            DateTime datFin;
            DateTime datInicioFila;

            string sSalida = "";


            long cliID = 0;

            int maximo = 0;
            //string tipocarga = "PLANTILLA V23";
            DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
            DocumentosCargas odocumentocarga = new DocumentosCargas();
            try
            {
                // Reads the information from the excel file

                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });




                // Reads client information
                if (odoccarga.ClienteID != null /*&& odoccarga.OperadorID != null*/)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    // Stores the information
                    int iInitialTab = 0;

                    int numTabs = result.Tables.Count;
                    int k = 3;
                    //numTabs = 5;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;
                    int iWarning = 0;



                    if (odoccarga.TabInicial != null)
                    {
                        iInitialTab = (int)odoccarga.TabInicial;
                    }

                    if (odoccarga.TabFinal != null)
                    {
                        numTabs = (int)odoccarga.TabFinal;
                    }

                    maximo = result.Tables[0].Rows.Count;
                    iActualizados = 0;
                    iCargados = 0;
                    iErrores = 0;
                    iWarning = 0;

                    datInicioCategoria = DateTime.Now;
                    TimeSpan minTiempoFila = new TimeSpan();
                    TimeSpan maxTiempoFila = new TimeSpan();
                    TimeSpan tiempoFila = new TimeSpan();

                    EscritorLogs.EscribeLogs("-------------------------");
                    EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strVinculacion);
                    EscritorLogs.EscribeLogs("START TIME: " + datInicioCategoria.ToString());

                    InventarioElementosController cElementos = new InventarioElementosController();
                    InventarioElementosVinculacionesController cVinculaciones = new InventarioElementosVinculacionesController();
                    cVinculaciones.SetDataContext(cElementos.Context);
                    EmplazamientosController cEmplazamientos = new EmplazamientosController();
                    cEmplazamientos.SetDataContext(cElementos.Context);
                    InventarioCategoriasVinculacionesController cVinculacionesCategorias = new InventarioCategoriasVinculacionesController();
                    cVinculacionesCategorias.SetDataContext(cElementos.Context);

                    List<Vw_CoreElementosVinculacionesReducida> listaElementos = cElementos.GetVinculaciones(cliID);
                    List<InventarioElementosVinculaciones> listaVinculacionesElementos = cVinculaciones.GetActivos(cliID);
                    List<InventarioCategoriasVinculaciones> listaVinculacionesCategorias = cVinculacionesCategorias.GetActivos(cliID);

                    Clases.ResponseCreateController cResponse;

                    foreach (DataRow row in result.Tables[0].Rows)
                    {
                        datInicioFila = DateTime.Now;
                        string sCodElemento = row[0].ToString();
                        string sCodElementoPadre = row[1].ToString();

                        Vw_CoreElementosVinculacionesReducida oElemento = null;
                        Vw_CoreElementosVinculacionesReducida oElementoPadre = null;

                        InventarioElementosVinculaciones oVinculacion = null;

                        InventarioCategoriasVinculaciones oVinculacionesCategorias = null;

                        Emplazamientos oEmplazamiento = null;


                        if (sCodElemento != "")
                        {
                            oElemento = (from c in listaElementos where c.NumeroInventario == sCodElemento select c).FirstOrDefault();
                            if (oElemento == null)
                            {
                                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strVinculacion + ", " + Recursos.strCodigoElemento + " " + sCodElemento + " " + Recursos.LogErrorCampoNoCreado);
                                iErrores++;
                                continue;
                            }

                            if (sCodElementoPadre != "")
                            {
                                oElementoPadre = (from c in listaElementos where c.NumeroInventario == sCodElementoPadre select c).FirstOrDefault();
                                if (oElementoPadre == null)
                                {
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strVinculacion + ", " + Recursos.strCodigoElementoPadre + " " + sCodElementoPadre + " " + Recursos.LogErrorCampoNoCreado);
                                    iErrores++;
                                    continue;
                                }
                            }
                            if (cVinculaciones.GetVinculacionFromElementos(oElemento.InventarioElementoID, ((oElementoPadre == null) ? null : (long?)oElementoPadre.InventarioElementoID), listaVinculacionesElementos) != null)
                            {
                                iActualizados++;
                            }
                            else
                            {
                                cResponse = cVinculaciones.SaveUpdateVinculacion(oElementoPadre, oElemento, listaElementos, listaVinculacionesElementos, listaVinculacionesCategorias);
                                if (cResponse.infoResponse.Result)
                                {
                                    iCargados++;
                                    if (oElemento != null)
                                    {
                                        listaVinculacionesElementos.Add((InventarioElementosVinculaciones)cResponse.Data);
                                    }
                                }
                                else
                                {
                                    iErrores++;
                                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strVinculacion + ": " + sCodElemento + ". " + cResponse.infoResponse.Description);
                                }
                            }
                        }
                        else
                        {
                            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strVinculacion + ", " + Recursos.strCodigoElemento + " " + sCodElemento + " " + Recursos.strCodigoElementoPadre + " " + sCodElementoPadre + " " + Recursos.strCodigoExcepcion100);
                            iErrores++;
                            continue;
                        }
                        GC.Collect();

                        tiempoFila = DateTime.Now - datInicioFila;
                        log.Info(Recursos.strVinculacion + " loaded line in " + tiempoFila.TotalMilliseconds.ToString());

                        if (minTiempoFila != TimeSpan.MinValue || tiempoFila < minTiempoFila)
                        {
                            minTiempoFila = tiempoFila;
                        }

                        if (tiempoFila > maxTiempoFila)
                        {
                            maxTiempoFila = tiempoFila;
                        }
                    }

                    cVinculaciones.Context.SubmitChanges();

                    TimeSpan tiempoTotal = DateTime.Now - datInicioCategoria;
                    var promedio = tiempoTotal.TotalMilliseconds / result.Tables[0].Rows.Count;

                    EscritorLogs.EscribeLogs("-------------------------");
                    EscritorLogs.EscribeLogs("COMPLETION TIME: " + DateTime.Now.ToString());
                    EscritorLogs.EscribeLogs("TOTAL TIME SPENT (MINUTES)" + ": " + tiempoTotal.TotalMinutes.ToString());
                    EscritorLogs.EscribeLogs("AVERAGE TIME PER ROW (MILLISECONDS)" + ": " + promedio.ToString());
                    EscritorLogs.EscribeLogs("MIN TIME (MILLISECONDS)" + ": " + minTiempoFila.TotalMilliseconds.ToString());
                    EscritorLogs.EscribeLogs("MAX TIME (MILLISECONDS)" + ": " + maxTiempoFila.TotalMilliseconds.ToString());

                    EscritorLogs.EscribeLogs("-------------------------");
                    EscritorLogs.EscribeLogs("TOTAL RELATIONSHIPS" + ": " + maximo);
                    EscritorLogs.EscribeLogs("RELATIONSHIPS CHARGED" + ": " + iCargados.ToString());
                    EscritorLogs.EscribeLogs("RELATIONSHIPS UPDATED" + ": " + iActualizados.ToString());
                    EscritorLogs.EscribeLogs("RELATIONSHIPS ERROR" + ": " + iErrores.ToString());
                    //EscritorLogs.EscribeLogs("RELATIONSHIPS WARNING" + ": " + iWarning.ToString());
                    EscritorLogs.EscribeLogs("END RELATIONSHIPS");
                    EscritorLogs.EscribeLogs("-------------------------");

                }
                else
                {
                    EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strVinculacion + " " + Recursos.strCodigoExcepcion100);
                    sSalida = "ERROR";
                }


            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strVinculacion + " " + Recursos.strCodigoExcepcion100);
                sSalida = "ERROR";
            }

            return sSalida;
            // Returns the result

        }

        #endregion

        #region LOGS

        public static void LogErrorTamañoExcedido(string Campo, string Valor, long tamano)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Campo + " '" + Valor + "' exceeds maximum length: " + tamano);
        }

        #region CargarPaisRegionProvinciaMunicipio

        public static void LogErrorComunPaisRegionProvinciaMunicipio()
        {
            EscritorLogs.EscribeLogs(Recursos.strImportar + " " + Recursos.strDistribucionRegional + " " + Recursos.strCodigoExcepcion100);
        }
        public static void LogErrorCampoPaisRegionProvinciaMunicipio(string sCodigo, string strTipo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + strTipo + " " + sCodigo + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + strTipo + " " + sCodigo + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoPaisRegionProvinciaMunicipio(string sCodigo, string strTipo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + strTipo + " " + sCodigo + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + strTipo + " " + sCodigo + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoPaisRegionProvinciaMunicipio(string sCodigo, string strTipo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + strTipo + " " + sCodigo + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoPaisRegionProvinciaMunicipio(string sCodigo, string strTipo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + strTipo + " " + sCodigo + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region DOCUMENTOS

        public static void LogErrorCampoDocumentos(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strDocumento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strDocumento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoDocumentos(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strDocumento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strDocumento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoDocumentos(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strDocumento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoDocumentos(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strDocumento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region PROPIETARIOS

        public static void LogErrorCampoPropietarios(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoPropietarios(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoPropietarios(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoPropietarios(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region PROVEEDORES

        public static void LogErrorCampoProveedores(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoProveedores(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoProveedores(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoProveedores(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strCIF + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region SITES

        public static void LogErrorCampoSites(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoSites(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoSites(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoSites(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strEmplazamiento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region INVENTARIO

        public static void LogErrorCampoInventario(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsInventarioElemento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.jsInventarioElemento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoInventario(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsInventarioElemento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.jsInventarioElemento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoInventario(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.jsInventarioElemento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoInventario(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.jsInventarioElemento + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region SUBCATEGORIAS

        public static void LogErrorCampoSubcategorias(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoSubcategorias(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.jsFormSectionPlantillas + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoSubcategorias(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.jsFormSectionPlantillas + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoSubcategorias(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.jsFormSectionPlantillas + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region CONTACTOS

        public static void LogErrorCampoContactos(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strContactos + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoContactos(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strContactos + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoContactos(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strContactos + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoContactos(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strContactos + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region ENTIDADES

        public static void LogErrorCampoEntidades(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEntidad + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strEntidad + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoEntidades(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEntidad + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strEntidad + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoEntidades(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strEntidad + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoEntidades(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strEntidad + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }
        public static void LogErrorContactoEmplazamiento(string sCodEmplazamiento, string sEmail, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEmplazamiento + ", " + Recursos.strCodigoExcepcion100);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEmplazamiento + ", " + Recursos.strCodigoExcepcion100 + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorContactoEmplazamientoNoExisten(string sCodEmplazamiento, string sEmail, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEmplazamiento + ", Sites or Contact " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEmplazamiento + ", Sites or Contact " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorContactoEntidades(string sCodEmplazamiento, string sEmail, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEntidades + ", " + Recursos.strCodigoExcepcion100);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEntidades + ", " + Recursos.strCodigoExcepcion100 + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorContactoEntidadesNoExisten(string sCodEmplazamiento, string sEmail, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEntidades + ", Contact or Entity " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strContactos + " " + Recursos.strEntidades + ", Contact or Entity " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }

        #endregion

        #region OPERADORES

        public static void LogErrorCampoOperadores(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strOperadores + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strOperadores + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoOperadores(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strOperadores + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strOperadores + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoOperadores(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strOperadores + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoOperadores(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strOperadores + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region EMPRESAS PROVEEDORAS

        public static void LogErrorCampoEmpresasProveedoras(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmpresasProveedoras + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strEmpresasProveedoras + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoEmpresasProveedoras(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strEmpresasProveedoras + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strEmpresasProveedoras + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoEmpresasProveedoras(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strEmpresasProveedoras + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoEmpresasProveedoras(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strEmpresasProveedoras + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #region USERS

        public static void LogErrorCampoUsuarios(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuarios + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strUsuarios + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion + " ex: " + ExceptionMessage);
            }
        }
        public static void LogErrorCampoNoCreadoUsuarios(string sCodigo, string sCampo, string ExceptionMessage)
        {
            EscritorLogs.EscribeLogs(Recursos.jsError + " " + Recursos.strUsuarios + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
            if (ExceptionMessage != "")
            {
                log.Error(Recursos.jsError + " " + Recursos.strUsuarios + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado + " ex: " + ExceptionMessage);
            }
        }
        public static void LogInfoCampoUsuarios(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strUsuarios + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoImportacion);
        }
        public static void LogInfoCampoNoCreadoUsuarios(string sCodigo, string sCampo)
        {
            EscritorLogs.EscribeLogs(Recursos.jsWarn + " " + Recursos.strUsuarios + " " + sCodigo + ", " + Recursos.strCampo + " " + sCampo + " " + Recursos.LogErrorCampoNoCreado);
        }

        #endregion

        #endregion

        public static DateTime GetFechaExcel(string sDate)
        {
            DateTime oDate = new DateTime();
            if (sDate.Length == 8)
            {
                oDate = new DateTime(int.Parse(sDate.Substring(0, 4)), int.Parse(sDate.Substring(4, 2)), int.Parse(sDate.Substring(6, 2)));
            }
            else
            {
                oDate = new DateTime();
            }
            return oDate;
        }

        public static double ConvertPuntosEnComasFloat(string mensaje)
        {
            string mensajeComas = "";
            double resultado = 0;

            if (mensaje == "")
            {
                resultado = 0;
            }

            else
            {
                mensajeComas = mensaje.Replace(".", ",");
                resultado = Convert.ToDouble(String.Format("{0:0.00}", mensajeComas));
            }

            return resultado;
        }

        #region Versiones Anteriores

        /*public static string CargarPlantillaV23(System.IO.Stream datos, DocumentosCargas odoccarga)
        {


            string sSalida = "";
            string sCodigo = null;
            string sNumContrato = null;
            string sOperador = null;
            long cliID = 0;
            int cont = 0;
            int maximo = 0;
            //string tipocarga = "PLANTILLA V23";
            DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
            DocumentosCargas odocumentocarga = new DocumentosCargas();
            try
            {
                // Reads the information from the excel file

                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });




                // Reads client information
                if (odoccarga.ClienteID != null && odoccarga.OperadorID != null && odoccarga.TabInicial != null && odoccarga.TabFinal != null)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    // Stores the information
                    int iInitialTab = 0;

                    int numTabs = result.Tables.Count;
                    int k = 3;
                    //numTabs = 5;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;
                    int iWarning = 0;
                    int iTratados = 0;
                    bool bActualizar = false;
                    bool bActualizarEmplazamiento = false;
                    bool bActualizarEmplazamientoCamposAdicionales = false;
                    bool bActualizarConceptos = false;

                    if (odoccarga.TabInicial != null)
                    {
                        iInitialTab = (int)odoccarga.TabInicial;
                    }

                    if (odoccarga.TabFinal != null)
                    {
                        numTabs = (int)odoccarga.TabFinal;
                    }




                    // Checks all the tabs
                    for (k = iInitialTab; k < numTabs; k = k + 1)
                    {
                        switch (k)
                        {
                            #region PROPIETARIOS
                            case 0:

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ": " + "start Owner" + System.Environment.NewLine);
                                foreach (DataRow row in result.Tables[0].Rows)
                                {


                                    string sIdentificador = row[0].ToString();
                                    string sRazonSocial = row[3].ToString();
                                    string sEmail = row[6].ToString();

                                    Propietarios propietario = null;
                                    PropietariosController cPropietario = new PropietariosController();
                                    propietario = cPropietario.GetPropietarioByDNI(sIdentificador);

                                    if (propietario != null)
                                    {
                                        #region ACTUALIZAR PROPIETARIO

                                        // Codigo SAP                                            
                                        propietario.CodigoSAP = row[1].ToString();

                                        //Tipo Propietario
                                        if (row[2].ToString() != "")
                                        {
                                            AlquileresTiposPropietariosController cTiposPropietarios = new AlquileresTiposPropietariosController();
                                            long tipopropietarioID = cTiposPropietarios.GetTipoByNombreAll(row[2].ToString());

                                            if (tipopropietarioID > 0)
                                            {
                                                propietario.TipoPropietarioID = tipopropietarioID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": " + " ID/VAT " + ": " + sIdentificador + "---" + "Type Owner:" + row[2].ToString() + " " + Comun.NO_EXISTE_TREE + " " + " " + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);

                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        // razón social
                                        if (sRazonSocial != "")
                                        {
                                            propietario.Nombre = sRazonSocial;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": " + " ID/VAT " + ": " + sIdentificador + "---" + "Name " + ":" + " " + Comun.FORMATO_INCORRETO + " " + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Apellidos
                                        if (row[4].ToString() != "" && row[4].ToString() != null)
                                        {
                                            propietario.Apellidos = row[4].ToString();
                                        }
                                        else
                                        {
                                            propietario.Apellidos = "";
                                        }

                                        //Alias
                                        propietario.Alias = row[5].ToString();

                                        // Email
                                        if (sEmail != "")
                                        {

                                            if (sEmail.Contains("@"))
                                            {
                                                propietario.Email = sEmail;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Email " + ":" + " " + Comun.FORMATO_INCORRETO + " " + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);

                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Email " + ":" + " " + Comun.FORMATO_INCORRETO + " " + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);

                                            iErrores++;
                                            continue;
                                        }


                                        // Telefono
                                        propietario.Telefono = row[7].ToString();

                                        // Telefono 2
                                        propietario.Telefono2 = row[8].ToString();

                                        // Telefono movil
                                        propietario.Movil = row[9].ToString();



                                        // Pais
                                        if (row[10].ToString() != "")
                                        {
                                            PaisesController cPaises = new PaisesController();
                                            long paisID = cPaises.GetPaisByNombre(row[10].ToString());
                                            if (paisID > 0)
                                            {
                                                propietario.PaisID = paisID;

                                                // Region
                                                if (row[11].ToString() != "")
                                                {
                                                    RegionesPaisesController cRegiones = new RegionesPaisesController();
                                                    long propietarioRegionID = cRegiones.GetRegionIDByNombre(row[11].ToString(), paisID);
                                                    if (propietarioRegionID > 0)
                                                    {
                                                        propietario.RegionID = propietarioRegionID;

                                                        // Provincia
                                                        if (row[12].ToString() != "")
                                                        {
                                                            ProvinciasController cProvincias = new ProvinciasController();
                                                            long provinciaID = cProvincias.GetProvinciaIDByNombre(row[12].ToString(), propietarioRegionID);
                                                            if (provinciaID > 0)
                                                            {
                                                                propietario.ProvinciaID = provinciaID;

                                                                // Municipio
                                                                if (row[13].ToString() != "")
                                                                {
                                                                    MunicipiosController cMunicipios = new MunicipiosController();
                                                                    long municipioID = cMunicipios.GetMunicipioIDByNombre(row[13].ToString(), provinciaID);
                                                                    if (municipioID > 0)
                                                                    {
                                                                        propietario.MunicipioID = municipioID;
                                                                    }
                                                                    else
                                                                    {
                                                                        //Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Municipality" + ":" + row[13].ToString() + " does not exist in tree in said province" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        ////Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---El MUNICIPIO '" + row[13].ToString() + "' no existe en TREE para dicha provincia:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        iWarning++;
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                ////Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---La PROVINCIA '" + row[12].ToString() + "' no existe en TREE para dicha region pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The province" + ":" + row[12].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                iWarning++;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ////Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---La REGION PAIS '" + row[11].ToString() + "' no existe en TREE para dicho pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        //Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The region country " + ":" + row[11].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El País '" + row[10].ToString() + "' no existe en TREE:" + " " +" " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The Countrgy" + ":" + row[10].ToString() + " " + Comun.NO_EXISTE_TREE + " " + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }

                                        // Direccion
                                        propietario.Direccion = row[14].ToString();

                                        // Codigo postal
                                        propietario.CodigoPostal = row[15].ToString();

                                        // Observaciones
                                        propietario.Observaciones = row[16].ToString();

                                        // Se pone activo
                                        propietario.Activo = true;

                                        cPropietario.UpdateItem(propietario);
                                        iActualizados++;

                                        #endregion

                                    }
                                    else
                                    {
                                        #region CREAR PROPIETARIO

                                        propietario = new Propietarios();

                                        // Clientes
                                        propietario.ClienteID = cliID;

                                        // ID Propietario-DNI
                                        if (sIdentificador != "")
                                        {

                                            propietario.DNIPropietario = sIdentificador;
                                        }
                                        else
                                        {
                                            ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": El ID PROPIETARIO no puede ser vacio, es un campo obligatorio:" + " " +" " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":  " + "The Owner connont by empty, it is a required field  " + ":" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                        // ID Propietario SAP-Codigo SAP                                            
                                        propietario.CodigoSAP = row[1].ToString();

                                        //Tipo Propietario
                                        if (row[2].ToString() != "")
                                        {
                                            AlquileresTiposPropietariosController cTiposPropietarios = new AlquileresTiposPropietariosController();
                                            long tipopropietarioID = cTiposPropietarios.GetTipoByNombreAll(row[2].ToString());

                                            if (tipopropietarioID > 0)
                                            {
                                                propietario.TipoPropietarioID = tipopropietarioID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": " + " ID/VAT " + ": " + sIdentificador + "---" + "Type owner" + row[2].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El TIPO PROPIETARIO '" + row[2].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }

                                        // Razon Social/Nombre

                                        if (sRazonSocial != "")
                                        {
                                            propietario.Nombre = sRazonSocial;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": " + " ID/VAT " + ": " + sIdentificador + "---" + "The name connont by empty,it is a required field" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El NOMBRE no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        // Apellidos
                                        if (row[4].ToString() != "" && row[4].ToString() != null)
                                        {
                                            propietario.Apellidos = row[4].ToString();
                                        }
                                        else
                                        {
                                            propietario.Apellidos = "";
                                        }



                                        //Alias
                                        propietario.Alias = row[5].ToString();

                                        // Email
                                        if (sEmail != "")
                                        {

                                            if (sEmail.Contains("@"))
                                            {
                                                propietario.Email = row[6].ToString();
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Email" + ":" + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El EMAIL no tiene el formato correcto, no contiene ninguna @:" + " " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Email" + ":" + " " + Comun.NO_EXISTE_TREE + ":" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El EMAIL no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        // Telefono
                                        propietario.Telefono = row[7].ToString();

                                        // Telefono 2
                                        propietario.Telefono2 = row[8].ToString();

                                        // Telefono movil
                                        propietario.Movil = row[9].ToString();

                                        // Pais
                                        if (row[10].ToString() != "")
                                        {
                                            PaisesController cPaises = new PaisesController();
                                            long paisID = cPaises.GetPaisByNombre(row[10].ToString());
                                            if (paisID > 0)
                                            {
                                                propietario.PaisID = paisID;

                                                // Region
                                                if (row[11].ToString() != "")
                                                {
                                                    RegionesPaisesController cRegiones = new RegionesPaisesController();
                                                    long propietarioRegionID = cRegiones.GetRegionIDByNombre(row[11].ToString(), paisID);
                                                    if (propietarioRegionID > 0)
                                                    {
                                                        propietario.RegionID = propietarioRegionID;

                                                        // Provincia
                                                        if (row[12].ToString() != "")
                                                        {
                                                            ProvinciasController cProvincias = new ProvinciasController();
                                                            long provinciaID = cProvincias.GetProvinciaIDByNombre(row[12].ToString(), propietarioRegionID);
                                                            if (provinciaID > 0)
                                                            {
                                                                propietario.ProvinciaID = provinciaID;

                                                                // Municipio
                                                                if (row[13].ToString() != "")
                                                                {
                                                                    MunicipiosController cMunicipios = new MunicipiosController();
                                                                    long municipioID = cMunicipios.GetMunicipioIDByNombre(row[13].ToString(), provinciaID);
                                                                    if (municipioID > 0)
                                                                    {
                                                                        propietario.MunicipioID = municipioID;
                                                                    }
                                                                    else
                                                                    {
                                                                        //Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Municipality" + ":" + row[13].ToString() + " does not exist in tree in said province" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        ////Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---El MUNICIPIO '" + row[13].ToString() + "' no existe en TREE para dicha provincia:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        iWarning++;
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The province" + ":" + row[12].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                ////Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---La PROVINCIA '" + row[12].ToString() + "' no existe en TREE para dicha region pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                iWarning++;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        //Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The region country " + ":" + row[11].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        ////Comun.cLogV23Propietarios.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---La REGION PAIS '" + row[11].ToString() + "' no existe en TREE para dicho pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The Countrgy" + ":" + row[10].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                ////Comun.cLogV23Propietarios.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El País '" + row[10].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }


                                        // Direccion
                                        propietario.Direccion = row[14].ToString();

                                        // Codigo postal
                                        propietario.CodigoPostal = row[15].ToString();

                                        // Observaciones
                                        propietario.Observaciones = row[16].ToString();

                                        // Se pone activo
                                        propietario.Activo = true;

                                        //Agregamos
                                        cPropietario.AddItem(propietario);
                                        iCargados++;


                                        #endregion
                                    }

                                    GC.Collect();
                                }
                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ":" + "TOTAL OWNERS" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ":" + "OWNERS CHARGED" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ":" + "OWNERS UPDATED" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ":" + "OWNERS ERROR" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ":" + "OWNER WARNING" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Propietarios.EscribirLog(Comun.INFO + ":" + "END OWNERS" + ": " + System.Environment.NewLine);

                                break;
                            #endregion

                            #region PROVEEDORES
                            case 1:

                                maximo = result.Tables[1].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;

                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": INICIO PROVEEDORES" + System.Environment.NewLine);
                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "Start Providers" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[1].Rows)
                                {

                                    cont = cont + 1;
                                    string sIdentificador = row[0].ToString();
                                    string sRazonSocial = row[1].ToString();
                                    string sDireccion = row[2].ToString();
                                    string sCodigoSAP = row[28].ToString();


                                    // Proveedores
                                    Proveedores proveedor = null;
                                    ProveedoresController cProveedores = new ProveedoresController();



                                    // Gets the renting contract
                                    if (sIdentificador != "" && sCodigoSAP != "")
                                    {
                                        proveedor = cProveedores.GetProveedorByCIFSAP(sIdentificador, sCodigoSAP);


                                        if (proveedor != null)
                                        {
                                            #region UPDATES PROVIDER

                                            // Razon Social/Nombre
                                            if (sRazonSocial != "")
                                            {
                                                proveedor.FacturacionRazonSocial = sRazonSocial;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + sIdentificador + "---" + "Name " + ":" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El NOMBRE no puede ser vacio, es un campo obligatorio:" + " " +" " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // Direccion
                                            if (sDireccion != "")
                                            {
                                                proveedor.FacturacionDireccion = sDireccion;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + sIdentificador + "---" + "Address" + ":" + " " + Comun.FORMATO_INCORRETO + " " + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---La DIRECCION no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // Codigo Postal
                                            proveedor.FacturacionCP = row[3].ToString();

                                            // Pais
                                            if (row[4].ToString() != "")
                                            {
                                                PaisesController cPais = new PaisesController();
                                                long paisID = cPais.GetPaisByNombre(row[4].ToString());
                                                if (paisID > 0)
                                                {
                                                    proveedor.PaisID = paisID;

                                                    // Region
                                                    if (row[5].ToString() != "")
                                                    {
                                                        RegionesPaisesController cRegion = new RegionesPaisesController();
                                                        RegionesPaises region = cRegion.GetRegionCompletaByNombre(row[5].ToString(), proveedor.PaisID);
                                                        if (region != null)
                                                        {
                                                            proveedor.Region = row[5].ToString();

                                                            // Provincia
                                                            if (row[6].ToString() != "")
                                                            {
                                                                ProvinciasController cProvincias = new ProvinciasController();
                                                                Provincias provincia = cProvincias.GetProvinciaByNombre(row[6].ToString(), region.RegionPaisID);
                                                                if (provincia != null)
                                                                {
                                                                    proveedor.FacturacionProvicia = row[6].ToString();

                                                                    // Municipio
                                                                    if (row[7].ToString() != "")
                                                                    {
                                                                        MunicipiosController cMunicipios = new MunicipiosController();
                                                                        long municipioID = cMunicipios.GetMunicipioIDByNombre(row[7].ToString(), provincia.ProvinciaID);
                                                                        if (municipioID > 0)
                                                                        {
                                                                            proveedor.FacturacionMunicipio = row[7].ToString();
                                                                        }
                                                                        else
                                                                        {

                                                                            //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Municipality" + ":" + row[7].ToString() + " does not exist in tree in said province" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                            ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El MUNICIPIO '" + row[7].ToString() + "' no existe en TREE para dicha provincia:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                            iWarning++;
                                                                            //proveedor.FacturacionMunicipio = " ";
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //proveedor.FacturacionMunicipio = " ";
                                                                    }


                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The province" + ":" + row[6].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La PROVINCIA '" + row[6].ToString() + "' no existe en TREE para dicha region pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                    iWarning++;
                                                                    //proveedor.FacturacionProvicia = " ";
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //proveedor.FacturacionProvicia = " ";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The region country " + ":" + row[5].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                            ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La REGION PAIS '" + row[5].ToString() + "' no existe en TREE para dicho pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                            iWarning++;
                                                        }
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The Country" + ":" + row[4].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El País '" + row[4].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The Country" + ":" + row[4].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El País '" + row[4].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // LITERAL FORMA PAGO
                                            if (row[8].ToString() != "")
                                            {
                                                MetodosPagosController cMetodo = new MetodosPagosController();
                                                long metodoID = cMetodo.GetMetodoByCodigoAll(row[8].ToString());
                                                if (metodoID > 0)
                                                {
                                                    proveedor.MetodoPagoID = metodoID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Payment Method" + ":" + row[8].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La FORMA PAGO '" + row[8].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // TIPO CONTRIBUYENTE
                                            if (row[9].ToString() != "")
                                            {
                                                TiposContribuyentesController cContribuyente = new TiposContribuyentesController();
                                                long contriID = cContribuyente.GetTiposContribuyentes(row[9].ToString());
                                                if (contriID > 0)
                                                {
                                                    proveedor.TipoContribuyenteID = contriID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Taxpayer Type" + ":" + row[9].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El TIPO CONTRIBUYENTE '" + row[9].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Taxpayer Type" + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El TIPO CONTRIBUYENTE es obligatorio en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }



                                            // Tipo de número de identificación fiscal (SAPTiposNIF - Codigo)
                                            SAPTiposNIFController cTipoNif = new SAPTiposNIFController();
                                            if (row[10].ToString() != "")
                                            {
                                                SAPTiposNIF tipoNif = cTipoNif.GetTipoNifByCodigo(row[10].ToString());
                                                if (tipoNif != null)
                                                {
                                                    proveedor.SAPTipoNIFID = tipoNif.SAPTipoNIFID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Identification fiscal Number" + row[10].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El TIPO NUMERO IDENTIFICACION FISCAL '" + row[10].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // Tratamiento del proveedor
                                            SAPTratamientosController cTratamiento = new SAPTratamientosController();
                                            if (row[11].ToString() != "")
                                            {
                                                SAPTratamientos tratamiento = cTratamiento.GetTratamientoByNombre(row[11].ToString());
                                                if (tratamiento != null)
                                                {
                                                    proveedor.SAPTratamientoID = tratamiento.SAPTratamientoID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The provider Treatment " + row[11].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El TRATAMIENTO PROVEEDOR '" + row[11].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // Grupo de cuentas acreedor                                        
                                            SAPGruposCuentasController cGrupoCuenta = new SAPGruposCuentasController();
                                            if (row[12].ToString() != "")
                                            {
                                                SAPGruposCuentas grupoCuenta = cGrupoCuenta.GetGrupoCuentaByNombre(row[12].ToString());
                                                if (grupoCuenta != null)
                                                {
                                                    proveedor.SAPGrupoCuentaID = grupoCuenta.SAPGrupoCuentaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Group of Account " + row[12].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El GRUPO CUENTAS ACREEDOR '" + row[12].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // Cuenta asociada a la contabilidad principal
                                            SAPCuentasAsociadasController cSAPCuentasAsociadas = new SAPCuentasAsociadasController();
                                            if (row[13].ToString() != "")
                                            {
                                                SAPCuentasAsociadas CuentaAsociada = cSAPCuentasAsociadas.GetCuentaAsociadaByNombre(row[13].ToString());
                                                if (CuentaAsociada != null)
                                                {
                                                    proveedor.SAPCuentaAsociadaID = CuentaAsociada.SAPCuentaAsociadaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Associated account" + row[13].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La CUENTAS ASOCIADAS A LA CONTABILIDAD PRINCIPAL '" + row[13].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }


                                            // CLAVE PARA CLASIFICAR
                                            SAPClavesClasificacionesController cClave = new SAPClavesClasificacionesController();
                                            if (row[14].ToString() != "")
                                            {
                                                SAPClavesClasificaciones claveClasificacion = cClave.GetClaveClasificacionByNombre(row[14].ToString());
                                                if (claveClasificacion != null)
                                                {
                                                    proveedor.SAPClaveClasificacionID = claveClasificacion.SAPClaveClasificacionID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---The Classification Key" + " " + Comun.NO_EXISTE_TREE + row[14].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La CLAVE PARA CLASIFICAR '" + row[14].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // GRUPO TESORERÍA
                                            SAPGruposTesoreriasController cGrupoTesoreria = new SAPGruposTesoreriasController();
                                            if (row[15].ToString() != "")
                                            {
                                                SAPGruposTesorerias grupoTesoreria = cGrupoTesoreria.GetGrupoTesoreriaByNombre(row[15].ToString());
                                                if (grupoTesoreria != null)
                                                {
                                                    proveedor.SAPGrupoTesoreriaID = grupoTesoreria.SAPGrupoTesoreriaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---Group of Treasury" + " " + Comun.NO_EXISTE_TREE + row[15].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El GRUPO DE TESORERIA '" + row[15].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // CLAVE CONDICIONES DE PAGO
                                            CondicionesPagosController cCondiciones = new CondicionesPagosController();
                                            if (row[16].ToString() != "")
                                            {
                                                CondicionesPagos condiciones = cCondiciones.GetCondicionPagoByNombre(row[16].ToString());
                                                if (condiciones != null)
                                                {
                                                    proveedor.CondicionPagoID = condiciones.CondicionPagoID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---Code Conditions" + " " + Comun.NO_EXISTE_TREE + row[16].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La CLAVE DE CONDICIONES DE PAGO '" + row[16].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // BANCO
                                            if (row[17].ToString() != "")
                                            {
                                                BancosController cBancos = new BancosController();
                                                Bancos banco = cBancos.GetBancoByNombre(row[17].ToString());
                                                if (banco != null)
                                                {
                                                    proveedor.BancoID = banco.BancoID;
                                                    proveedor.Banco = banco.Banco;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---Bank " + row[17].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El BANCO '" + row[17].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                    proveedor.Banco = " ";
                                                }
                                            }
                                            else
                                            {
                                                proveedor.Banco = " ";
                                            }

                                            // CUENTA CORRIENT
                                            proveedor.IBAN = row[18].ToString();

                                            // Checks for the current iban object
                                            try
                                            {

                                                ProveedoresCuentasCorrientesController cCuentas = new ProveedoresCuentasCorrientesController();
                                                ProveedoresCuentasCorrientes cuenta = cCuentas.GetCuentaByProveedorIBAN(proveedor.ProveedorID, proveedor.IBAN);
                                                ProveedoresCuentasCorrientesController cCuentasDefecto = new ProveedoresCuentasCorrientesController();
                                                ProveedoresCuentasCorrientes cuentaDefecto = cCuentas.GetCuentaByProveedorDefecto(proveedor.ProveedorID);
                                                bool bCuenta = true;
                                                if (cuenta == null)
                                                {
                                                    cuenta = new ProveedoresCuentasCorrientes();
                                                    if (proveedor.BancoID != null)
                                                    {
                                                        cuenta.BancoID = (long)proveedor.BancoID;
                                                    }
                                                    else
                                                    {
                                                        bCuenta = false;
                                                    }
                                                    cuenta.Activo = true;
                                                    cuenta.IBAN = proveedor.IBAN;
                                                    cuenta.ProveedorID = proveedor.ProveedorID;
                                                    if (bCuenta)
                                                    {
                                                        if (cuentaDefecto != null)
                                                        {
                                                            cuenta.Defecto = false;
                                                        }
                                                        else
                                                        {
                                                            cuenta.Defecto = true;
                                                        }
                                                        cCuentas.AddItem(cuenta);
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog("Excepcion to add an IBAN: " + proveedor.FacturacionRazonSocial + " - " + "PROVIDERS LOAD" + " Exception Code 100");
                                                iErrores++;
                                                ////Comun.cLogV23Proveedores.EscribirLog("Excepcion al agregar un IBAN: " + proveedor.FacturacionRazonSocial + " - " + "PROVIDERS LOAD"  +" Exception Code 100");
                                            }

                                            // NOMBRE REPRESENTANTE
                                            proveedor.NombreRepresentanteLegal = row[19].ToString();

                                            // DNI REPRESENTANTE
                                            proveedor.DNIRepresentanteLegal = row[20].ToString();

                                            // NOMBRE CONTACTO
                                            proveedor.NombreContacto = row[21].ToString();

                                            // TELEFONO CONTACTO
                                            proveedor.TelefonoContacto = row[22].ToString();

                                            // EMAIL CONTACTO
                                            proveedor.EmailContacto = row[23].ToString();

                                            // NOMBRE CONTACTO FACTURACION
                                            proveedor.NombreFacturacion = row[24].ToString();

                                            // TELEFONO FACTURACION
                                            proveedor.FacturacionTelefono = row[25].ToString();

                                            // EMAIL FACTURACION
                                            proveedor.FacturacionEmail = row[26].ToString();

                                            //NUM PROVEEDOR
                                            proveedor.NumProveedor = row[27].ToString();

                                            // Codigo SAP
                                            if (sCodigoSAP != "")
                                            {
                                                proveedor.CodigoSAP = row[28].ToString();
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---SAP code" + ":" + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El CODIGO SAP no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // DESTINATARIO DEL PAGO
                                            proveedor.ANombreDeQuienSaleElPago = row[29].ToString();

                                            // TELEFONO DESTINATARIO DEL PAGO
                                            proveedor.TelefonoDestinatarioPago = row[30].ToString();

                                            // EMAIL DESTINATARIO DEL PAGO
                                            proveedor.EmailDeAQuienSaleElPago = row[31].ToString();

                                            //Clave SAP Forma Pago. Es solo para exportar, ya se guarda la forma de pago desde la columna Literal Forma Pago

                                            // Updates the information
                                            cProveedores.UpdateItem(proveedor);
                                            iActualizados = iActualizados + 1;
                                            #endregion
                                        }
                                        else
                                        {
                                            #region CREATES PROVIDER

                                            proveedor = new Proveedores();

                                            // Tipo del numero de identificación

                                            if (sIdentificador != "")
                                            {

                                                proveedor.FacturacionDNICIF = row[0].ToString();
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---ID/VAT" + ":" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": El ID FISCAL PROVEEDOR no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // Razon Social/Nombre
                                            if (sRazonSocial != "")
                                            {
                                                proveedor.FacturacionRazonSocial = sRazonSocial;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + sIdentificador + "---" + "Name " + ":" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El NOMBRE no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // Direccion
                                            if (sDireccion != "")
                                            {
                                                proveedor.FacturacionDireccion = sDireccion;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + sIdentificador + "---" + "Address" + ":" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---La DIRECCION no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // Codigo Postal
                                            proveedor.FacturacionCP = row[3].ToString();

                                            // Pais
                                            if (row[4].ToString() != "")
                                            {
                                                PaisesController cPais = new PaisesController();
                                                long paisID = cPais.GetPaisByNombre(row[4].ToString());
                                                if (paisID > 0)
                                                {
                                                    proveedor.PaisID = paisID;

                                                    // Region
                                                    if (row[5].ToString() != "")
                                                    {
                                                        RegionesPaisesController cRegion = new RegionesPaisesController();
                                                        RegionesPaises region = cRegion.GetRegionCompletaByNombre(row[5].ToString(), proveedor.PaisID);
                                                        if (region != null)
                                                        {
                                                            proveedor.Region = row[5].ToString();

                                                            // Provincia
                                                            if (row[6].ToString() != "")
                                                            {
                                                                ProvinciasController cProvincias = new ProvinciasController();
                                                                Provincias provincia = cProvincias.GetProvinciaByNombre(row[6].ToString(), region.RegionPaisID);
                                                                if (provincia != null)
                                                                {
                                                                    proveedor.FacturacionProvicia = row[6].ToString();

                                                                    // Municipio
                                                                    if (row[7].ToString() != "")
                                                                    {
                                                                        MunicipiosController cMunicipios = new MunicipiosController();
                                                                        long municipioID = cMunicipios.GetMunicipioIDByNombre(row[7].ToString(), provincia.ProvinciaID);
                                                                        if (municipioID > 0)
                                                                        {
                                                                            proveedor.FacturacionMunicipio = row[7].ToString();
                                                                        }
                                                                        else
                                                                        {

                                                                            //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Municipality" + ":" + row[7].ToString() + " does not exist in tree in said province" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                            ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El MUNICIPIO '" + row[7].ToString() + "' no existe en TREE para dicha provincia:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                            iWarning++;
                                                                            proveedor.FacturacionMunicipio = " ";
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        proveedor.FacturacionMunicipio = " ";
                                                                    }


                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The province" + ":" + row[6].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La PROVINCIA '" + row[6].ToString() + "' no existe en TREE para dicha region pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                    iWarning++;
                                                                    proveedor.FacturacionProvicia = " ";
                                                                    proveedor.FacturacionMunicipio = " ";
                                                                }
                                                            }
                                                            else
                                                            {
                                                                proveedor.FacturacionProvicia = " ";
                                                                proveedor.FacturacionMunicipio = " ";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The region country " + ":" + row[5].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                            ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La REGION PAIS '" + row[5].ToString() + "' no existe en TREE para dicho pais:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                            iWarning++;
                                                            proveedor.FacturacionProvicia = " ";
                                                            proveedor.FacturacionMunicipio = " ";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        proveedor.FacturacionProvicia = " ";
                                                        proveedor.FacturacionMunicipio = " ";
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The Country" + ":" + row[4].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El País '" + row[4].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                    iErrores++;
                                                    proveedor.FacturacionProvicia = " ";
                                                    proveedor.FacturacionMunicipio = " ";
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The Country" + ":" + row[4].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El País '" + row[4].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                proveedor.FacturacionProvicia = " ";
                                                proveedor.FacturacionMunicipio = " ";
                                                continue;
                                            }

                                            // LITERAL FORMA PAGO
                                            if (row[8].ToString() != "")
                                            {
                                                MetodosPagosController cMetodo = new MetodosPagosController();
                                                long metodoID = cMetodo.GetMetodoByCodigoAll(row[8].ToString());
                                                if (metodoID > 0)
                                                {
                                                    proveedor.MetodoPagoID = metodoID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Payment Method" + ":" + row[8].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La FORMA PAGO '" + row[8].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // TIPO CONTRIBUYENTE
                                            if (row[9].ToString() != "")
                                            {
                                                TiposContribuyentesController cContribuyente = new TiposContribuyentesController();
                                                long contriID = cContribuyente.GetTiposContribuyentes(row[9].ToString());
                                                if (contriID > 0)
                                                {
                                                    proveedor.TipoContribuyenteID = contriID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Taxpayer Type" + ":" + row[9].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El TIPO CONTRIBUYENTE '" + row[9].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Taxpayer Type" + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El TIPO CONTRIBUYENTE es obligatorio en TREE:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // Tipo de número de identificación fiscal (SAPTiposNIF - Codigo)
                                            SAPTiposNIFController cTipoNif = new SAPTiposNIFController();
                                            if (row[10].ToString() != "")
                                            {
                                                SAPTiposNIF tipoNif = cTipoNif.GetTipoNifByCodigo(row[10].ToString());
                                                if (tipoNif != null)
                                                {
                                                    proveedor.SAPTipoNIFID = tipoNif.SAPTipoNIFID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Identification fiscal Number" + row[10].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El TIPO NUMERO IDENTIFICACION FISCAL '" + row[10].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // Tratamiento del proveedor
                                            SAPTratamientosController cTratamiento = new SAPTratamientosController();
                                            if (row[11].ToString() != "")
                                            {
                                                SAPTratamientos tratamiento = cTratamiento.GetTratamientoByNombre(row[11].ToString());
                                                if (tratamiento != null)
                                                {
                                                    proveedor.SAPTratamientoID = tratamiento.SAPTratamientoID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "The provider Treatment " + row[11].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El TRATAMIENTO PROVEEDOR '" + row[11].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // Grupo de cuentas acreedor                                        
                                            SAPGruposCuentasController cGrupoCuenta = new SAPGruposCuentasController();
                                            if (row[12].ToString() != "")
                                            {
                                                SAPGruposCuentas grupoCuenta = cGrupoCuenta.GetGrupoCuentaByNombre(row[12].ToString());
                                                if (grupoCuenta != null)
                                                {
                                                    proveedor.SAPGrupoCuentaID = grupoCuenta.SAPGrupoCuentaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Group of Account " + row[12].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El GRUPO CUENTAS ACREEDOR '" + row[12].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // Cuenta asociada a la contabilidad principal
                                            SAPCuentasAsociadasController cSAPCuentasAsociadas = new SAPCuentasAsociadasController();
                                            if (row[13].ToString() != "")
                                            {
                                                SAPCuentasAsociadas CuentaAsociada = cSAPCuentasAsociadas.GetCuentaAsociadaByNombre(row[13].ToString());
                                                if (CuentaAsociada != null)
                                                {
                                                    proveedor.SAPCuentaAsociadaID = CuentaAsociada.SAPCuentaAsociadaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "Associated account" + row[13].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La CUENTAS ASOCIADAS A LA CONTABILIDAD PRINCIPAL '" + row[13].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }


                                            // CLAVE PARA CLASIFICAR
                                            SAPClavesClasificacionesController cClave = new SAPClavesClasificacionesController();
                                            if (row[14].ToString() != "")
                                            {
                                                SAPClavesClasificaciones claveClasificacion = cClave.GetClaveClasificacionByNombre(row[14].ToString());
                                                if (claveClasificacion != null)
                                                {
                                                    proveedor.SAPClaveClasificacionID = claveClasificacion.SAPClaveClasificacionID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---The Classification Key" + " " + Comun.NO_EXISTE_TREE + row[14].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La CLAVE PARA CLASIFICAR '" + row[14].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // GRUPO TESORERÍA
                                            SAPGruposTesoreriasController cGrupoTesoreria = new SAPGruposTesoreriasController();
                                            if (row[15].ToString() != "")
                                            {
                                                SAPGruposTesorerias grupoTesoreria = cGrupoTesoreria.GetGrupoTesoreriaByNombre(row[15].ToString());
                                                if (grupoTesoreria != null)
                                                {
                                                    proveedor.SAPGrupoTesoreriaID = grupoTesoreria.SAPGrupoTesoreriaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---Group of Treasury" + " " + Comun.NO_EXISTE_TREE + row[15].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El GRUPO DE TESORERIA '" + row[15].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // CLAVE CONDICIONES DE PAGO
                                            CondicionesPagosController cCondiciones = new CondicionesPagosController();
                                            if (row[16].ToString() != "")
                                            {
                                                CondicionesPagos condiciones = cCondiciones.GetCondicionPagoByNombre(row[16].ToString());
                                                if (condiciones != null)
                                                {
                                                    proveedor.CondicionPagoID = condiciones.CondicionPagoID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---Code Conditions" + " " + Comun.NO_EXISTE_TREE + row[16].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---La CLAVE DE CONDICIONES DE PAGO '" + row[16].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                            // BANCO
                                            if (row[17].ToString() != "")
                                            {
                                                BancosController cBancos = new BancosController();
                                                Bancos banco = cBancos.GetBancoByNombre(row[17].ToString());
                                                if (banco != null)
                                                {
                                                    proveedor.BancoID = banco.BancoID;
                                                    proveedor.Banco = banco.Banco;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---Bank " + row[17].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ": DNI: " + sIdentificador + "---El BANCO '" + row[17].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    iWarning++;
                                                    proveedor.Banco = " ";
                                                }
                                            }
                                            else
                                            {
                                                proveedor.Banco = " ";
                                            }

                                            // CUENTA CORRIENTE
                                            proveedor.IBAN = row[18].ToString();

                                            // NOMBRE REPRESENTANTE
                                            proveedor.NombreRepresentanteLegal = row[19].ToString();

                                            // DNI REPRESENTANTE
                                            proveedor.DNIRepresentanteLegal = row[20].ToString();

                                            // NOMBRE CONTACTO
                                            proveedor.NombreContacto = row[21].ToString();

                                            // TELEFONO CONTACTO
                                            proveedor.TelefonoContacto = row[22].ToString();

                                            // EMAIL CONTACTO
                                            proveedor.EmailContacto = row[23].ToString();

                                            // NOMBRE CONTACTO FACTURACION
                                            proveedor.NombreFacturacion = row[24].ToString();

                                            // TELEFONO FACTURACION
                                            proveedor.FacturacionTelefono = row[25].ToString();

                                            // EMAIL FACTURACION
                                            proveedor.FacturacionEmail = row[26].ToString();

                                            //NUM PROVEEDOR
                                            proveedor.NumProveedor = row[27].ToString();

                                            // Codigo SAP
                                            if (sCodigoSAP != "")
                                            {
                                                proveedor.CodigoSAP = row[28].ToString();
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog(Comun.WARNING + ":" + " ID/VAT " + ": " + sIdentificador + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoCodigoSAP" + " " + Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.ERROR + ": DNI: " + sIdentificador + "---El CODIGO SAP no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // DESTINATARIO DEL PAGO
                                            proveedor.ANombreDeQuienSaleElPago = row[29].ToString();

                                            // TELEFONO DESTINATARIO DEL PAGO
                                            proveedor.TelefonoDestinatarioPago = row[30].ToString();

                                            // EMAIL DESTINATARIO DEL PAGO
                                            proveedor.EmailDeAQuienSaleElPago = row[31].ToString();

                                            //Clave SAP Forma Pago. Es solo para exportar, ya se guarda la forma de pago desde la columna Literal Forma Pago


                                            // Otros elementos
                                            proveedor.ProveedorCandidato = false;
                                            proveedor.Activo = true;
                                            proveedor.ClienteID = cliID;

                                            // Adds the information
                                            try
                                            {
                                                cProveedores.AddItem(proveedor);
                                                iCargados = iCargados + 1;
                                                // Checks for the current iban object
                                                try
                                                {
                                                    ProveedoresCuentasCorrientesController cCuentas = new ProveedoresCuentasCorrientesController();
                                                    ProveedoresCuentasCorrientes cuenta = null;
                                                    bool bCuenta = true;

                                                    cuenta = new ProveedoresCuentasCorrientes();
                                                    if (proveedor.BancoID != null)
                                                    {
                                                        cuenta.BancoID = (long)proveedor.BancoID;
                                                    }
                                                    else
                                                    {
                                                        bCuenta = false;
                                                    }
                                                    cuenta.Activo = true;
                                                    cuenta.Defecto = true;
                                                    cuenta.IBAN = proveedor.IBAN;
                                                    cuenta.ProveedorID = proveedor.ProveedorID;
                                                    if (bCuenta)
                                                    {
                                                        cCuentas.AddItem(cuenta);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23Proveedores.EscribirLog("Excepcion to add an IBAN: " + proveedor.FacturacionRazonSocial + " - " + "V23" + " Exception Code 100");
                                                    ////Comun.cLogV23Proveedores.EscribirLog("Excepcion al agregar un IBAN: " + proveedor.FacturacionRazonSocial + " - " + "V23" +" Exception Code 100" + Comun.NuevaLinea);

                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Proveedores.EscribirLog("Provider code loc" + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                                ////Comun.cLogV23Proveedores.EscribirLog("Proveedores Codigo Loc " + sCodigo + " - " + "V23" +" Exception Code 100" + Environment.NewLine);

                                            }
                                            #endregion
                                        }

                                    }
                                    GC.Collect();

                                }

                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "PROVIDERS TOTAL" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "PROVIDERS CHARGED" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "PROVIDERS UPDLOADED" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "PROVIDERS ERRORS" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "PROVIDERS WARNING" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ":" + "END PROVIDERS " + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": PROVEEDORES TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": PROVEEDORES CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": PROVEEDORES ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": PROVEEDORES ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": PROVEEDORES CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23Proveedores.EscribirLog(Comun.INFO + ": FIN PROVEEDORES" + System.Environment.NewLine);

                                break;
                            #endregion

                            #region EMPLAZAMIENTOS
                            case 2:

                                // Local variables
                                EmplazamientosController cEmplazamientos = new EmplazamientosController();
                                Emplazamientos emplazamiento = null;
                                Emplazamientos emplazamientoOriginal = null;
                                EstadosGlobalesController cGlobales = new EstadosGlobalesController();

                                PaisesController cSitePaises = new PaisesController();
                                OperadoresController cOperadorPrincipal = new OperadoresController();
                                PropietariosController cPropietarios = new PropietariosController();
                                MonedasController cMonedas = new MonedasController();
                                RegionesController cSiteRegiones = new RegionesController();

                                EmplazamientosController cEmplazamientoPadre = new EmplazamientosController();
                                Emplazamientos oEmplazamientoPadre = new Emplazamientos();

                                EmplazamientosCamposAdicionales emplazamientoCamposAdicionales = null;
                                EmplazamientosCamposAdicionales emplazamientoCamposAdicionalesOriginal = null;
                                EmplazamientosCamposAdicionalesController cEmplazamientosCamposAdicionales = new EmplazamientosCamposAdicionalesController();

                                long sitePaisID = 0;
                                long operadorID = 0;
                                long propietarioSueloID = 0;
                                long propietarioEstructuraID = 0;
                                long estadoGlobalID = 0;
                                long monedaID = 0;
                                long regionID = 0;

                                // Reads client information
                                cliID = Convert.ToInt32(odoccarga.ClienteID);
                                //operadorID = cOperadorPrincipal.GetOperadorByNombre(txtOperador.Text);
                                if (odoccarga.OperadorID != null)
                                {
                                    sOperador = cOperadorPrincipal.GetItem((long)odoccarga.OperadorID).Operador;
                                }
                                else
                                {
                                    //Generate log and return
                                }


                                // Stores the information

                                maximo = result.Tables[2].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                bActualizarEmplazamientoCamposAdicionales = false;
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ": Start Sites" + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strInicioEmplazamientos" + ": " + System.Environment.NewLine);
                                foreach (DataRow row in result.Tables[2].Rows)
                                {

                                    cont = cont + 1;

                                    // Reads the client information
                                    emplazamientoOriginal = new Emplazamientos();
                                    //EmplazamientosController cEmplazamientosNuevo = new EmplazamientosController();

                                    // Reads the site code


                                    if (row[0].ToString() != "")
                                    {
                                        sCodigo = row[0].ToString();
                                    }
                                    else
                                    {
                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    emplazamientoOriginal = cEmplazamientos.GetEmplazamientoByCodigoyOperadoryCliente(sCodigo, sOperador, cliID);
                                    emplazamiento = new Emplazamientos();
                                    emplazamientoCamposAdicionales = new EmplazamientosCamposAdicionales();
                                    emplazamientoCamposAdicionalesOriginal = new EmplazamientosCamposAdicionales();
                                    if (emplazamientoOriginal != null && emplazamientoOriginal.Codigo != null && emplazamientoOriginal.Codigo != "")
                                    {
                                        bActualizar = true;
                                        emplazamientoCamposAdicionalesOriginal = cEmplazamientos.GetEmplazamientosCamposAdicionales(emplazamientoOriginal.EmplazamientoID);
                                        if (emplazamientoCamposAdicionalesOriginal != null)
                                        {
                                            bActualizarEmplazamientoCamposAdicionales = true;
                                            emplazamientoCamposAdicionales.EmplazamientoID = emplazamientoOriginal.EmplazamientoID;
                                        }
                                        else
                                        {
                                            bActualizarEmplazamientoCamposAdicionales = false;
                                        }
                                    }
                                    else
                                    {
                                        bActualizar = false;
                                        emplazamiento.Codigo = sCodigo;
                                    }

                                    #region GESTION EMPLAZAMIENTO

                                    try
                                    {


                                        #region DATOS PRINCIPALES

                                        emplazamiento.ClienteID = cliID;
                                        //emplazamiento.OperadorID = operadorID;

                                        //Nombre Sitio

                                        if (row[1].ToString() != "")
                                        {
                                            emplazamiento.NombreSitio = row[1].ToString();
                                        }
                                        else
                                        {
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El NOMBRE no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Name " + " " + Comun.FORMATO_INCORRETO + " " + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                        //Propietario, este es el antiguo campo de propietario antes de cambiar a Propietario Suelo y Propietario Estructura. No se rellena valor en el, pero es necesario por que es obligatorio en BD
                                        emplazamiento.Propietario = "";

                                        //Propietario Suelo
                                        if (!row[2].ToString().Equals(""))
                                        {
                                            propietarioSueloID = cPropietarios.GetPropietarioByDNI(row[2].ToString()).PropietarioID;
                                            if (propietarioSueloID > 0)
                                            {
                                                emplazamiento.PropietarioSueloID = propietarioSueloID;
                                            }
                                            else
                                            {
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO SUELO '" + row[2].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "--- Land owner" + row[2].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":Code" + ": " + sCodigo + "---Land owner" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO SUELO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        if (!row[3].ToString().Equals(""))
                                        {
                                            propietarioEstructuraID = cPropietarios.GetPropietarioByDNI(row[3].ToString()).PropietarioID;
                                            if (propietarioEstructuraID > 0)
                                            {
                                                emplazamiento.PropietarioEstructuraID = propietarioEstructuraID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Structure owner" + row[3].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO ESTRUCTURA '" + row[3].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Structure owner" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO ESTRUCTURA no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Operador
                                        if (!row[4].ToString().Equals(""))
                                        {
                                            operadorID = cOperadorPrincipal.GetOperadorByNombre(row[4].ToString());
                                            if (operadorID > 0)
                                            {
                                                emplazamiento.OperadorID = operadorID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Operator " + row[4].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El OPERADOR '" + row[4].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Operator " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El OPERADOR no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Moneda
                                        if (!row[5].ToString().Equals(""))
                                        {
                                            monedaID = cMonedas.GetMonedaBySimbolo(row[5].ToString());
                                            if (monedaID > 0)
                                            {
                                                emplazamiento.MonedaID = monedaID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Currency " + row[5].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La MONEDA '" + row[5].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Currency " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La MONEDA no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        // Estado global
                                        if (!row[6].ToString().Equals(""))
                                        {
                                            estadoGlobalID = cGlobales.GetEstadoGlobalByNombre(row[6].ToString());
                                            if (estadoGlobalID > 0)
                                            {
                                                emplazamiento.EstadoGlobalID = estadoGlobalID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Global state:" + row[6].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El ESTADO GLOBAL '" + row[6].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Global state" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El ESTADO GLOBAL no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        #region CATEGORIZACION DEL SITIO

                                        // Categoria Sitio
                                        EmplazamientosCategoriasSitiosController cCategoria = new EmplazamientosCategoriasSitiosController();
                                        long categoriaID = 0;

                                        if (row[7].ToString() != "")
                                        {
                                            try
                                            {
                                                categoriaID = cCategoria.GetCategoriaByNombreAll(row[7].ToString());
                                                if (categoriaID > 0)
                                                {
                                                    emplazamiento.CategoriaEmplazamientoID = categoriaID;
                                                    cCategoria = null;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---" + "ServiceImportExport.App_GlobalResources.Comun.strCategoria" + row[7].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La CATEGORIA SITIO '" + row[7].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    cCategoria = null;
                                                    continue;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---" + "ServiceImportExport.App_GlobalResources.Comun.strCategoria" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Categorias: " + "V23" +" Exception Code 100" + Comun.NuevaLinea);
                                                cCategoria = null;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoCategoriaSitio" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La CATEGORIA SITIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Tipo Edificacion (EMPLAZAMIENTO TIPO)                       
                                        EmplazamientosTiposController cEmpTipo = new EmplazamientosTiposController();
                                        EmplazamientosTiposEdificiosController cTipoEdificio = new EmplazamientosTiposEdificiosController();
                                        EmplazamientosTiposEstructurasController cTipoEstructura = new EmplazamientosTiposEstructurasController();

                                        long empTipoID = 0;
                                        long tipoEdificioID = 0;
                                        long tipoEstructuraID = 0;

                                        if (row[8].ToString() != "")
                                        {
                                            try
                                            {
                                                empTipoID = cEmpTipo.GetTipoByNombreAll(row[8].ToString());

                                                if (empTipoID > 0)
                                                {
                                                    //Tipo Edificio
                                                    if (row[9].ToString() != "")
                                                    {
                                                        try
                                                        {
                                                            tipoEdificioID = cTipoEdificio.GetTipoEdificioByNombreAndTipoEmplazamiento(empTipoID, row[9].ToString());

                                                            if (tipoEdificioID > 0)
                                                            {
                                                                //Tipo Estructura
                                                                if (row[10].ToString() != "")
                                                                {
                                                                    tipoEstructuraID = cTipoEstructura.GetTipoEstructuraByNombreAndTipoEdificio(tipoEdificioID, row[10].ToString());

                                                                    if (tipoEstructuraID > 0)
                                                                    {
                                                                        emplazamiento.EmplazamientoTipoEstructuraID = tipoEstructuraID;
                                                                        cTipoEstructura = null;
                                                                    }
                                                                    else
                                                                    {

                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---structure Type " + row[10].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO ESTRUCTURA '" + row[10].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                        iErrores++;
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---structure Type " + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                    //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO ESTRUCTURA no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }

                                                                emplazamiento.TipoEdificacionID = tipoEdificioID;
                                                                cTipoEdificio = null;
                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Building Type " + row[9].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO EDIFICION '" + row[9].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Building Type " + " " + Comun.NO_EXISTE_TREE + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                            ////Comun.cLogV23Emplazamientos.EscribirLog("Tipos Edificios: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                            cTipoEdificio = null;
                                                        }

                                                        emplazamiento.EmplazamientoTipoID = empTipoID;
                                                        cEmpTipo = null;
                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Building Type" + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO EDIFICIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Sites Types " + row[8].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El EMPLAZAMIENTO TIPO '" + row[8].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    cCategoria = null;
                                                    continue;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Sites Types" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Emplazamientos tipos: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                cEmpTipo = null;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Sites Types" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El EMPLAZAMIENTO TIPO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Tamaño Edificio
                                        EmplazamientosTamanosController cTamano = new EmplazamientosTamanosController();
                                        long tamanoID = 0;

                                        if (row[11].ToString() != "")
                                        {
                                            try
                                            {
                                                tamanoID = cTamano.GetTamanoByNombreAll(row[11].ToString());
                                                if (tamanoID > 0)
                                                {
                                                    emplazamiento.EmplazamientoTamanoID = tamanoID;
                                                    cTamano = null;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strTamano" + row[11].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TAMAÑO EDIFICIO '" + row[11].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    cTamano = null;
                                                    continue;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strTamano" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Tamaño: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                cTamano = null;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoTamañoEdificio" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TAMAÑO EDIFICIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            cTamano = null;
                                            continue;
                                        }

                                        #endregion


                                        // Fecha Activacion
                                        DateTime fActiva = DateTime.MinValue;
                                        if (row[12].ToString() != null && row[12].ToString() != "")
                                        {
                                            try
                                            {
                                                fActiva = Convert.ToDateTime(row[12].ToString());
                                                emplazamiento.FechaActivacion = fActiva;
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Activation date" + row[12].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La FECHA ACTIVACION '" + row[12].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Activacion date" + " " + Comun.FORMATO_INCORRETO + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                //// Comun.cLogV23Emplazamientos.EscribirLog("Fecha Activacion: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;

                                            }
                                        }

                                        // Fecha DesActivacion
                                        DateTime fDesActiva = DateTime.MinValue;
                                        if (row[13].ToString() != null && row[13].ToString() != "")
                                        {
                                            try
                                            {
                                                fDesActiva = Convert.ToDateTime(row[13].ToString());
                                                emplazamiento.FechaDesactivacion = fDesActiva;
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Desactivation date" + row[13].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La FECHA ACTIVACION '" + row[12].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Desactivation date" + " " + Comun.FORMATO_INCORRETO + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                //// Comun.cLogV23Emplazamientos.EscribirLog("Fecha Activacion: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }

                                        #endregion

                                        #region LOCALIZACION SITIO

                                        // Region
                                        if (!row[14].ToString().Equals(""))
                                        {

                                            regionID = cSiteRegiones.GetRegionCompletaByNombre(row[14].ToString()).RegionID;
                                            if (regionID > 0)
                                            {
                                                emplazamiento.Region = row[14].ToString();

                                                // Pais
                                                if (!row[15].ToString().Equals(""))
                                                {
                                                    sitePaisID = cSitePaises.GetPaisByNombreRegion(row[15].ToString(), regionID);
                                                    if (sitePaisID > 0)
                                                    {
                                                        emplazamiento.PaisID = sitePaisID;

                                                        // Region Pais
                                                        if (row[16].ToString() != "")
                                                        {
                                                            RegionesPaisesController cRegionPais = new RegionesPaisesController();
                                                            RegionesPaises oRegionPais = cRegionPais.GetRegionCompletaByNombre(row[16].ToString(), sitePaisID);
                                                            if (oRegionPais != null)
                                                            {
                                                                emplazamiento.RegionPais = row[16].ToString();

                                                                // Provincia
                                                                if (row[17].ToString() != "")
                                                                {
                                                                    ProvinciasController cProvincias = new ProvinciasController();
                                                                    Provincias provincia = cProvincias.GetProvinciaByNombre(row[17].ToString(), oRegionPais.RegionPaisID);
                                                                    if (provincia != null)
                                                                    {
                                                                        emplazamiento.Provincia = row[17].ToString();

                                                                        // Municipio
                                                                        if (row[18].ToString() != "")
                                                                        {
                                                                            MunicipiosController cMunicipios = new MunicipiosController();
                                                                            long municipioID = cMunicipios.GetMunicipioIDByNombre(row[18].ToString(), provincia.ProvinciaID);
                                                                            if (municipioID > 0)
                                                                            {
                                                                                emplazamiento.Municipio = row[18].ToString();

                                                                                //Municipalidad
                                                                                if (row[19].ToString() != "")
                                                                                {
                                                                                    GlobalMunicipalidadesController cMunicipalidades = new GlobalMunicipalidadesController();
                                                                                    long municipalidadID = cMunicipalidades.GetMunicipalidadesByNombreMunicipioID(row[19].ToString(), municipioID);
                                                                                    if (municipalidadID > 0)
                                                                                    {
                                                                                        emplazamiento.GlobalMunicipalidadID = municipalidadID;

                                                                                        //Partidos
                                                                                        if (row[20].ToString() != "")
                                                                                        {
                                                                                            GlobalPartidosController cPartidos = new GlobalPartidosController();
                                                                                            long partidoID = cPartidos.GetPartidosByNombreMunicipalidadID(row[20].ToString(), municipalidadID);
                                                                                            if (partidoID > 0)
                                                                                            {
                                                                                                emplazamiento.GlobalPartidoID = partidoID;

                                                                                                //Localidades
                                                                                                if (row[21].ToString() != "")
                                                                                                {
                                                                                                    GlobalLocalidadesController cLocalidades = new GlobalLocalidadesController();
                                                                                                    long localidadID = cLocalidades.GetLocalidadesByNombrePartidoID(row[21].ToString(), partidoID);
                                                                                                    if (localidadID > 0)
                                                                                                    {
                                                                                                        emplazamiento.GlobalLocalidadID = localidadID;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---City " + row[21].ToString() + " does not exist in tree in said Split" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La LOCALIDAD '" + row[21].ToString() + "' no existe en TREE para dicho partido:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                        iWarning++;
                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Split " + " does not exist in tree in said Municipality" + row[20].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoExistePartido" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---El PARTIDO '" + row[20].ToString() + "' no existe en TREE para dicha municipalidad:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                iWarning++;
                                                                                            }

                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Municipality " + row[19].ToString() + " does not exist in tree in said Municipality" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La MUNICIPALIDAD '" + row[19].ToString() + "' no existe en TREE para dicho municipio:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                        iWarning++;
                                                                                    }

                                                                                }


                                                                            }
                                                                            else
                                                                            {
                                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Municipality " + row[18].ToString() + " does not exist in tree in said Municipality" + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteMunicipo" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El MUNICIPIO '" + row[18].ToString() + "' no existe en TREE para dicha provincia:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                                iErrores++;
                                                                                continue;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Municipality " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El MUNICIPIO no puede ser vacio, es un campo obligatorio: " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                            iErrores++;
                                                                            continue;
                                                                        }


                                                                    }
                                                                    else
                                                                    {
                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Province " + row[17].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La PROVINCIA '" + row[17].ToString() + "' no existe en TREE para dicha region pais:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                        iErrores++;
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Province " + " " + Comun.FORMATO_INCORRETO + row[17].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La PROVINCIA no puede ser vacio, es un campo obligatorio: " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---The region country " + row[16].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION PAIS '" + row[16].ToString() + "' no existe en TREE para dicho pais:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---The region country " + row[16].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION PAIS no puede ser vacio, es un campo obligatorio: " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "--The Country " + row[15].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PAIS '" + row[15].ToString() + "' no existe en TREE para dicha region:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":Code" + ": " + "---The Country " + row[15].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PAIS no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---The region" + row[14].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION '" + row[14].ToString() + "' no existe en TREE " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {

                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":Code" + ": " + "---The region" + row[14].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION no puede ser vacia, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Barrio
                                        emplazamiento.Barrio = row[22].ToString();

                                        // Direccion
                                        if (!row[23].ToString().Equals(""))
                                        {
                                            emplazamiento.Direccion = row[23].ToString();
                                        }
                                        else
                                        {

                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":Code" + ": " + "---Address" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La DIRECCION no puede ser vacia, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }




                                        // Codigo postal
                                        emplazamiento.CodigoPostal = row[24].ToString();

                                        // Latitud - Longitud
                                        if (row[25].ToString() != "" && row[26].ToString() != "" && row[25].ToString() != "0" && row[26].ToString() != "0")
                                        {
                                            double lat = 0;
                                            double lon = 0;

                                            lat = cEmplazamientos.ConvertirGrados2Decimal(row[25].ToString());
                                            lon = cEmplazamientos.ConvertirGrados2Decimal(row[26].ToString());

                                            if (lat > 90 || lat < -90)
                                            {
                                                string la = "";
                                                la = row[25].ToString().Replace(',', '.');
                                                emplazamiento.Latitud = Convert.ToDouble(la, System.Globalization.CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                emplazamiento.Latitud = lat;
                                            }

                                            if (lon > 180 || lon < -180)
                                            {
                                                string lo = "";
                                                lo = row[26].ToString().Replace(',', '.');
                                                emplazamiento.Longitud = Convert.ToDouble(lo, System.Globalization.CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                emplazamiento.Longitud = lon;
                                            }

                                        }
                                        else
                                        {

                                            emplazamiento.Latitud = 0;
                                            emplazamiento.Longitud = 0;

                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Latitud/longitude" + row[25].ToString() + "/" + row[26].ToString() + "are not correct, they will be saved as 0/0:" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La LATITUD y LONGITUD '" + row[25].ToString() + "/" + row[26].ToString() + "'are not correct, they will be saved as 0/0:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;

                                        }

                                        #endregion

                                        #region DATOS ADICIONALES

                                        // Empresa Compradora
                                        emplazamiento.EmpresaCompradora = row[27].ToString();

                                        // Operador dueño infra
                                        OperadoresController cOperadorInfra = new OperadoresController();
                                        long operadorInfraId = cOperadorInfra.GetOperadorByNombre(row[28].ToString());
                                        if (operadorInfraId > 0)
                                        {
                                            emplazamiento.OperadorPropietarioEstructuraID = operadorInfraId;
                                        }

                                        //Nemonico - Campo Generico 18
                                        emplazamiento.CampoGenerico18 = row[29].ToString();

                                        // Codigo torrero
                                        emplazamiento.CodigoTorrero = row[30].ToString();

                                        // Codigo telco
                                        emplazamiento.CodigoTelco = row[31].ToString();

                                        // Venta Sitio A Tercero
                                        emplazamiento.VentaSitioATercero = row[32].ToString();

                                        //Codigo SAP
                                        emplazamiento.CodigoSAP = row[33].ToString();

                                        // Clave catastral
                                        emplazamiento.ClaveCatastral = row[34].ToString();

                                        // Potencial Sitio
                                        emplazamiento.PotencialSitio = row[35].ToString();

                                        // Acta judicial
                                        emplazamiento.CampoGenerico6 = row[36].ToString();

                                        // Varianza renta
                                        emplazamiento.VarRentaRentaMediaZona = row[37].ToString();

                                        // Supervisor
                                        emplazamiento.Supervisor = row[38].ToString();

                                        // Uso Sitio
                                        emplazamiento.UsoSitio = row[39].ToString();

                                        // Superficie Sitio
                                        if (row[40].ToString() != "")
                                        {
                                            try
                                            {
                                                double dSuperficie = Convert.ToDouble(row[40].ToString());
                                                emplazamiento.SuperficieSitio = dSuperficie.ToString();
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieSitio" + row[40].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieSitio" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La SUPERFICIE DEL SITIO '" + row[40].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Superficie Sitio: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }


                                        // Altura Sitio
                                        if (row[41].ToString() != "")
                                        {
                                            try
                                            {
                                                emplazamiento.AltitudSitio = Convert.ToDouble(row[41].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAlturaSitio" + row[41].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAlturaSitio" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La ALTURA DEL SITIO '" + row[41].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Altura Sitio: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }


                                        // Superficie Vertical

                                        if (row[42].ToString() != "")
                                        {
                                            try
                                            {
                                                double dSuperficieV = Convert.ToDouble(row[42].ToString());
                                                emplazamiento.SuperficieVertical = dSuperficieV.ToString();
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieVertical" + row[42].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieVertical" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La SUPERFICIE VERTICAL '" + row[42].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);

                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Superficie Vertical: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }

                                        // Numero sitios dependientes
                                        if (row[43].ToString() != "")
                                        {
                                            try
                                            {
                                                emplazamiento.NumSitiosDependientes = Convert.ToInt32(row[43].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                emplazamiento.NumSitiosDependientes = 0;

                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strNumeroSitios" + row[43].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strNumeroSitios" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La NUMERO DE SITIOS DEPENDIENTES '" + row[43].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Numero de sitios dependientes: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }
                                        else
                                        {
                                            emplazamiento.NumSitiosDependientes = 0;
                                        }

                                        //Riesgos
                                        EmplazamientosRiesgosController cRiesgos = new EmplazamientosRiesgosController();
                                        long riesgoID = 0;

                                        if (row[44].ToString() != "")
                                        {
                                            try
                                            {
                                                riesgoID = cRiesgos.GetEmplazamientosRiesgoIDByNombre(row[44].ToString());
                                                if (riesgoID > 0)
                                                {
                                                    emplazamiento.EmplazamientoRiesgoID = riesgoID;
                                                    cRiesgos = null;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strRiesgo" + row[44].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El RIESGO '" + row[44].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);

                                                    iWarning++;
                                                    cRiesgos = null;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRiesgo" + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Riesgo: " + "V23" +" Exception Code 100" + System.Environment.NewLine);
                                                cRiesgos = null;
                                            }
                                        }

                                        // Situacion Ingenieria
                                        emplazamiento.SituacionIngenieria = row[45].ToString();

                                        // Comentarios equipos
                                        emplazamiento.CometariosEquipos = row[46].ToString();

                                        // Comentarios edificios
                                        emplazamiento.ComentarioEdificio = row[47].ToString();

                                        // Comentarios Generales
                                        emplazamiento.ComentariosGenerales = row[48].ToString();

                                        // Compartido
                                        if (row[49].ToString().ToUpper() != "SI")
                                        {
                                            emplazamiento.Compartido = false;
                                        }
                                        else
                                        {
                                            emplazamiento.Compartido = true;
                                        }

                                        if (emplazamiento.Compartido)
                                        {
                                            emplazamiento.CodigoTelco = emplazamiento.CodigoTorrero;
                                            if (emplazamiento.OperadorID != emplazamiento.OperadorPropietarioEstructuraID)
                                            {
                                                emplazamiento.Outbound = true;
                                                emplazamiento.Inbound = false;
                                            }
                                            else
                                            {
                                                emplazamiento.Outbound = false;
                                                emplazamiento.Inbound = true;
                                            }
                                        }

                                        #endregion

                                        #region DATOS DE OTROS MODULOS

                                        // Imposible Legalizar
                                        if (row[50].ToString().ToUpper() != "SI")
                                        {
                                            emplazamiento.ImposibleLicenciar = false;
                                        }
                                        else
                                        {
                                            emplazamiento.ImposibleLicenciar = true;
                                        }

                                        // Agencia Adquisiciones
                                        emplazamiento.CampoGenerico11 = row[51].ToString();

                                        // Estudio jurídico
                                        emplazamiento.CampoGenerico12 = row[52].ToString();

                                        #endregion

                                        #region DATOS EMPLAZAMIENTO PADRE

                                        if (row[53].ToString() != "")
                                        {
                                            string sCodigoPadre = row[53].ToString();
                                            oEmplazamientoPadre = cEmplazamientoPadre.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoPadre, sOperador, cliID);
                                            if (oEmplazamientoPadre != null)
                                            {
                                                emplazamiento.EmplazamientoPadreID = oEmplazamientoPadre.EmplazamientoID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoPadre" + row[53].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////  Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El CODIGO PADRE '" + row[53].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }



                                        #endregion

                                        #region DATOS ADICIONALES 2

                                        // Tipo Maestro
                                        if (row[54].ToString().ToUpper() != "SI")
                                        {
                                            emplazamientoCamposAdicionales.EsTipoMaestro = false;
                                        }
                                        else
                                        {
                                            emplazamientoCamposAdicionales.EsTipoMaestro = true;
                                        }

                                        // Codigo Maestro
                                        emplazamientoCamposAdicionales.CodigoMaestro = row[55].ToString();

                                        // Codigo Adicional
                                        emplazamientoCamposAdicionales.CodigoAdicional = row[56].ToString();

                                        // Codigo Unico
                                        emplazamientoCamposAdicionales.CodigoUnico = row[57].ToString();

                                        #endregion

                                        if (bActualizar)
                                        {
                                            cEmplazamientos.UpdateItem(emplazamiento);
                                            if (!bActualizarEmplazamientoCamposAdicionales)
                                            {
                                                cEmplazamientosCamposAdicionales.AddItem(emplazamientoCamposAdicionales);
                                            }
                                            else
                                            {
                                                cEmplazamientosCamposAdicionales.UpdateItem(emplazamientoCamposAdicionales);
                                            }
                                            iActualizados++;
                                        }
                                        else
                                        {
                                            Emplazamientos emplazamientoNuevo = new Emplazamientos();
                                            emplazamientoNuevo = cEmplazamientos.AddItem(emplazamiento);

                                            if (emplazamientoNuevo != null)
                                            {
                                                emplazamientoCamposAdicionales.EmplazamientoID = emplazamientoNuevo.EmplazamientoID;
                                                cEmplazamientosCamposAdicionales.AddItem(emplazamientoCamposAdicionales);
                                            }
                                            iCargados++;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ////Comun.cLogV23Emplazamientos.EscribirLog("No se pudo agregar el emplazamiento: " + emplazamiento.Codigo + " - " + "V23" +" Exception Code 100" + Comun.NuevaLinea);
                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":" + "Sites could not be added " + ": " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                    }


                                    #endregion



                                }

                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES TOTALS" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES CHARGED" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES UPLOADED" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES ERROR" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES WARNING" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "END SITES" + ": " + System.Environment.NewLine);


                                break;
                            #endregion

                            #region EMPLAZAMIENTOS CONTACTOS
                            case 3:


                                maximo = result.Tables[3].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //// Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": INICIO CONTACTOS EMPLAZAMIENTOS" + System.Environment.NewLine);
                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ":  start contacts of sites" + ": " + System.Environment.NewLine);

                                Emplazamientos emp = null;
                                EmplazamientosController cEmpContactos = null;
                                ContactosEmplazamientosController cContEmpAux = null;
                                ContactosEmplazamientos oContEmpAux = null;

                                foreach (DataRow row in result.Tables[3].Rows)
                                {
                                    cont = cont + 1;

                                    string sCodigoEmp = "";
                                    string sOperadorEmp = "";
                                    string sEmailContacto = "";

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmp = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmp = row[1].ToString();
                                            emp = new Emplazamientos();
                                            cEmpContactos = new EmplazamientosController();
                                            emp = cEmpContactos.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmp, sOperadorEmp, cliID);

                                            if (emp == null)
                                            {
                                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": The SITE does not exist in TREE" + ": " + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                ////Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ":The site Operator " + " " + Comun.FORMATO_INCORRETO + ": " + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            ////  Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ":The code Site" + " " + Comun.FORMATO_INCORRETO + ": " + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        //// Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    //Contacto Email
                                    if (row[7].ToString() != "")
                                    {
                                        if (row[7].ToString().Contains('@'))
                                        {
                                            sEmailContacto = row[7].ToString();
                                        }
                                        else
                                        {
                                            //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": Email " + ": " + row[7].ToString() + "--" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            //// Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": Email: " + row[7].ToString() + "---El EMAIL no tiene el formato correcto, no contiene ninguna @:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ":Email" + ": " + row[7].ToString() + "--" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        ////  Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El EMAIL no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    ContactosEmplazamientos oContEmp = null;
                                    ContactosEmplazamientosController cContactosEmp = new ContactosEmplazamientosController();
                                    oContEmp = cContactosEmp.ContactoEmplazamientoByEmailContacto(sEmailContacto, emp.EmplazamientoID);

                                    if (oContEmp != null)
                                    {

                                        bActualizar = true;
                                    }
                                    else
                                    {


                                        oContEmp = new ContactosEmplazamientos();
                                        bActualizar = false;
                                    }

                                    #region GESTION CONTACTOS EMPLAZAMIENTOS

                                    // Contacto Nombre
                                    if (row[2].ToString() != "")
                                    {
                                        oContEmp.ContactoNombre = row[2].ToString();
                                    }
                                    else
                                    {
                                        //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ":The name " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        ////Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El NOMBRE no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Contacto Apelldio
                                    if (row[3].ToString() != "")
                                    {
                                        oContEmp.ContactoApellidos = row[3].ToString();
                                    }
                                    else
                                    {
                                        //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": The surname " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        ////  Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El APELLIDO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Contacto Telefono
                                    if (row[4].ToString() != "")
                                    {
                                        oContEmp.ContactoTelefono = row[4].ToString();
                                    }
                                    else
                                    {
                                        //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ":The Phone" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        //// Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": El TELEFONO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    //Telefono 2
                                    oContEmp.ContactoTelefono2 = row[5].ToString();
                                    //Telefono Movil
                                    oContEmp.ContactoMovil = row[6].ToString();
                                    //email
                                    oContEmp.ContactoEmail = sEmailContacto;


                                    // Pais
                                    if (row[8].ToString() != "")
                                    {
                                        PaisesController cPaises = new PaisesController();
                                        long contEmpPaisID = cPaises.GetPaisByNombre(row[8].ToString());
                                        if (contEmpPaisID > 0)
                                        {
                                            oContEmp.PaisID = contEmpPaisID;

                                            // Region
                                            if (row[9].ToString() != "")
                                            {
                                                RegionesPaisesController cRegiones = new RegionesPaisesController();
                                                RegionesPaises contEmpRegionPais = cRegiones.GetRegionCompletaByNombre(row[9].ToString(), contEmpPaisID);
                                                if (contEmpRegionPais != null)
                                                {
                                                    oContEmp.Region = contEmpRegionPais.RegionPais;
                                                    // Provincia
                                                    if (row[10].ToString() != "")
                                                    {
                                                        ProvinciasController cProvincias = new ProvinciasController();
                                                        Provincias contEmpProvincia = cProvincias.GetProvinciaByNombre(row[10].ToString(), contEmpRegionPais.RegionPaisID);
                                                        if (contEmpProvincia != null)
                                                        {
                                                            oContEmp.Provincia = contEmpProvincia.Provincia;
                                                            // Municipio
                                                            if (row[11].ToString() != "")
                                                            {
                                                                MunicipiosController cMunicipios = new MunicipiosController();
                                                                long contEmpMunicipioID = cMunicipios.GetMunicipioIDByNombre(row[11].ToString(), contEmpProvincia.ProvinciaID);
                                                                if (contEmpMunicipioID > 0)
                                                                {
                                                                    oContEmp.MunicipioID = contEmpMunicipioID;
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": Contact Email" + ": " + sEmailContacto + "---The Municipality " + ":" + row[11].ToString() + " does not exist in tree in said province" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                                    //// Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---El MUNICIPIO '" + row[11].ToString() + "' no existe en TREE para dicha provincia:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": Contact Email" + ": " + sEmailContacto + "---The Province " + ":" + row[10].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                            ////Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---La PROVINCIA '" + row[10].ToString() + "' no existe en TREE para dicha region pais:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": Contact Email" + ": " + sEmailContacto + "---The region country " + ":" + row[9].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                    ////Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---La REGION PAIS '" + row[9].ToString() + "' no existe en TREE para dicho pais:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": Contact Email" + ": " + sEmailContacto + "---The Country " + ":" + row[8].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            ////Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strDniCif" + ": " + sIdentificador + "---" + "ServiceImportExport.App_GlobalResources.Comun.strNoExistePais" + ":" + row[10].ToString() + " " +Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine); Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---El País '" + row[8].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }


                                    // Codigo Postal
                                    oContEmp.CP = row[12].ToString();

                                    // Direccion
                                    oContEmp.ContactoDireccion = row[13].ToString();

                                    // Observaciones
                                    oContEmp.Comentarios = row[14].ToString();

                                    // Defecto
                                    if (row[15].ToString().ToUpper() != "SI")
                                    {
                                        oContEmp.Defecto = false;
                                    }
                                    else
                                    {
                                        oContEmp.Defecto = true;
                                    }

                                    // ResponsableLegal
                                    if (row[16].ToString().ToUpper() != "SI")
                                    {
                                        oContEmp.ResponsableLegal = false;
                                    }
                                    else
                                    {
                                        oContEmp.ResponsableLegal = true;
                                    }

                                    // EsTecnico
                                    if (row[17].ToString().ToUpper() != "SI")
                                    {
                                        oContEmp.EsTecnico = false;
                                    }
                                    else
                                    {
                                        oContEmp.EsTecnico = true;
                                    }

                                    // EsComercial
                                    if (row[18].ToString().ToUpper() != "SI")
                                    {
                                        oContEmp.EsComercial = false;
                                    }
                                    else
                                    {
                                        oContEmp.EsComercial = true;
                                    }

                                    //Comprobar si solo hay uno por defecto, en caso contrario poner todos los contactos por defecto a false.
                                    cContEmpAux = new ContactosEmplazamientosController();
                                    oContEmpAux = new ContactosEmplazamientos();

                                    oContEmpAux = cContEmpAux.ContactoPorDefectoByAlquiler(emp.EmplazamientoID);

                                    if (oContEmpAux != null)
                                    {
                                        oContEmpAux.Defecto = false;
                                        cContEmpAux.UpdateItem(oContEmpAux);
                                    }


                                    if (bActualizar)
                                    {
                                        cContactosEmp.UpdateItem(oContEmp);
                                        iActualizados++;
                                    }
                                    else
                                    {
                                        // Se pone activo
                                        oContEmp.Activo = true;
                                        oContEmp.EmplazamientoID = emp.EmplazamientoID;
                                        //Agregamos
                                        cContactosEmp.AddItem(oContEmp);
                                        iCargados++;
                                    }






                                    #endregion

                                    GC.Collect();
                                }

                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": SITES CONTACTS TOTAL" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": SITES CONTACTS CHARGED" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": SITES CONTACTS UPLOADED" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": SITES CONTACTS ERROR" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": SITES CONTACTS WARNING" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23EmplazamientosContactos.EscribirLog(Comun.INFO + ": END SITES CONTACTS" + ": " + System.Environment.NewLine);



                                break;
                            #endregion

                            #region DATOS ALQUILERES

                            case 4:


                                maximo = result.Tables[4].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO CONTRATOS" + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strInicioContratos" + ": " + System.Environment.NewLine);

                                Emplazamientos empAlquiler = null;
                                EmplazamientosController cEmpAlquiler = null;

                                foreach (DataRow row in result.Tables[4].Rows)
                                {
                                    // Local variables
                                    AlquileresController cAlquileres = new AlquileresController();
                                    AlquileresController cAlquileresOriginal = new AlquileresController();
                                    Alquileres alquiler = null;
                                    Alquileres alquilerOriginal = null;
                                    EmplazamientosController cEmplazamientosAlquileres = new EmplazamientosController();
                                    //Emplazamientos emplazamientoAlquileres = null;
                                    ContratosMarcosController cMarcos = new ContratosMarcosController();
                                    ContratosMarcos marco = null;
                                    AlquileresTiposPropietariosController cAlqTiposPropietarios = new AlquileresTiposPropietariosController();
                                    AlquileresTiposPropietarios oAlqTipoPro = new AlquileresTiposPropietarios();
                                    CentroCostesController cCECO = new CentroCostesController();
                                    CentrosCostes oCECO = new CentrosCostes();

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";
                                    long tipoContrato = 0;

                                    cont = cont + 1;
                                    // Reads the client information
                                    alquiler = new Alquileres();

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoSitio" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                ////Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquilerOriginal = cAlquileresOriginal.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquilerOriginal != null && alquilerOriginal.NumContrato != null && alquilerOriginal.NumContrato != "")
                                                    {
                                                        bActualizar = true;
                                                    }
                                                    else
                                                    {
                                                        alquiler = new Alquileres();
                                                        bActualizar = false;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoNumContrato" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    ////Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoOperador" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            ////Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        ////Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoCodigoSitio" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    #region GESTION CONTRATO


                                    // Num contrato
                                    alquiler.NumContrato = sNumContrato;
                                    // Emplazamiento ID
                                    alquiler.EmplazamientoID = empAlquiler.EmplazamientoID;
                                    // Nombre del contrato
                                    alquiler.NombreContrato = row[3].ToString();
                                    // Numumero Contrato SAP
                                    alquiler.CodigoSAP = row[4].ToString();
                                    // Numero pedido
                                    alquiler.NumeroPedido = row[5].ToString();

                                    // Tipo contratación
                                    if (row[6].ToString() != "")
                                    {
                                        AlquileresTiposContratacionesController cTipoContratacion = new AlquileresTiposContratacionesController();
                                        long tipoContratacion = cTipoContratacion.GetTipoByNombreAll(row[6].ToString());

                                        if (tipoContratacion > 0)
                                        {
                                            alquiler.AlquilerTipoContratacionID = tipoContratacion;

                                            // Tipo contrato
                                            if (row[7].ToString() != "")
                                            {
                                                AlquileresTiposContratosController cTipoContratos = new AlquileresTiposContratosController();
                                                tipoContrato = cTipoContratos.GetTipoByNombreTipoContratacion(row[7].ToString(), tipoContratacion);

                                                if (tipoContrato > 0)
                                                {
                                                    alquiler.AlquilerTipoContratoID = tipoContrato;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + row[7].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    //// Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TIPO CONTRATO '" + row[7].ToString() + "' no existe en TREE para el tipo contratacion:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoTipoContrato" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                ////Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TIPO CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContratacion" + ": " + row[6].ToString() + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //// Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TIPO CONTRATACION '" + row[6].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoTipoContratacion" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //// Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TIPO CONTRATACION no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    //Tipo Propietario
                                    if (row[8].ToString() != "")
                                    {
                                        long alqTipoProID = cAlqTiposPropietarios.GetTipoByNombreAll(row[8].ToString());
                                        if (alqTipoProID > 0)
                                        {
                                            alquiler.AlquilerTipoPropietarioID = alqTipoProID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoPropietario" + ": " + row[8].ToString() + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //// Comun.cLogV23.EscribirLog(Comun.WARNING + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TIPO PROPIETARIO '" + row[8].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;
                                        }
                                    }
                                    else
                                    {
                                        alquiler.AlquilerTipoPropietarioID = null;
                                    }

                                    // Estado contrato
                                    if (row[9].ToString() != "")
                                    {
                                        AlquileresEstadosController cEstadosAlq = new AlquileresEstadosController();
                                        long estadoID = cEstadosAlq.GetEstadoByNombreAll(row[9].ToString());

                                        if (estadoID > 0)
                                        {
                                            alquiler.AlquilerEstadoID = estadoID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strEstadoContrato" + ": " + row[9].ToString() + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //// Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El ESTADO CONTRADO '" + row[9].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoEstadoContrato" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        ////Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El ESTADO CONTRADO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }



                                    // Moneda
                                    if (row[10].ToString() != "")
                                    {
                                        MonedasController cAlquileresMonedas = new MonedasController();
                                        long alquilerMonedaID = cAlquileresMonedas.GetMonedaBySimbolo(row[10].ToString());

                                        if (alquilerMonedaID > 0)
                                        {
                                            alquiler.MonedaID = alquilerMonedaID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strMoneda" + ": " + row[10].ToString() + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //// Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El SIMBOLO MONEDA '" + row[10].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoSimbolo" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //// Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El SIMBOLO MONEDA no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Sociedad Fiscal
                                    if (row[11].ToString() != "")
                                    {
                                        SociedadesController cSociedad = new SociedadesController();
                                        Sociedades sociedad = cSociedad.GetSociedadFiscalByCodigo(cliID, row[11].ToString());

                                        if (sociedad != null)
                                        {
                                            alquiler.SociedadID = sociedad.SociedadID;
                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strSociedadFiscal" + ": " + row[11].ToString() + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //// Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La SOCIEDAD FISCAL '" + row[11].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoSociedadFiscal" + ": " + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        ////Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La SOCIEDAD FISCAL no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Sociedad CECO
                                    if (row[12].ToString() != "")
                                    {
                                        SociedadesController cSociedadCECO = new SociedadesController();
                                        Sociedades sociedadCECO = cSociedadCECO.GetSociedadCECOByCodigo(cliID, row[12].ToString());

                                        if (sociedadCECO != null)
                                        {
                                            //No se guarda la sociedad CECO, por que no es necesario ya que el CECO tiene una unica Sociedad CECO
                                            //CECO
                                            if (row[13].ToString() != "")
                                            {
                                                oCECO = cCECO.GetItem("CentroCoste==\"" + row[13].ToString() + "\"");
                                                if (oCECO != null)
                                                {
                                                    alquiler.CentroCosteID = oCECO.CentroCosteID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El CECO '" + row[13].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El CECO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La SOCIEDAD CECO '" + row[12].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La SOCIEDAD CECO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Clases de activo del contrato
                                    if (row[14].ToString() != "")
                                    {
                                        AlquileresClasesActivosController cClase = new AlquileresClasesActivosController();
                                        AlquileresClasesActivos clase = cClase.GetActivoByCodigo(row[14].ToString());

                                        if (clase != null)
                                        {
                                            alquiler.AlquilerClaseActivoID = clase.AlquilerClaseActivoID;
                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CLASE ACTIVO '" + row[14].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CLASE ACTIVO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Grupo autorizacion
                                    if (row[15].ToString() != "")
                                    {
                                        GruposAutorizacionesController cGrupoAutorizacion = new GruposAutorizacionesController();
                                        GruposAutorizaciones autorizacion = cGrupoAutorizacion.GetGrupoAutorizacionByNombre(row[15].ToString());

                                        if (autorizacion != null)
                                        {
                                            alquiler.GrupoAutorizacionID = autorizacion.GrupoAutorizacionID;
                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El GRUPO AUTORIZACION '" + row[15].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El GRUPO AUTORIZACION no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Contrato marco
                                    if (row[16].ToString() != "")
                                    {
                                        marco = cMarcos.GetContratoMarcoByNumContrato(row[16].ToString());
                                        if (marco != null)
                                        {
                                            alquiler.ContratoMarcoID = marco.ContratoMarcoID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.WARNING + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El CONTRATO MARCO '" + row[16].ToString() + "' no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;
                                        }
                                    }
                                    else
                                    {
                                        alquiler.ContratoMarcoID = null;
                                    }


                                    // Fecha Firma Contrato
                                    if (row[17].ToString() != "")
                                    {
                                        try
                                        {
                                            DateTime dFechaFirmaContrato = Convert.ToDateTime(row[17].ToString());
                                            alquiler.FechaFirmaContrato = dFechaFirmaContrato;

                                            //Fecha Inicio Contrato
                                            if (row[18].ToString() != "")
                                            {
                                                try
                                                {
                                                    DateTime dFechaInicioContrato = Convert.ToDateTime(row[18].ToString());
                                                    alquiler.FechaInicioContrato = dFechaInicioContrato;
                                                    if (dFechaFirmaContrato <= dFechaInicioContrato)
                                                    {
                                                        //Fecha Fin Contrato
                                                        if (row[19].ToString() != "")
                                                        {
                                                            try
                                                            {
                                                                DateTime dFechaFinContrato = Convert.ToDateTime(row[19].ToString());
                                                                alquiler.FechaFinContrato = dFechaFinContrato;
                                                                //Datos que se ponen de forma automatica sin necesidad de cargarlos en el excel
                                                                alquiler.FechaFinContratoAuxiliar = dFechaFinContrato;
                                                                alquiler.ProrrogasConsumidas = 0;

                                                                if (dFechaInicioContrato > dFechaFinContrato)
                                                                {
                                                                    //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA INICIO CONTRATO no puede ser superior a la FECHA FIN CONTRATO:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA FIN CONTRATO '" + row[19].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                                //Comun.cLogV23.EscribirLog("Fecha Fin Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }


                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA FIN CONTRATO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA FIRMA CONTRATO no puede ser superior a la FECHA INICIO CONTRATO:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA INICIO CONTRATO '" + row[18].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("Fecha Inicio Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA INICIO CONTRATO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        catch (Exception ex)
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA FIRMA CONTRATO '" + row[17].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Fecha Firma Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA FIRMA CONTRATO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Fecha Regeneración de previsiones
                                    if (row[20].ToString() != "")
                                    {
                                        try
                                        {
                                            alquiler.FechaRegeneracionPrevisiones = Convert.ToDateTime(row[20].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA REGENERACION PREVISIONES '" + row[20].ToString() + "' no tiene el formato correcto:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Fecha Regeneracion Previsiones: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                            iWarning++;
                                        }

                                    }
                                    else
                                    {
                                        alquiler.FechaRegeneracionPrevisiones = null;
                                    }

                                    // Riesgos
                                    alquiler.Riesgos = row[21].ToString();

                                    //Codigo Torrero
                                    alquiler.CodigoTorrero = row[22].ToString();

                                    //Codigo Operador Compartido
                                    alquiler.CodigoOperadorCompartido = row[23].ToString();

                                    //Aplica recurrencia a prorroga
                                    if (row[24].ToString().ToUpper() != "SI")
                                    {
                                        alquiler.AplicaRecurrenciaProrrogas = false;
                                    }
                                    else
                                    {
                                        alquiler.AplicaRecurrenciaProrrogas = true;
                                    }


                                    // Fecha Vencimiento
                                    if (row[25].ToString() != "")
                                    {
                                        try
                                        {
                                            alquiler.FechaVencimiento = Convert.ToDateTime(row[25].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA VENCIMIENTO '" + row[25].ToString() + "' no tiene el formato correcto:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Fecha Vencimiento: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                            iWarning++;
                                        }

                                    }
                                    else
                                    {
                                        alquiler.FechaVencimiento = null;
                                    }
                                    // Nemonico
                                    alquiler.Nemonico = row[26].ToString();
                                    // Codigo de proyecto
                                    alquiler.CodigoProyecto = row[27].ToString();
                                    // Condiciones Especiales
                                    alquiler.CondicionesEspeciales = row[28].ToString();
                                    // Observaciones
                                    alquiler.ComentariosGenerales = row[29].ToString();

                                    // Importe Alquiler Base Inicial
                                    if (row[30].ToString() != "")
                                    {
                                        try
                                        {
                                            alquiler.ImporteAlquilerBaseInicial = Convert.ToDouble(row[30].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El IMPORTE ALQUILER BASE INICIAL '" + row[30].ToString() + "' no tiene el formato correcto:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Importe Alquiler Base Inicial: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                            iWarning++;
                                        }

                                    }
                                    else
                                    {
                                        alquiler.ImporteAlquilerBaseInicial = null;
                                    }

                                    // Condiciones Pagos
                                    alquiler.CondicionesPago = row[31].ToString();

                                    // Clase Contrato SAP
                                    if (row[32].ToString() != "")
                                    {
                                        AlquileresTiposContratosSAPController cAlqTiposContratosSAP = new AlquileresTiposContratosSAPController();
                                        AlquileresTiposContratosSAP oAlqTiposContratosSAP = cAlqTiposContratosSAP.GetTiposContratosSAPbyCodigo(row[32].ToString());

                                        if (oAlqTiposContratosSAP != null)
                                        {
                                            //Comprobamos que el tipo de contrato sap pertenezca al tipo contrato
                                            AlquileresTiposContratosController cAllTipoContrato = new AlquileresTiposContratosController();
                                            AlquileresTiposContratos oAlqTipoContrato = new AlquileresTiposContratos();

                                            oAlqTipoContrato = cAllTipoContrato.GetItem(tipoContrato);
                                            if (oAlqTipoContrato != null)
                                            {
                                                if (oAlqTipoContrato.AlquilerTipoContratoSAPID != oAlqTiposContratosSAP.AlquilerTipoContratoSAPID)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CLASE CONTRATO SAP '" + row[32].ToString() + "' no esta vinculado con el tipo de contrato indicado:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }

                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CLASE CONTRATO SAP '" + row[32].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CLASE CONTRATO SAP no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    //Posibilidad de Subarriendo
                                    if (row[33].ToString().ToUpper() != "SI")
                                    {
                                        alquiler.PosibilidadSubarrendar = false;
                                    }
                                    else
                                    {
                                        alquiler.PosibilidadSubarrendar = true;
                                    }

                                    //Alquieler Indefinido o Perpetuo
                                    if (row[34].ToString().ToUpper() != "SI")
                                    {
                                        alquiler.AlquilerIndefinido = false;
                                    }
                                    else
                                    {
                                        alquiler.AlquilerIndefinido = true;
                                        //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                        //Comun.cLogV23.EscribirLog(Comun.WARNING + ": Para el Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---es recomendable tener cláusula de rescisión ya que el contrato es indefinido" + System.Environment.NewLine);
                                        iWarning++;
                                        continue;
                                    }

                                    //Expirar a vencimiento
                                    if (row[35].ToString().ToUpper() != "SI")
                                    {
                                        alquiler.ExpirarAVencimiento = false;
                                    }
                                    else
                                    {
                                        alquiler.ExpirarAVencimiento = true;
                                    }

                                    // ID Edificio
                                    if (row[36].ToString() != "")
                                    {
                                        alquiler.IDEdificio = row[35].ToString();
                                    }
                                    else
                                    {
                                        alquiler.IDEdificio = "";
                                    }

                                    // Objeto de Contrato
                                    if (row[37].ToString() != "")
                                    {
                                        alquiler.ObjetoContrato = row[36].ToString();
                                    }
                                    else
                                    {
                                        alquiler.ObjetoContrato = "";
                                    }

                                    // Portafolio
                                    if (row[38].ToString() != "")
                                    {
                                        GlobalEmplazamientosPortafolios portafolio = null;
                                        GlobalEmplazamientosPortafoliosController cPortafolios = new GlobalEmplazamientosPortafoliosController();
                                        portafolio = cPortafolios.GetPortafolioByNombre(row[38].ToString());

                                        if (portafolio != null)
                                        {
                                            alquiler.GlobalEmplazamientoPortafolioID = portafolio.GlobalEmplazamientoPortafolioID;
                                        }
                                        else
                                        {
                                            alquiler.GlobalEmplazamientoPortafolioID = null;
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.WARNING + ": No existe el portafolio " + row[38].ToString() + " " + System.Environment.NewLine);
                                            iWarning++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        alquiler.GlobalEmplazamientoPortafolioID = null;
                                    }


                                    ////////////////////////////


                                    // Creates the mandatory values by default
                                    alquiler.ImplicaDeuda = false;
                                    alquiler.Propietario = "";
                                    alquiler.TotalContrato = 0;
                                    alquiler.TotalContratoEfectivo = 0;
                                    alquiler.TotalDeudaAnual = 0;
                                    alquiler.TotalDeudaContrato = 0;
                                    alquiler.TotalDeudaEfectiva = 0;
                                    alquiler.DatosEnSAP = false;
                                    alquiler.UltimaCominicacionSAPErronea = false;
                                    alquiler.Renta = 0;
                                    alquiler.ImporteOtrosGastos = 0;
                                    alquiler.ImportePagoInicial = 0;
                                    alquiler.ImporteFianza = 0;


                                    #endregion

                                    if (bActualizar)
                                    {
                                        bool bRealizadaActu = false;
                                        bRealizadaActu = cAlquileres.UpdateItem(alquiler);

                                        if (bRealizadaActu)
                                        {
                                            bActualizarEmplazamiento = true;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.WARNING + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El alquiler NO se actualizó correctamente:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        iActualizados++;
                                    }
                                    else
                                    {
                                        // Adds the contract
                                        alquiler.EmplazamientoID = empAlquiler.EmplazamientoID;
                                        alquiler = cAlquileres.AddItem(alquiler);

                                        if (alquiler != null)
                                        {
                                            bActualizarEmplazamiento = true;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoNumeroContrato" + sCodigoEmpAlq + "/" + sNumContrato + "--" + "ServiceImportExport.App_GlobalResources.Comun.strTipoContrato" + ": " + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteTipoContrato" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog(Comun.WARNING + ":  Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El alquiler NO se agregó correctamente:" + Comun.ERROR_NO_CREADO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        iCargados++;

                                    }

                                    if (bActualizarEmplazamiento)
                                    {

                                        #region ACTUALIZAR EMPLAZAMIENTOS

                                        EmplazamientosController cEmpAlquileres = new EmplazamientosController();
                                        AlquileresController cAlquileresAux = new AlquileresController();
                                        Emplazamientos oEmpAlquileres = new Emplazamientos();
                                        List<Alquileres> lAlquileresAux = new List<Alquileres>();

                                        oEmpAlquileres = cEmpAlquileres.GetItem(alquiler.EmplazamientoID);


                                        double? sumaImporteFianza = 0;
                                        double? sumaRenta = 0;
                                        double? sumaImporteAlq = 0;
                                        double? sumaOtrosGastos = 0;
                                        double? sumaImporteSus = 0;
                                        double? sumaPagoInicial = 0;
                                        double? sumaCosteElectrica = 0;
                                        double? sumaImportePlus = 0;
                                        double? sumaGastosComunes = 0;
                                        double? sumaCosteElectricaMes = 0;
                                        lAlquileresAux = cAlquileresAux.GetAlquileres(alquiler.EmplazamientoID);
                                        if (lAlquileresAux != null)
                                        {
                                            foreach (Alquileres c in lAlquileresAux)
                                            {
                                                sumaImporteFianza = sumaImporteFianza + c.ImporteFianza;
                                                sumaRenta = sumaRenta + c.Renta;
                                                sumaImporteAlq = sumaImporteAlq + c.ImporteAlquilerBase;
                                                sumaOtrosGastos = sumaOtrosGastos + c.ImporteOtrosGastos;
                                                sumaImporteSus = sumaImporteSus + c.ImporteSustInfraest;
                                                sumaPagoInicial = sumaPagoInicial + c.ImportePagoInicial;
                                                sumaCosteElectrica = sumaCosteElectrica + c.CosteElectrico;
                                                sumaImportePlus = sumaImportePlus + c.ImportePlusEstrategico;
                                                sumaGastosComunes = sumaGastosComunes + c.GastosComunes;
                                                sumaCosteElectricaMes = sumaCosteElectricaMes + c.CosteElectricoMensual;

                                            }
                                            oEmpAlquileres.ImporteFianza = sumaImporteFianza;
                                            oEmpAlquileres.RentaInicialImporteAnual = Convert.ToDouble(sumaRenta);
                                            oEmpAlquileres.ImporteAlquilerBase = sumaImporteAlq;
                                            oEmpAlquileres.ImporteOtrosGastos = sumaOtrosGastos;
                                            oEmpAlquileres.ImporteSustInfraest = sumaImporteSus;
                                            oEmpAlquileres.ImportePlusEstrategico = sumaImportePlus;
                                            oEmpAlquileres.ImportePagoInicial = sumaPagoInicial;
                                            oEmpAlquileres.CosteElectrico = sumaCosteElectrica;
                                            oEmpAlquileres.CodigoTorrero = alquiler.CodigoTorrero;

                                            if (lAlquileresAux.Count > 0)
                                            {
                                                oEmpAlquileres.NumContratoSitio = lAlquileresAux.Count.ToString();
                                            }

                                            cEmpAlquileres.UpdateItem(oEmpAlquileres);

                                            //Actualizar el TotalRenegociable después de modificados los valores de renta:
                                            oEmpAlquileres.TotalRenegociable = cEmpAlquileres.actualizarTotalRenegociable(oEmpAlquileres.EmplazamientoID);
                                            oEmpAlquileres.TotalAreaRenegociable = cEmpAlquileres.actualizarTotalAreaRenegociable(oEmpAlquileres.EmplazamientoID);
                                            oEmpAlquileres.TotalValorAreaRenegociable = cEmpAlquileres.actualizarTotalValorAreaRenegociable(oEmpAlquileres.EmplazamientoID);
                                            cEmpAlquileres.UpdateItem(oEmpAlquileres);

                                        }

                                        #endregion
                                    }




                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContratoTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContratosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContratosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContratosErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContratosCargados" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinContratos" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTRATOS TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTRATOS CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTRATOS ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTRATOS ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTRATOS CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN CONTRATOS" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region CONCEPTOS
                            case 5:


                                maximo = result.Tables[5].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                bActualizarConceptos = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO CONCEPTOS" + System.Environment.NewLine);

                                Emplazamientos oEmpAlqConcepto = null;
                                EmplazamientosController cEmpAlqConcepto = null;

                                foreach (DataRow row in result.Tables[5].Rows)
                                {

                                    cont = cont + 1;

                                    // Alquileres detalles
                                    Alquileres alquiler = null;
                                    AlquileresController cAlquileres = new AlquileresController();
                                    EmplazamientosController cEmplazamiento = new EmplazamientosController();
                                    //Emplazamientos emplazamientoConcepto = null;
                                    AlquileresDetallesCamposAdicionales alquilerDetalleCamposAdicionales = new AlquileresDetallesCamposAdicionales();
                                    //AlquileresDetallesCamposAdicionales alquilerDetalleCamposAdicionalesOriginal = null;
                                    AlquileresDetallesCamposAdicionalesController cAlqDetCamAd = new AlquileresDetallesCamposAdicionalesController();

                                    //Alquileres Conceptos
                                    AlquileresConceptosController cConceptos = new AlquileresConceptosController();
                                    AlquileresConceptos concepto = new AlquileresConceptos();

                                    //Centros de Coste
                                    CentroCostesController cCECOCon = new CentroCostesController();
                                    CentrosCostes oCECOCon = new CentrosCostes();

                                    // Alquileres detalles
                                    AlquileresDetalles detalle = null;
                                    AlquileresDetallesController cDetalles = new AlquileresDetallesController();
                                    string sCodigoEmpAlqCon = "";
                                    string sOperadorEmpAlqCon = "";
                                    string sNumContratoCon = "";
                                    string sConceptoID = "";
                                    long conceptoID = 0;
                                    DateTime dFechaPrimerPago = new DateTime();
                                    DateTime dFechaProximoPago = new DateTime();
                                    DateTime dFechaUltimoPago = new DateTime();
                                    DateTime dFechaPrimerRevision = new DateTime();
                                    DateTime dFechaProximoRevision = new DateTime();
                                    DateTime dFechaUltimaRevision = new DateTime();
                                    DateTime dFechaUso = new DateTime();
                                    DateTime dFechaUltimoUso = new DateTime();
                                    int iDesplazamiento = 0;
                                    int iPeriodicidad = 0;
                                    double dImporte = 0;
                                    Meses cMeses = new Meses();
                                    int mesesPagos = 0;
                                    bool bTieneAjuste = false;
                                    //int numCuotas = 0;
                                    //double dTotalConceptoContrato = 0;

                                    bActualizarEmplazamiento = false;

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlqCon = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlqCon = row[1].ToString();
                                            oEmpAlqConcepto = new Emplazamientos();
                                            cEmpAlqConcepto = new EmplazamientosController();
                                            oEmpAlqConcepto = cEmpAlqConcepto.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlqCon, sOperadorEmpAlqCon, cliID);

                                            if (oEmpAlqConcepto == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContratoCon = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContratoCon, oEmpAlqConcepto.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {
                                                        if (row[3].ToString() != "")
                                                        {
                                                            try
                                                            {
                                                                sConceptoID = row[3].ToString();
                                                                conceptoID = Convert.ToInt64(sConceptoID);

                                                                if (conceptoID < Comun.CONCEPTO_ID_MAX)
                                                                {
                                                                    detalle = cDetalles.GetDetallesByCodigo(conceptoID.ToString(), alquiler.AlquilerID);
                                                                    if (detalle != null)
                                                                    {
                                                                        bActualizar = true;
                                                                        alquilerDetalleCamposAdicionales = cAlqDetCamAd.GetItem("AlquilerDetalleID == " + detalle.AlquilerDetalleID);
                                                                        if (alquilerDetalleCamposAdicionales != null)
                                                                        {
                                                                            bActualizarConceptos = true;
                                                                        }
                                                                        else
                                                                        {
                                                                            bActualizarConceptos = false;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        // Creates a new detail
                                                                        detalle = new AlquileresDetalles();
                                                                        bActualizar = false;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El CONCEPTO ID '" + sConceptoID + "' no puede ser superior al numero:" + Comun.CONCEPTO_ID_MAX + "_" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }




                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El CONCEPTO ID '" + sConceptoID + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                //Comun.cLogV23.EscribirLog("Concepto ID: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }


                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ID CONCEPTO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }


                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlqCon + "/" + sOperadorEmpAlqCon + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion


                                    #region GESTION CONCEPTO

                                    // AlquilerID
                                    //detalle.AlquilerID = alquiler.AlquilerID;

                                    // Codigo
                                    detalle.CodigoDetalle = conceptoID.ToString();

                                    //Codigo Concepto (Clase de condicion)
                                    if (row[4].ToString() != "")
                                    {
                                        cConceptos = new AlquileresConceptosController();
                                        concepto = cConceptos.GetConceptosByNombre(row[4].ToString());
                                        if (concepto != null)
                                        {
                                            detalle.AlquilerConceptoID = concepto.AlquilerConceptoID;

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El NOMBRE CONCEPTO '" + row[4].ToString() + "' no existe en TREE_" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NOMBRE CONCEPTO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Valor (Importe)
                                    if (row[5].ToString() != "")
                                    {
                                        try
                                        {
                                            string sCadenaImporte = "";
                                            dImporte = 0;

                                            sCadenaImporte = row[5].ToString();

                                            if (sCadenaImporte.Contains(','))
                                            {
                                                sCadenaImporte = sCadenaImporte.Replace(',', '.');
                                            }

                                            try
                                            {
                                                dImporte = Convert.ToDouble(sCadenaImporte, System.Globalization.CultureInfo.InvariantCulture);
                                                detalle.Importe = dImporte;
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El VALOR '" + sCadenaImporte + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Valor: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }


                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog("Importe: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                            detalle.Importe = 0;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El VALOR no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Periodicidad
                                    if (row[6].ToString() != "")
                                    {
                                        try
                                        {
                                            iPeriodicidad = Convert.ToInt32(row[6].ToString());
                                            detalle.Periodicidad = iPeriodicidad;
                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La PERIODICIDAD '" + row[6].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Periodicidad: " + "V23" + " Exception Code 100" + Comun.NuevaLinea); iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La PERIOCIDAD no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Calculos intermedios
                                    if (iPeriodicidad > 0)
                                    {
                                        detalle.ImporteMensual = detalle.Importe / detalle.Periodicidad;
                                        detalle.ImporteAnual = detalle.Importe * 12 / detalle.Periodicidad;
                                    }
                                    else
                                    {
                                        detalle.ImporteMensual = 0;
                                        detalle.ImporteAnual = 0;
                                    }

                                    // Periodicidad Pagos
                                    if (row[7].ToString() != "")
                                    {
                                        try
                                        {
                                            int iPeriodicidadPago = Convert.ToInt32(row[7].ToString());

                                            if (detalle.Periodicidad <= iPeriodicidadPago)
                                            {

                                                detalle.PeriodicidadPago = iPeriodicidadPago;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La PERIODICIDAD PAGO '" + row[7].ToString() + "' no puede ser menor que la periodicidad:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                continue;
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La PERIODICIDAD PAGO '" + row[7].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Periodicidad: " + "V23" + " Exception Code 100" + Comun.NuevaLinea); iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---: La PERIODICIDAD PAGO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Moneda
                                    if (row[8].ToString() != "")
                                    {
                                        MonedasController cConceptosMonedas = new MonedasController();
                                        long conceptoMonedaID = cConceptosMonedas.GetMonedaBySimbolo(row[8].ToString());

                                        if (conceptoMonedaID > 0)
                                        {
                                            detalle.MonedaID = conceptoMonedaID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El SIMBOLO MONEDA '" + row[8].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El SIMBOLO MONEDA no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Descripcion Conceptos
                                    if (row[9].ToString() != "")
                                    {

                                        detalle.Descripcion = row[9].ToString();
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La DESCRIPCION CONCEPTO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    #region FECHAS CONCEPTOS

                                    // Fecha Primer Pago
                                    if (row[10].ToString() != "")
                                    {
                                        try
                                        {
                                            dFechaPrimerPago = Convert.ToDateTime(row[10].ToString());
                                            detalle.FechaPrimerPago = dFechaPrimerPago;
                                            //Fecha Proximo Pago
                                            if (row[11].ToString() != "")
                                            {
                                                try
                                                {
                                                    dFechaProximoPago = Convert.ToDateTime(row[11].ToString());


                                                    if (dFechaPrimerPago <= dFechaProximoPago)
                                                    {
                                                        detalle.FechaProximoPago = dFechaProximoPago;

                                                        //Fecha Ultimo Pago
                                                        if (row[12].ToString() != "")
                                                        {
                                                            try
                                                            {
                                                                dFechaUltimoPago = Convert.ToDateTime(row[12].ToString());

                                                                if (dFechaProximoPago <= dFechaUltimoPago)
                                                                {
                                                                    detalle.FechaUltimoPago = dFechaUltimoPago;
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PROXIMO PAGO '" + row[11].ToString() + "' tiene que ser menor o igual que la fecha ultimo pago:" + row[12].ToString() + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }

                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA ULTIMO PAGO '" + row[12].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                //Comun.cLogV23.EscribirLog("Fecha Ultimo pago: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + ": La FECHA ULTIMO PAGO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PRIMER PAGO '" + row[10].ToString() + "' tiene que ser menor o igual que la fecha proximo pago:" + row[11].ToString() + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PROXIMO PAGO '" + row[11].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("Fecha Proximo pago: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + ": La FECHA PROXIMO PAGO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }


                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PRIMER PAGO '" + row[10].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Fecha Primer pago: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                            iErrores++;
                                            continue;
                                        }

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + ": La FECHA PRIMER PAGO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    //En el caso que sea fianza o pago unico las fechas de proximo pago y ultimo pago son las mismas que las de primer pago
                                    if (concepto.EsFianza || concepto.EsPagoUnico)
                                    {
                                        detalle.FechaProximoPago = dFechaPrimerPago;
                                        detalle.FechaUltimoPago = dFechaPrimerPago;
                                    }

                                    //Desplazamiento
                                    if (row[13].ToString() != "")
                                    {
                                        try
                                        {
                                            iDesplazamiento = Convert.ToInt32(row[13].ToString());
                                            if (iDesplazamiento != 0)
                                            {
                                                detalle.DesplazamientoFechaVigencia = iDesplazamiento;
                                                dFechaUso = detalle.FechaPrimerPago.AddDays(iDesplazamiento);
                                                detalle.FechaUso = dFechaUso;
                                            }
                                            else
                                            {
                                                detalle.DesplazamientoFechaVigencia = 0;
                                                detalle.FechaUso = detalle.FechaPrimerPago;
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El DESPLAZAMIENTO '" + row[13].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Desplazamiento: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El DESPLAZAMIENTO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    #endregion

                                    #region CALCULOS TOTAL CONCEPTO Y CUOTAS

                                    if (iPeriodicidad > 0)
                                    {
                                        //Modificacion para el calculo de cuotas.

                                        mesesPagos = 0;
                                        if (detalle.FechaUltimoPago.Year > 0 && detalle.Periodicidad > 0 && detalle.FechaPrimerPago.Year > 0)
                                        {
                                            if (detalle.FechaUltimoPago.Year == detalle.FechaPrimerPago.Year && detalle.FechaUltimoPago.Month == detalle.FechaPrimerPago.Month)
                                            {
                                                mesesPagos = 0;
                                                detalle.NumeroCuotas = (mesesPagos / detalle.Periodicidad) + 1;
                                            }
                                            else
                                            {
                                                mesesPagos = cMeses.GetMonthDiff2(detalle.FechaPrimerPago, detalle.FechaUltimoPago);


                                                if (mesesPagos % detalle.Periodicidad > 0)
                                                {
                                                    detalle.NumeroCuotas = (mesesPagos / detalle.Periodicidad) + 1;
                                                }
                                                else
                                                {
                                                    detalle.NumeroCuotas = (mesesPagos / detalle.Periodicidad);
                                                }
                                            }
                                        }
                                        //int iMeses = mes.GetMonthDiff(detalle.FechaPrimerPago, detalle.FechaUltimoPago);
                                        //double dCuota = iMeses / detalle.Periodicidad;
                                        int iCuota = detalle.NumeroCuotas;
                                        //detalle.NumeroCuotas = iCuota;
                                        detalle.TotalImporte = iCuota * detalle.Importe;
                                        detalle.TotalImpuestos = 0;
                                        detalle.TotalConceptoContrato = iCuota * detalle.Importe;

                                    }
                                    else
                                    {
                                        //AHP: Se ha modificado para que siempre tenga una cuota.
                                        detalle.NumeroCuotas = 1;
                                        detalle.TotalImporte = detalle.Importe;
                                        detalle.TotalImpuestos = 0;
                                        detalle.TotalConceptoContrato = detalle.Importe;

                                    }

                                    #endregion

                                    // Cuenta Contable Renta
                                    if (row[14].ToString() != "")
                                    {

                                        detalle.CuentaContableIngresoGasto = row[14].ToString();
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La CUENTA CONTABLE RENTA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Cuenta Contable Activo
                                    detalle.CuentaContableActivo = row[15].ToString();



                                    // Sociedad Fiscal
                                    if (row[16].ToString() != "")
                                    {
                                        SociedadesController cSociedadCon = new SociedadesController();
                                        Sociedades sociedadCon = cSociedadCon.GetSociedadFiscalByCodigo(cliID, row[16].ToString());

                                        if (sociedadCon != null)
                                        {
                                            detalle.SociedadID = sociedadCon.SociedadID;
                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La SOCIEDAD FISCAL '" + row[16].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La SOCIEDAD FISCAL no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Sociedad CECO
                                    if (row[17].ToString() != "")
                                    {
                                        SociedadesController cSociedadCECOCon = new SociedadesController();
                                        Sociedades sociedadCECOCon = cSociedadCECOCon.GetSociedadCECOByCodigo(cliID, row[17].ToString());

                                        if (sociedadCECOCon != null)
                                        {
                                            //No se guarda la sociedad CECO, por que no es necesario ya que el CECO tiene una unica Sociedad CECO
                                            //CECO
                                            if (row[18].ToString() != "")
                                            {
                                                oCECOCon = cCECOCon.GetItem("CentroCoste==\"" + row[18].ToString() + "\"");
                                                if (oCECOCon != null)
                                                {
                                                    detalle.CentroCosteID = oCECOCon.CentroCosteID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El CECO '" + row[18].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El CECO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {

                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La SOCIEDAD CECO '" + row[17].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La SOCIEDAD CECO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Area funcional
                                    if (row[19].ToString() != "")
                                    {
                                        AreasFuncionalesController cArea = new AreasFuncionalesController();
                                        AreasFuncionales area = cArea.GetAreaFuncionalByNombre(row[19].ToString());
                                        if (area != null)
                                        {
                                            detalle.AreaFuncionalID = area.AreaFuncionalID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El AREA FUNCIONAL '" + row[19].ToString() + "' no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;

                                        }
                                    }

                                    //Codgio SAP
                                    detalle.CodigoSAP = row[20].ToString();
                                    // Observaciones
                                    detalle.Observaciones = row[21].ToString();

                                    #region AJUSTES

                                    // Ajustes
                                    // Sin incremento
                                    if (row[22].ToString().ToUpper() != "SI" && row[22].ToString().ToUpper() != "TRUE")
                                    {
                                        bTieneAjuste = true;
                                        #region INDICE REAJUSTE

                                        //Indice Reajuste
                                        if (row[23].ToString().ToUpper() == "SI" || row[23].ToString().ToUpper() == "TRUE")
                                        {
                                            //Nombre Indice Reajuste
                                            if (row[28].ToString() != "")
                                            {
                                                InflacionesController cInflaciones = new InflacionesController();
                                                Inflaciones infla = null;

                                                try
                                                {

                                                    infla = cInflaciones.ObtenerInflacionCrear(row[28].ToString(), oEmpAlqConcepto.PaisID);
                                                    detalle.InflacionID = infla.InflacionID;

                                                    //Tipo Indice Reajuste (Anual,Trimestral, etc...) El codigo
                                                    if (row[29].ToString() != "")
                                                    {
                                                        try
                                                        {
                                                            InflacionesAplicacionesTiposController cInflacionesAplicacionesTipos = new InflacionesAplicacionesTiposController();
                                                            InflacionesAplicacionesTipos oInflAmpliTipos = new InflacionesAplicacionesTipos();

                                                            oInflAmpliTipos = cInflacionesAplicacionesTipos.GetItem("Codigo==\"" + row[29].ToString() + "\"");

                                                            if (oInflAmpliTipos != null)
                                                            {
                                                                detalle.InflacionAplicacionTipoID = oInflAmpliTipos.InflacionAplicacionTipoID;
                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE (CODIGO) '" + row[29].ToString() + "' no se encuentra en TREE:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }

                                                            //double dInflaInicial = Convert.ToDouble(row[29].ToString());

                                                            //detalle.InflacionInicial = dInflaInicial;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE '" + row[29].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                            //Comun.cLogV23.EscribirLog("Tipo Indicie Reajuste: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog("Inflacion: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El NOMBRE INDICE REAJUSTE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        #endregion

                                        #region INDICE REAJUSTE + %ADICIONAL

                                        //Indice Reajuste + %Adicional
                                        if (row[24].ToString().ToUpper() == "SI" || row[24].ToString().ToUpper() == "TRUE")
                                        {
                                            //Nombre Indice Reajuste
                                            if (row[28].ToString() != "")
                                            {
                                                InflacionesController cInflaciones = new InflacionesController();
                                                Inflaciones infla = null;

                                                try
                                                {

                                                    infla = cInflaciones.ObtenerInflacionCrear(row[28].ToString(), oEmpAlqConcepto.PaisID);
                                                    detalle.InflacionID = infla.InflacionID;

                                                    //Tipo Indice Reajuste
                                                    if (row[29].ToString() != "")
                                                    {
                                                        try
                                                        {

                                                            double dInflaInicial = Convert.ToDouble(row[29].ToString());

                                                            detalle.InflacionInicial = dInflaInicial;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE '" + row[29].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                            //Comun.cLogV23.EscribirLog("Tipo Indicie Reajuste: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog("Inflacion: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El NOMBRE INDICE REAJUSTE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            //%Adicional
                                            if (row[31].ToString() != "")
                                            {
                                                string sCadena = "";
                                                double dDouble = 0;

                                                sCadena = row[31].ToString();

                                                if (sCadena.Contains(','))
                                                {
                                                    sCadena = sCadena.Replace(',', '.');
                                                }

                                                try
                                                {
                                                    dDouble = Convert.ToDouble(sCadena, System.Globalization.CultureInfo.InvariantCulture);
                                                    detalle.DiferencialAdicional = dDouble;
                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El %ADICIONAL '" + row[31].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("%Adicional: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El % ADICIONAL no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }

                                        #endregion

                                        #region %FIJO

                                        //%FIJO
                                        if (row[25].ToString().ToUpper() == "SI" || row[25].ToString().ToUpper() == "TRUE")
                                        {
                                            if (row[32].ToString() != "")
                                            {
                                                string sCadena = "";
                                                double dDouble = 0;

                                                sCadena = row[32].ToString();

                                                if (sCadena.Contains(','))
                                                {
                                                    sCadena = sCadena.Replace(',', '.');
                                                }

                                                try
                                                {
                                                    dDouble = Convert.ToDouble(sCadena, System.Globalization.CultureInfo.InvariantCulture);

                                                    detalle.PorcentajeFijo = dDouble;
                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El %FIJO '" + row[32].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("%FIJO: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                    iErrores++;
                                                    continue;
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El %FIJO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }

                                        #endregion

                                        #region VALOR FIJO

                                        if (row[26].ToString().ToUpper() == "SI" || row[26].ToString().ToUpper() == "TRUE")
                                        {
                                            if (row[33].ToString() != "")
                                            {
                                                string sCadena = "";
                                                double dDouble = 0;

                                                sCadena = row[33].ToString();

                                                if (sCadena.Contains(','))
                                                {
                                                    sCadena = sCadena.Replace(',', '.');
                                                }

                                                try
                                                {
                                                    dDouble = Convert.ToDouble(sCadena, System.Globalization.CultureInfo.InvariantCulture);
                                                    detalle.CantidadFija = dDouble;
                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El VALOR FIJO '" + row[33].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("Valor Fijo: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                    iErrores++;
                                                    continue;
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El VALOR FIJO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }

                                        #endregion

                                        #region % x INDICE DE REAJUSTE

                                        if (row[27].ToString().ToUpper() == "SI" || row[27].ToString().ToUpper() == "TRUE")
                                        {
                                            //Nombre Indice Reajuste
                                            if (row[28].ToString() != "")
                                            {
                                                InflacionesController cInflaciones = new InflacionesController();
                                                Inflaciones infla = null;

                                                try
                                                {

                                                    infla = cInflaciones.ObtenerInflacionCrear(row[28].ToString(), oEmpAlqConcepto.PaisID);
                                                    detalle.InflacionID = infla.InflacionID;

                                                    //Tipo Indice Reajuste
                                                    if (row[29].ToString() != "")
                                                    {
                                                        try
                                                        {

                                                            double dInflaInicial = Convert.ToDouble(row[29].ToString());

                                                            detalle.InflacionInicial = dInflaInicial;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE '" + row[29].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                            //Comun.cLogV23.EscribirLog("Tipo Indicie Reajuste: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El TIPO INDICE REAJUSTE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog("Inflacion: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El NOMBRE INDICE REAJUSTE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }

                                        //%FIJO
                                        if (row[32].ToString() != "")
                                        {
                                            string sCadena = "";
                                            double dDouble = 0;

                                            sCadena = row[32].ToString();

                                            if (sCadena.Contains(','))
                                            {
                                                sCadena = sCadena.Replace(',', '.');
                                            }

                                            try
                                            {
                                                dDouble = Convert.ToDouble(sCadena, System.Globalization.CultureInfo.InvariantCulture);

                                                detalle.InflacionPorcentaje = dDouble;
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El %FIJO '" + row[32].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("%FIJO: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                iErrores++;
                                                continue;
                                            }


                                        }
                                        #endregion

                                    }

                                    #region FECHAS REVISION

                                    if (bTieneAjuste)
                                    {
                                        // Fecha Primera Revision
                                        if (row[34].ToString() != "")
                                        {
                                            try
                                            {
                                                dFechaPrimerRevision = Convert.ToDateTime(row[34].ToString());
                                                detalle.FechaPrimeraRevision = dFechaPrimerRevision;
                                                //Fecha Proxima Revision
                                                if (row[35].ToString() != "")
                                                {
                                                    try
                                                    {
                                                        dFechaProximoRevision = Convert.ToDateTime(row[35].ToString());


                                                        if (dFechaPrimerRevision <= dFechaProximoRevision)
                                                        {
                                                            detalle.FechaProximaRevision = dFechaProximoRevision;

                                                            //Fecha Ultima Revision
                                                            if (row[36].ToString() != "")
                                                            {
                                                                try
                                                                {
                                                                    dFechaUltimaRevision = Convert.ToDateTime(row[36].ToString());

                                                                    if (dFechaProximoRevision <= dFechaUltimaRevision)
                                                                    {
                                                                        detalle.FechaUltimaRevision = dFechaUltimaRevision;
                                                                    }
                                                                    else
                                                                    {
                                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PROXIMA REVISION '" + row[35].ToString() + "' tiene que ser menor o igual que la fecha ultima revision:" + row[36].ToString() + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                        iErrores++;
                                                                        continue;
                                                                    }

                                                                }
                                                                catch (Exception ex)
                                                                {
                                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA ULTIMA REVISION '" + row[36].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                    //Comun.cLogV23.EscribirLog("Fecha Ultima Revision: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                                    iErrores++;
                                                                    continue;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La FECHA ULTIMA REVISION no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PRIMERA REVISION '" + row[34].ToString() + "' tiene que ser menor o igual que la fecha proxima revisión:" + row[35].ToString() + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PROXIMA REVISION '" + row[35].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                        //Comun.cLogV23.EscribirLog("Fecha Proximo pago: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "--- La FECHA PROXIMA REVISION no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }


                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La FECHA PRIMERA REVISION '" + row[34].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Fecha Primera revision: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "--- La FECHA PRIMERA REVISION no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Calculamos la Fecha Ultimo Uso
                                        if (iDesplazamiento > 0)
                                        {
                                            dFechaUltimoUso = dFechaUltimoPago.AddDays(iDesplazamiento);
                                        }
                                        else
                                        {
                                            dFechaUltimoUso = dFechaUltimoPago;
                                        }

                                        if (dFechaUso <= dFechaPrimerRevision)
                                        {
                                            if (dFechaUltimoUso >= dFechaUltimaRevision)
                                            {

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "--- La FECHA ULTIMA REVISION no puede ser mayor que la fecha de ultimo de uso:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "--- La FECHA PRIMERA REVISION no puede ser menor que la fecha de uso:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        // Cadencia
                                        if (row[30].ToString() != "")
                                        {
                                            try
                                            {
                                                detalle.AjustesPeriodicidad = Convert.ToInt32(row[30].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---La CADENCIA '" + row[30].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Ajustes periodicidad: " + "V23" + " Exception Code 100" + Comun.NuevaLinea);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "--- La CADENCIA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                    }
                                    #endregion

                                    // Prorrateo Inicial
                                    if (row[37].ToString().ToUpper() == "SI" || row[37].ToString().ToUpper() == "TRUE")
                                    {
                                        detalle.ProrrateoInicial = true;
                                    }
                                    else
                                    {
                                        detalle.ProrrateoInicial = false;
                                    }

                                    // Prorrateo
                                    if (row[38].ToString().ToUpper() == "SI" || row[38].ToString().ToUpper() == "TRUE")
                                    {
                                        detalle.Prorrateo = true;
                                    }
                                    else
                                    {
                                        detalle.Prorrateo = false;
                                    }

                                    // Prorrogable
                                    if (row[39].ToString().ToUpper() == "SI" || row[39].ToString().ToUpper() == "TRUE")
                                    {
                                        detalle.Prorrateo = true;
                                    }
                                    else
                                    {
                                        detalle.Prorrateo = false;
                                    }

                                    // Pago Anticipado
                                    if (row[40].ToString().ToUpper() == "SI" || row[40].ToString().ToUpper() == "TRUE")
                                    {
                                        detalle.PagoAnticipado = true;
                                    }
                                    else
                                    {
                                        detalle.PagoAnticipado = false;
                                    }



                                    #endregion

                                    #region CAMPOS ADICIONALES

                                    // ID_Opex
                                    if (row[41].ToString() != "")
                                    {
                                        alquilerDetalleCamposAdicionales.ID_Opex = row[41].ToString();
                                    }
                                    else
                                    {
                                        alquilerDetalleCamposAdicionales.ID_Opex = "";
                                    }

                                    // Imputación Tipo
                                    if (row[42].ToString() != "")
                                    {
                                        GlobalImputacionesTipos imputacion = null;
                                        GlobalImputacionesTiposController cImputaciones = new GlobalImputacionesTiposController();

                                        imputacion = cImputaciones.GetImputacionByNombre(row[42].ToString());

                                        if (imputacion != null)
                                        {
                                            alquilerDetalleCamposAdicionales.GlobalImputacionTipoID = imputacion.GlobalImputacionTipoID;
                                        }
                                        else
                                        {
                                            alquilerDetalleCamposAdicionales.GlobalImputacionTipoID = null;
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": No existe la imputación tipo " + row[42].ToString() + ". " + System.Environment.NewLine);
                                            iWarning++;
                                        }
                                    }
                                    else
                                    {
                                        alquilerDetalleCamposAdicionales.GlobalImputacionTipoID = null;
                                    }

                                    // Categoría Artículo
                                    if (row[43].ToString() != "")
                                    {
                                        alquilerDetalleCamposAdicionales.CategoriaArticulo = row[43].ToString();
                                    }
                                    else
                                    {
                                        alquilerDetalleCamposAdicionales.CategoriaArticulo = "";
                                    }

                                    // Equipo Adicional
                                    if (row[44].ToString() != "")
                                    {
                                        AlquileresDetallesEquiposAdicionales equipoAdicional = null;
                                        AlquileresDetallesEquiposAdicionalesController cEquiposAdicionales = new AlquileresDetallesEquiposAdicionalesController();

                                        equipoAdicional = cEquiposAdicionales.GetEquipoAdicionalByNombre(row[44].ToString());
                                        if (equipoAdicional != null)
                                        {
                                            alquilerDetalleCamposAdicionales.EquipoAdicionalID = equipoAdicional.AlquilerDetalleEquipoAdicionalID;
                                        }
                                        else
                                        {
                                            alquilerDetalleCamposAdicionales.EquipoAdicionalID = null;
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": No existe el equipo adicional " + row[44].ToString() + ". " + System.Environment.NewLine);
                                            iWarning++;
                                        }
                                    }
                                    else
                                    {
                                        alquilerDetalleCamposAdicionales.EquipoAdicionalID = null;
                                    }

                                    #endregion

                                    if (bActualizar)
                                    {
                                        bool bRealizadaActu = false;
                                        bRealizadaActu = cDetalles.UpdateItem(detalle);

                                        if (bActualizarConceptos)
                                        {
                                            cAlqDetCamAd.UpdateItem(alquilerDetalleCamposAdicionales);
                                        }
                                        else
                                        {
                                            alquilerDetalleCamposAdicionales.AlquilerDetalleID = detalle.AlquilerDetalleID;
                                            cAlqDetCamAd.AddItem(alquilerDetalleCamposAdicionales);
                                        }

                                        if (bRealizadaActu)
                                        {
                                            bActualizarEmplazamiento = true;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El concepto NO se actualizó correctamente:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        iActualizados++;
                                    }
                                    else
                                    {
                                        // Adds the contract
                                        detalle.AlquilerID = alquiler.AlquilerID;
                                        detalle.Activo = true;
                                        detalle = cDetalles.AddItem(detalle);

                                        if (detalle != null)
                                        {
                                            bActualizarEmplazamiento = true;
                                            alquilerDetalleCamposAdicionales.AlquilerDetalleID = detalle.AlquilerDetalleID;
                                            cAlqDetCamAd.AddItem(alquilerDetalleCamposAdicionales);
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.WARNING + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---El concepto NO se agregó correctamente:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        iCargados++;

                                    }


                                    #endregion



                                    if (bActualizarEmplazamiento)
                                    {

                                        #region ACTUALIZAR ALQUILER

                                        List<Vw_AlquileresDetalles> lAlquileresDetallesConceptos = new List<Vw_AlquileresDetalles>();
                                        AlquileresDetallesController cAlqDetallesConceptos = new AlquileresDetallesController();

                                        Alquileres udpAlquilerConceptos = new Alquileres();
                                        AlquileresController cUpdAlqConceptos = new AlquileresController();

                                        Meses cMesesConceptos = new Meses();

                                        long mesesConceptos = 0;

                                        mesesConceptos = cMesesConceptos.GetMonthDiff(Convert.ToDateTime(alquiler.FechaInicioContrato), Convert.ToDateTime(alquiler.FechaFinContrato));

                                        lAlquileresDetallesConceptos = cAlqDetallesConceptos.GetDetallesByAlquiler(alquiler.AlquilerID);



                                        alquiler.ImporteAlquilerBase = cAlqDetallesConceptos.GetAlquilerImporteAlquilerBase(lAlquileresDetallesConceptos);
                                        alquiler.ImporteFianza = cAlqDetallesConceptos.GetAlquilerImporteFianza(lAlquileresDetallesConceptos);
                                        alquiler.CargoPuntual = cAlqDetallesConceptos.GetAlquilerImporteCargoPuntual(lAlquileresDetallesConceptos);
                                        alquiler.CargoAdicional = cAlqDetallesConceptos.GetAlquilerImporteCargoAdicional(lAlquileresDetallesConceptos);
                                        alquiler.TotalContrato = cAlqDetallesConceptos.GetAlquilerImporteTotalContrato(lAlquileresDetallesConceptos);


                                        alquiler.TotalDeudaAnual = cAlqDetallesConceptos.GetAlquilerImporteTotalDeudaAnual(lAlquileresDetallesConceptos);
                                        alquiler.TotalDeudaContrato = cAlqDetallesConceptos.GetAlquilerImporteTotalDeudaContrato(lAlquileresDetallesConceptos, mesesConceptos);

                                        if (alquiler.NumProrrogasMaximas.HasValue)
                                        {
                                            alquiler.TotalDeudaEfectiva = alquiler.TotalDeudaContrato * Convert.ToInt32(alquiler.NumProrrogasMaximas);
                                            alquiler.TotalContratoEfectivo = Convert.ToDouble(alquiler.TotalContrato * alquiler.NumProrrogasMaximas);
                                        }
                                        else
                                        {
                                            alquiler.TotalDeudaEfectiva = alquiler.TotalDeudaContrato;
                                            alquiler.TotalContratoEfectivo = alquiler.TotalContrato;
                                        }

                                        alquiler.UltimoCodigoDetalle = detalle.CodigoDetalle;
                                        alquiler.TotalAlquiler = cUpdAlqConceptos.TotalAlquilerConcepto(alquiler.AlquilerID);
                                        if (cAlquileres.UpdateItem(alquiler))
                                        {
                                            #region ACTUALIZAR EMPLAZAMIENTOS

                                            EmplazamientosController cEmpAlquileres = new EmplazamientosController();
                                            AlquileresController cAlquileresAux = new AlquileresController();
                                            Emplazamientos oEmpAlquileres = new Emplazamientos();
                                            List<Alquileres> lAlquileresAux = new List<Alquileres>();

                                            oEmpAlquileres = cEmpAlquileres.GetItem(alquiler.EmplazamientoID);


                                            double? sumaImporteFianza = 0;
                                            double? sumaRenta = 0;
                                            double? sumaImporteAlq = 0;
                                            double? sumaOtrosGastos = 0;
                                            double? sumaImporteSus = 0;
                                            double? sumaPagoInicial = 0;
                                            double? sumaCosteElectrica = 0;
                                            double? sumaImportePlus = 0;
                                            double? sumaGastosComunes = 0;
                                            double? sumaCosteElectricaMes = 0;
                                            lAlquileresAux = cAlquileresAux.GetAlquileres(alquiler.EmplazamientoID);
                                            if (lAlquileresAux != null)
                                            {
                                                foreach (Alquileres c in lAlquileresAux)
                                                {
                                                    sumaImporteFianza = sumaImporteFianza + c.ImporteFianza;
                                                    sumaRenta = sumaRenta + c.Renta;
                                                    sumaImporteAlq = sumaImporteAlq + c.ImporteAlquilerBase;
                                                    sumaOtrosGastos = sumaOtrosGastos + c.ImporteOtrosGastos;
                                                    sumaImporteSus = sumaImporteSus + c.ImporteSustInfraest;
                                                    sumaPagoInicial = sumaPagoInicial + c.ImportePagoInicial;
                                                    sumaCosteElectrica = sumaCosteElectrica + c.CosteElectrico;
                                                    sumaImportePlus = sumaImportePlus + c.ImportePlusEstrategico;
                                                    sumaGastosComunes = sumaGastosComunes + c.GastosComunes;
                                                    sumaCosteElectricaMes = sumaCosteElectricaMes + c.CosteElectricoMensual;

                                                }
                                                oEmpAlquileres.ImporteFianza = sumaImporteFianza;
                                                oEmpAlquileres.RentaInicialImporteAnual = Convert.ToDouble(sumaRenta);
                                                oEmpAlquileres.ImporteAlquilerBase = sumaImporteAlq;
                                                oEmpAlquileres.ImporteOtrosGastos = sumaOtrosGastos;
                                                oEmpAlquileres.ImporteSustInfraest = sumaImporteSus;
                                                oEmpAlquileres.ImportePlusEstrategico = sumaImportePlus;
                                                oEmpAlquileres.ImportePagoInicial = sumaPagoInicial;
                                                oEmpAlquileres.CosteElectrico = sumaCosteElectrica;
                                                oEmpAlquileres.CodigoTorrero = alquiler.CodigoTorrero;

                                                if (lAlquileresAux.Count > 0)
                                                {
                                                    oEmpAlquileres.NumContratoSitio = lAlquileresAux.Count.ToString();
                                                }

                                                cEmpAlquileres.UpdateItem(oEmpAlquileres);

                                                //Actualizar el TotalRenegociable después de modificados los valores de renta:
                                                oEmpAlquileres.TotalRenegociable = cEmpAlquileres.actualizarTotalRenegociable(oEmpAlquileres.EmplazamientoID);
                                                oEmpAlquileres.TotalAreaRenegociable = cEmpAlquileres.actualizarTotalAreaRenegociable(oEmpAlquileres.EmplazamientoID);
                                                oEmpAlquileres.TotalValorAreaRenegociable = cEmpAlquileres.actualizarTotalValorAreaRenegociable(oEmpAlquileres.EmplazamientoID);

                                                if (!cEmpAlquileres.UpdateItem(oEmpAlquileres))
                                                {

                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---Los datos del  EMPLAZAMIENTO NO ACTUALIZO CORRECTAMENTE " + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                    iWarning++;
                                                }

                                            }

                                            #endregion
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlqCon + "/" + sNumContratoCon + "/" + sConceptoID + "---Los datos del  ALQUILER NO ACTUALIZO CORRECTAMENTE " + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            iWarning++;

                                        }


                                        #endregion

                                    }


                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strConceptosTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strConceptosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strConceptosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strConceptosErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strConceptosWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinConceptos" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONCEPTOS TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONCEPTOS CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONCEPTOS ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONCEPTOS ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONCEPTOS CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN CONCEPTOS" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region PROPIETARIOS ALQUILERES
                            case 6:


                                maximo = result.Tables[6].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                iTratados = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO PROPIETARIOS ALQUILERES" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[6].Rows)
                                {

                                    cont = cont + 1;

                                    // Alquileres
                                    Alquileres alquiler = null;
                                    AlquileresController cAlquileres = new AlquileresController();
                                    EmplazamientosController cEmpAlquileresPropietarios = new EmplazamientosController();
                                    Emplazamientos emplazamientoPropietarios = null;

                                    // Propietarios
                                    Propietarios propietario = null;
                                    PropietariosController cPropietario = new PropietariosController();
                                    string sIdentificador = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";


                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            emplazamientoPropietarios = new Emplazamientos();
                                            cEmpAlquileresPropietarios = new EmplazamientosController();
                                            emplazamientoPropietarios = cEmpAlquileresPropietarios.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (emplazamientoPropietarios == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, emplazamientoPropietarios.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ALQUILER NO EXISTE EN TREE" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion


                                    if (alquiler != null)
                                    {
                                        if (row[3].ToString() != "")
                                        {
                                            sIdentificador = row[3].ToString();

                                            propietario = cPropietario.GetPropietarioByDNI(sIdentificador);

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ID PROPIETARIO (DNI/CIF) no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        if (propietario != null)
                                        {

                                            bActualizar = true;
                                        }
                                        else
                                        {

                                            propietario = new Propietarios();
                                            // Clientes
                                            propietario.ClienteID = cliID;
                                            // Se pone activo
                                            propietario.Activo = true;
                                            bActualizar = false;
                                        }


                                        #region GESTION LANDLORD (PROPIETARIO)


                                        // DNI
                                        propietario.DNIPropietario = sIdentificador;

                                        // razón social
                                        if (row[4].ToString() != "")
                                        {

                                            propietario.Nombre = row[4].ToString();
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La RAZON SOCIAL/NOMBRE no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Apellidos
                                        if (row[5].ToString() != "" && row[5].ToString() != null)
                                        {
                                            propietario.Apellidos = row[5].ToString();
                                        }
                                        else
                                        {
                                            propietario.Apellidos = "";
                                        }

                                        // Email
                                        if (row[6].ToString() != "")
                                        {

                                            if (row[6].ToString().Contains("@"))
                                            {
                                                propietario.Email = row[6].ToString();
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": IDPROPIETARIO: " + sIdentificador + "---El EMAIL no tiene el formato correcto, no contiene ninguna @:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El EMAIL no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                        // Telefono
                                        propietario.Telefono = row[7].ToString();

                                        // Telefono 2
                                        propietario.Telefono2 = row[8].ToString();

                                        // Telefono movil
                                        propietario.Movil = row[9].ToString();

                                        // Direccion
                                        propietario.Direccion = row[10].ToString();

                                        // Codigo postal
                                        propietario.CodigoPostal = row[11].ToString();


                                        // Pais
                                        if (row[12].ToString() != "")
                                        {
                                            PaisesController cPaises = new PaisesController();
                                            long paisID = cPaises.GetPaisByNombre(row[12].ToString());
                                            if (paisID > 0)
                                            {
                                                propietario.PaisID = paisID;

                                                // Region
                                                if (row[13].ToString() != "")
                                                {
                                                    RegionesPaisesController cRegiones = new RegionesPaisesController();
                                                    long propietarioRegionID = cRegiones.GetRegionIDByNombre(row[13].ToString(), paisID);
                                                    if (propietarioRegionID > 0)
                                                    {
                                                        propietario.RegionID = propietarioRegionID;

                                                        // Provincia
                                                        if (row[14].ToString() != "")
                                                        {
                                                            ProvinciasController cProvincias = new ProvinciasController();
                                                            long provinciaID = cProvincias.GetProvinciaIDByNombre(row[14].ToString(), propietarioRegionID);
                                                            if (provinciaID > 0)
                                                            {
                                                                propietario.ProvinciaID = provinciaID;

                                                                // Municipio
                                                                if (row[15].ToString() != "")
                                                                {
                                                                    MunicipiosController cMunicipios = new MunicipiosController();
                                                                    long municipioID = cMunicipios.GetMunicipioIDByNombre(row[15].ToString(), provinciaID);
                                                                    if (municipioID > 0)
                                                                    {
                                                                        propietario.MunicipioID = municipioID;
                                                                    }
                                                                    else
                                                                    {
                                                                        //Comun.cLogV23.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---El MUNICIPIO '" + row[15].ToString() + "' no existe en TREE para dicha provincia:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        iWarning++;
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---La PROVINCIA '" + row[14].ToString() + "' no existe en TREE para dicha region pais:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                iWarning++;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.WARNING + ": IDPROPIETRARIO: " + sIdentificador + "---La REGION PAIS '" + row[13].ToString() + "' no existe en TREE para dicho pais:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El PAIS '" + row[12].ToString() + "' no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO_ALQUILER + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": IDPROPIETRARIO: " + sIdentificador + "---El PAIS no puede ser vacio, es un campo obligatorio:" + " " + Comun.ERROR_NO_CREADO_PROPIETARIO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Codigo SAP                                            
                                        propietario.CodigoSAP = row[16].ToString();


                                        // Observaciones
                                        propietario.Observaciones = row[17].ToString();



                                        try
                                        {
                                            if (bActualizar)
                                            {
                                                // Updates the landlord
                                                if (cPropietario.UpdateItem(propietario))
                                                {
                                                    PropietariosAlquileresController cProAlquiler = new PropietariosAlquileresController();
                                                    PropietariosAlquileres propAlq = cProAlquiler.GetPropietariosAlquilerByID(propietario.PropietarioID, alquiler.AlquilerID);
                                                    if (propAlq == null)
                                                    {
                                                        propAlq = new PropietariosAlquileres();
                                                        propAlq.AlquilerID = alquiler.AlquilerID;
                                                        propAlq.PropietarioID = propietario.PropietarioID;
                                                        propAlq.Activo = true;
                                                        propAlq.FechaAsignacion = DateTime.Now;
                                                        propAlq.UsuarioAsignacionID = Convert.ToInt32(odoccarga.UsuarioID);
                                                        if (cProAlquiler.GetPropietariosPrincipalByAlquilerID(alquiler.AlquilerID) != null)
                                                        {
                                                            propAlq.Principal = false;
                                                        }
                                                        else
                                                        {
                                                            propAlq.Principal = true;
                                                        }
                                                        PropietariosAlquileresController cProAlquilerNuevo = new PropietariosAlquileresController();
                                                        cProAlquilerNuevo.AddItem(propAlq);
                                                        iActualizados++;

                                                    }
                                                    else
                                                    {
                                                        iTratados++;
                                                    }

                                                }

                                            }
                                            else
                                            {
                                                // Add the landlord
                                                if (cPropietario.AddItem(propietario) != null)
                                                {
                                                    PropietariosAlquileresController cProAlquiler = new PropietariosAlquileresController();
                                                    PropietariosAlquileres propAlq = cProAlquiler.GetPropietariosAlquilerByID(propietario.PropietarioID, alquiler.AlquilerID);
                                                    if (propAlq == null)
                                                    {
                                                        propAlq = new PropietariosAlquileres();
                                                        propAlq.AlquilerID = alquiler.AlquilerID;
                                                        propAlq.PropietarioID = propietario.PropietarioID;
                                                        propAlq.Activo = true;
                                                        propAlq.FechaAsignacion = DateTime.Now;
                                                        propAlq.UsuarioAsignacionID = Convert.ToInt32(odoccarga.UsuarioID);
                                                        if (cProAlquiler.GetPropietariosPrincipalByAlquilerID(alquiler.AlquilerID) != null)
                                                        {
                                                            propAlq.Principal = false;
                                                        }
                                                        else
                                                        {
                                                            propAlq.Principal = true;
                                                        }

                                                        PropietariosAlquileresController cProAlquilerNuevo = new PropietariosAlquileresController();
                                                        cProAlquilerNuevo.AddItem(propAlq);
                                                        iCargados++;
                                                    }
                                                    else
                                                    {
                                                        iTratados++;
                                                    }
                                                }
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog("Propietarios Codigo Loc " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                        }

                                        #endregion

                                    }


                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPropietariosAlquileresTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPropietariosAlquileresCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPropietariosAlquileresActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPropietariosAlquileresTratados" + ": " + iTratados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPropietariosAlquileresErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPropietariosAlquileresWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinPropietariosAlquilers" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PROPIETARIOS ALQUILERES TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PROPIETARIOS ALQUILERES CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PROPIETARIOS ALQUILERES ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PROPIETARIOS ALQUILERES TRATADOS: " + iTratados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PROPIETARIOS ALQUILERES ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PROPIETARIOS ALQUILERES CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN PROPIETARIOS ALQUILERES" + System.Environment.NewLine);
                                break;

                            #endregion

                            #region PAGO A PROVEEDORES
                            case 7:

                                maximo = result.Tables[7].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                iTratados = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO PAGO A PROVEEDORES" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[7].Rows)
                                {

                                    cont = cont + 1;

                                    // Proveedor
                                    ProveedoresController cProveedores = new ProveedoresController();
                                    Proveedores proveedor = null;

                                    // Proveedores
                                    AlquileresDetallesProveedores alqProveedor = null;
                                    AlquileresDetallesProveedoresController cAlqProveedores = new AlquileresDetallesProveedoresController();

                                    // Detalles alquileres
                                    AlquileresDetallesController cDetalle = new AlquileresDetallesController();
                                    AlquileresDetalles detalle = null;

                                    // Alquileres 
                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    //Emplazamientos
                                    EmplazamientosController cEmpPagoProveedores = new EmplazamientosController();
                                    Emplazamientos emplazamientoPagoProveedores = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";
                                    string sCodigoDetalle = "";


                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            emplazamientoPagoProveedores = new Emplazamientos();
                                            cEmpPagoProveedores = new EmplazamientosController();
                                            emplazamientoPagoProveedores = cEmpPagoProveedores.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (emplazamientoPagoProveedores == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {
                                                //Num Contrato
                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, emplazamientoPagoProveedores.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {
                                                        //ID Concepto
                                                        if (row[3].ToString() != "")
                                                        {
                                                            sCodigoDetalle = row[3].ToString();
                                                            detalle = cDetalle.GetDetallesByCodigo(sCodigoDetalle, alquiler.AlquilerID);
                                                            if (detalle == null)
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID CONCEPTO '" + sCodigoDetalle + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ID CONCEPTO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ALQUILER NO EXISTE EN TREE" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    if (row[4].ToString() != "")
                                    {
                                        proveedor = cProveedores.getProveedorByDNI(row[4].ToString());
                                        if (proveedor != null)
                                        {
                                            alqProveedor = cAlqProveedores.GetItemByDetalleIDProveedor(detalle.AlquilerDetalleID, proveedor.ProveedorID);

                                            if (alqProveedor != null)
                                            {
                                                bActualizar = true;
                                            }
                                            else
                                            {
                                                alqProveedor = new AlquileresDetallesProveedores();
                                                alqProveedor.AlquilerDetalleID = detalle.AlquilerDetalleID;
                                                alqProveedor.ProveedorID = proveedor.ProveedorID;
                                                alqProveedor.EnNegociacion = false;
                                                alqProveedor.Activo = true;
                                                alqProveedor.PendienteBorrar = false;
                                                bActualizar = false;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID FISCAL PROVEEDOR '" + row[4].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID FISCAL PROVEEDOR no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    #region GESTION PAGO PROVEEDORES


                                    // CONCEPTOS DE PAGO
                                    if (row[5].ToString() != "")
                                    {
                                        ConceptosPagosController cConcepto = new ConceptosPagosController();
                                        long conceptoID = cConcepto.GetConceptoByNombreAll(row[5].ToString());
                                        if (conceptoID > 0)
                                        {
                                            alqProveedor.ConceptoPagoID = conceptoID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El CONCEPTO PAGO '" + row[5].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El CONCEPTO PAGO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // METODO DE PAGO
                                    if (row[6].ToString() != "")
                                    {
                                        MetodosPagosController cMetodo = new MetodosPagosController();
                                        long metodoID = cMetodo.GetMetodoByCodigoAll(row[6].ToString());
                                        if (metodoID > 0)
                                        {
                                            alqProveedor.MetodoPagoID = metodoID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El CODIGO METODO PAGO '" + row[6].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El CODIGO METODO PAGO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // MONEDA
                                    if (row[7].ToString() != "")
                                    {
                                        MonedasController cProveedoresMonedas = new MonedasController();
                                        long proveedorMonedaID = cProveedoresMonedas.GetMonedaBySimbolo(row[7].ToString());
                                        if (proveedorMonedaID > 0)
                                        {
                                            alqProveedor.MonedaID = proveedorMonedaID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El SIMBOLO MONEDA '" + row[7].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El SIMBOLO MONEDA no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // CANTIDAD
                                    if (row[8].ToString() != "")
                                    {
                                        double dCantidad = 0;
                                        double dValor = 0;
                                        try
                                        {
                                            dCantidad = Convert.ToDouble(row[8].ToString());

                                            if (dCantidad <= 100 && dCantidad >= 0)
                                            {
                                                alqProveedor.CantidadPorcentaje = dCantidad;
                                                dValor = TreeCore.Clases.ImportExport.ActualizarCantidadBeneficiario(detalle.Importe, dCantidad, detalle.MonedaID, alqProveedor.MonedaID);
                                                alqProveedor.Cantidad = dValor;

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CANTIDAD '" + dCantidad + "' es mayor que 100 o menor que 0:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CANTIDAD '" + dCantidad + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                            //Comun.cLogV23.EscribirLog("Cantidad: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CANTIDAD no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // BANCO
                                    if (row[9].ToString() != "")
                                    {
                                        BancosController cBanco = new BancosController();
                                        Bancos oBancos = cBanco.GetBancoByNombre(row[9].ToString());

                                        if (oBancos != null)
                                        {
                                            ProveedoresCuentasCorrientesController cProveedoresCuantasCorrientes = new ProveedoresCuentasCorrientesController();
                                            ProveedoresCuentasCorrientes oProveedoresCC = new ProveedoresCuentasCorrientes();

                                            oProveedoresCC = cProveedoresCuantasCorrientes.GetCuentaByProveedorBanco(proveedor.ProveedorID, oBancos.BancoID);
                                            if (oProveedoresCC != null)
                                            {
                                                alqProveedor.BancoID = oProveedoresCC.BancoID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.WARNING + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El BANCO '" + row[9].ToString() + "' no esta asignado al proveedor:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                iWarning++;
                                            }


                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.WARNING + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El BANCO '" + row[9].ToString() + "' no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;

                                        }
                                    }

                                    // Num Objeto
                                    if (row[10].ToString() != "")
                                    {
                                        alqProveedor.NumeroObjeto = row[10].ToString();
                                    }

                                    // FUNCIONES PROVEEDOR
                                    if (row[11].ToString() != "")
                                    {
                                        ProveedoresFuncionesController cFuncion = new ProveedoresFuncionesController();
                                        ProveedoresFunciones funcion = cFuncion.GetFuncionByCodigo(row[11].ToString());
                                        if (funcion != null)
                                        {
                                            alqProveedor.ProveedorFuncionID = funcion.ProveedorFuncionID;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CODIGO FUNCION PROVEEDOR '" + row[11].ToString() + "' no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;
                                        }
                                    }

                                    try
                                    {

                                        if (bActualizar)
                                        {



                                            if (!cAlqProveedores.HasProveedorDuplicado(alqProveedor.AlquilerDetalleID, alqProveedor.ProveedorID, alqProveedor.ConceptoPagoID, alqProveedor.MonedaID, alqProveedor.CantidadPorcentaje))
                                            {
                                                cAlqProveedores.UpdateItem(alqProveedor);
                                                detalle.TieneBeneficiarios = true;
                                                cDetalle.UpdateItem(detalle);
                                                alquiler.TieneBeneficiarios = true;
                                                cAlquileres.UpdateItem(alquiler);
                                                iActualizados++;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---NO se puedo actualizar, NO se cumplen las condiciones de cantidad, el total es superior al 100%" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                            }
                                        }
                                        else
                                        {

                                            if (!cAlqProveedores.HasProveedorDuplicado(alqProveedor.AlquilerDetalleID, alqProveedor.ProveedorID, alqProveedor.ConceptoPagoID, alqProveedor.MonedaID, alqProveedor.CantidadPorcentaje))
                                            {
                                                cAlqProveedores.AddItem(alqProveedor);
                                                detalle.TieneBeneficiarios = true;
                                                cDetalle.UpdateItem(detalle);
                                                alquiler.TieneBeneficiarios = true;
                                                cAlquileres.UpdateItem(alquiler);
                                                iCargados++;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---NO se puedo agregar, NO se cumplen las condiciones de cantidad, el total es superior al 100%" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                                iErrores++;
                                            }

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---Error al realizar la accion:" + "V23" + " Exception Code 100" + "_" + Comun.ERROR_NO_CREADO_PAGO_PROVEEDOR + System.Environment.NewLine);
                                    }

                                    #endregion

                                    GC.Collect();
                                }


                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPagosProveedoreTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPagosProveedoreCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPagosProveedoreActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPagosProveedoreErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strPagosProveedoreTotalesWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinPagosProveedores" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PAGOS A PROVEEDORES  TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PAGOS A PROVEEDORES  CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PAGOS A PROVEEDORES  ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PAGOS A PROVEEDORES  ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PAGOS A PROVEEDORES  CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN PROPIETARIOS ALQUILERES" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region IMPUESTOS
                            case 8:

                                maximo = result.Tables[8].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                iTratados = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO IMPUESTOS" + System.Environment.NewLine);
                                foreach (DataRow row in result.Tables[8].Rows)
                                {

                                    cont = cont + 1;
                                    // Proveedores

                                    AlquileresDetallesImpuestos alqImpuestosOriginal = null;
                                    AlquileresDetallesImpuestosController cAlqImpuestosOriginal = new AlquileresDetallesImpuestosController();

                                    // Detalles alquileres
                                    AlquileresDetallesController cDetalle = new AlquileresDetallesController();
                                    AlquileresDetalles detalle = null;

                                    // Alquileres 
                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    //Emplazamientos
                                    EmplazamientosController cEmpImpuestos = new EmplazamientosController();
                                    Emplazamientos oEmplazamientoImpuestos = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";
                                    string sCodigoDetalle = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            oEmplazamientoImpuestos = new Emplazamientos();
                                            cEmpImpuestos = new EmplazamientosController();
                                            oEmplazamientoImpuestos = cEmpImpuestos.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (oEmplazamientoImpuestos == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {
                                                //Num Contrato
                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, oEmplazamientoImpuestos.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {
                                                        //ID Concepto
                                                        if (row[3].ToString() != "")
                                                        {
                                                            sCodigoDetalle = row[3].ToString();
                                                            detalle = cDetalle.GetDetallesByCodigo(sCodigoDetalle, alquiler.AlquilerID);
                                                            if (detalle == null)
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID CONCEPTO '" + sCodigoDetalle + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ID CONCEPTO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ALQUILER NO EXISTE EN TREE" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    // Proveedor
                                    ImpuestosController cImpuestos = new ImpuestosController();
                                    Impuestos impuesto = null;

                                    if (row[4].ToString() != "")
                                    {
                                        impuesto = cImpuestos.GetImpuestosByNombre(row[4].ToString());
                                        if (impuesto != null)
                                        {
                                            alqImpuestosOriginal = cAlqImpuestosOriginal.GetItemByDetalleIDImpuesto(detalle.AlquilerDetalleID, impuesto.ImpuestoID);

                                            if (alqImpuestosOriginal != null)
                                            {
                                                bActualizar = true;
                                            }
                                            else
                                            {
                                                alqImpuestosOriginal = new AlquileresDetallesImpuestos();
                                                bActualizar = false;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El  CLASE DE IMPUESTO '" + row[4].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CLASE DE IMPUESTO '" + sCodigoDetalle + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    alqImpuestosOriginal.AlquilerDetalleID = detalle.AlquilerDetalleID;
                                    alqImpuestosOriginal.ImpuestoID = impuesto.ImpuestoID;
                                    alqImpuestosOriginal.Cantidad = impuesto.Valor;
                                    try
                                    {

                                        if (bActualizar)
                                        {

                                            cAlqImpuestosOriginal.UpdateItem(alqImpuestosOriginal);
                                            detalle.TieneImpuestos = true;
                                            cDetalle.UpdateItem(detalle);
                                            alquiler.TieneImpuestos = true;
                                            cAlquileres.UpdateItem(alquiler);
                                            iActualizados++;

                                        }
                                        else
                                        {

                                            cAlqImpuestosOriginal.AddItem(alqImpuestosOriginal);
                                            detalle.TieneImpuestos = true;
                                            cDetalle.UpdateItem(detalle);
                                            alquiler.TieneImpuestos = true;
                                            cAlquileres.UpdateItem(alquiler);
                                            iCargados++;

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---Error al realizar la accion:" + "V23" + " Exception Code 100" + "_" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                    }

                                    GC.Collect();
                                }
                                if (maximo == 0)
                                {
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strImpuestosTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strImpuestosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strImpuestosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strImpuestosErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strImpuestosWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinImpuestos" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": IMPUESTOS  TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": IMPUESTOS  CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": IMPUESTOS  ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": IMPUESTOS  ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": IMPUESTOS CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN IMPUESTOS" + System.Environment.NewLine);

                                break;
                            #endregion

                            #region RENTENCIONES
                            case 9:

                                maximo = result.Tables[9].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                iTratados = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO RETENCIONES" + System.Environment.NewLine);
                                foreach (DataRow row in result.Tables[9].Rows)
                                {

                                    cont = cont + 1;
                                    // Proveedores

                                    AlquileresDetallesImpuestos alqImpuestosOriginal = null;
                                    AlquileresDetallesImpuestosController cAlqImpuestosOriginal = new AlquileresDetallesImpuestosController();

                                    // Detalles alquileres
                                    AlquileresDetallesController cDetalle = new AlquileresDetallesController();
                                    AlquileresDetalles detalle = null;

                                    // Alquileres 
                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    //Emplazamientos
                                    EmplazamientosController cEmpImpuestos = new EmplazamientosController();
                                    Emplazamientos oEmplazamientoImpuestos = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";
                                    string sCodigoDetalle = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            oEmplazamientoImpuestos = new Emplazamientos();
                                            cEmpImpuestos = new EmplazamientosController();
                                            oEmplazamientoImpuestos = cEmpImpuestos.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (oEmplazamientoImpuestos == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {
                                                //Num Contrato
                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, oEmplazamientoImpuestos.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {
                                                        //ID Concepto
                                                        if (row[3].ToString() != "")
                                                        {
                                                            sCodigoDetalle = row[3].ToString();
                                                            detalle = cDetalle.GetDetallesByCodigo(sCodigoDetalle, alquiler.AlquilerID);
                                                            if (detalle == null)
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID CONCEPTO '" + sCodigoDetalle + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ID CONCEPTO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_IMPUESTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ALQUILER NO EXISTE EN TREE" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    // Impuestos
                                    ImpuestosController cImpuestos = new ImpuestosController();
                                    Impuestos impuesto = null;

                                    //Proveedores
                                    ProveedoresController cProvImp = new ProveedoresController();
                                    Proveedores oProImp = new Proveedores();


                                    //Impuestos
                                    if (row[4].ToString() != "")
                                    {
                                        impuesto = cImpuestos.GetImpuestosByNombre(row[4].ToString());
                                        if (impuesto != null)
                                        {

                                            //ID Fiscal Proveedor
                                            if (row[5].ToString() != "")
                                            {

                                                oProImp = cProvImp.getProveedorByDNI(row[5].ToString());

                                                if (oProImp != null)
                                                {

                                                    ImpuestosProveedoresTiposController cImpProTip = new ImpuestosProveedoresTiposController();
                                                    long impProTip = 0;

                                                    if (oProImp.TipoContribuyenteID.HasValue)
                                                    {
                                                        impProTip = cImpProTip.getImpuestoProveedorTipoID(impuesto.ImpuestoID, Convert.ToInt64(oProImp.TipoContribuyenteID));

                                                        if (impProTip > 0)
                                                        {
                                                            alqImpuestosOriginal = cAlqImpuestosOriginal.GetItemByDetalleIDImpuesto(detalle.AlquilerDetalleID, impuesto.ImpuestoID);

                                                            if (alqImpuestosOriginal != null)
                                                            {
                                                                bActualizar = true;
                                                            }
                                                            else
                                                            {
                                                                alqImpuestosOriginal = new AlquileresDetallesImpuestos();
                                                                bActualizar = false;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID FISCAL PROVEEDOR '" + row[5].ToString() + "' no tiene tipo contribuyen no tiene rentención asignada:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }


                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID FISCAL PROVEEDOR '" + row[5].ToString() + "' no tiene tipo contribuyen configurado y es necesario para asociarle una rentecion.:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }


                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID FISCAL PROVEEDOR '" + row[5].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID FISCAL PROVEEDOR no puede ser vacio:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }


                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CLASE DE RETENCION '" + row[4].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CLASE DE RETENCION no puede ser vacio:" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    alqImpuestosOriginal.AlquilerDetalleID = detalle.AlquilerDetalleID;
                                    alqImpuestosOriginal.ImpuestoID = impuesto.ImpuestoID;
                                    alqImpuestosOriginal.Cantidad = impuesto.Valor;
                                    try
                                    {

                                        if (bActualizar)
                                        {

                                            cAlqImpuestosOriginal.UpdateItem(alqImpuestosOriginal);
                                            iActualizados++;

                                        }
                                        else
                                        {

                                            cAlqImpuestosOriginal.AddItem(alqImpuestosOriginal);
                                            iCargados++;

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---Error al realizar la accion:" + "V23" + " Exception Code 100" + "_" + Comun.ERROR_NO_CREADO_RETENCION + System.Environment.NewLine);
                                    }

                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetencionesTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetencionesCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetencionesActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetencionesErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetencionesWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinRetenciones" + ": " + System.Environment.NewLine);

                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETENCIONES  TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETENCIONES  CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETENCIONES  ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETENCIONES  ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETENCIONES CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN RETENCIONES" + System.Environment.NewLine);

                                break;
                            #endregion

                            #region CONTACTOS ALQUILERES
                            case 10:


                                maximo = result.Tables[10].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO CONTACTOS ALQUILERES" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[10].Rows)
                                {

                                    cont = cont + 1;

                                    ContactosController cContactos = new ContactosController();
                                    Contactos contacto = null;
                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";
                                    string sEmailContacto = "";
                                    string sApellidoContacto = "";
                                    string sNombreContacto = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    #region GESTION CONTACTO ALQUILER

                                    // Contacto Nombre
                                    if (row[3].ToString() != "")
                                    {
                                        sNombreContacto = row[3].ToString();

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NOMBRE no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Contacto Apelldio
                                    if (row[4].ToString() != "")
                                    {
                                        sApellidoContacto = row[4].ToString();

                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El APELLIDO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    contacto = cContactos.GetContactbyNombreContactoCompleto(sNombreContacto, sApellidoContacto, alquiler.AlquilerID);

                                    if (contacto != null)
                                    {
                                        bActualizar = true;
                                    }
                                    else
                                    {
                                        contacto = new Contactos();
                                        bActualizar = false;
                                    }

                                    //Contacto Nombre
                                    contacto.ContactoNombre = sNombreContacto;
                                    //Contacto Apellido
                                    contacto.ContactoApellidos = sApellidoContacto;

                                    // Contacto Telefono
                                    if (row[5].ToString() != "")
                                    {
                                        contacto.ContactoTelefono = row[5].ToString();
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El TELEFONO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    //Telefono 2
                                    contacto.ContactoTelefono2 = row[6].ToString();
                                    //Telefono Movil
                                    contacto.ContactoMovil = row[7].ToString();


                                    //Contacto Email
                                    if (row[8].ToString() != "")
                                    {
                                        if (row[8].ToString().Contains('@'))
                                        {
                                            sEmailContacto = row[8].ToString();
                                            contacto.ContactoEmail = sEmailContacto;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Email: " + row[8].ToString() + "---El EMAIL no tiene el formato correcto, no contiene ninguna @:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El EMAIL no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    // Pais
                                    if (row[9].ToString() != "")
                                    {
                                        PaisesController cPaises = new PaisesController();
                                        long contEmpPaisID = cPaises.GetPaisByNombre(row[9].ToString());
                                        if (contEmpPaisID > 0)
                                        {
                                            contacto.PaisID = contEmpPaisID;

                                            // Region
                                            if (row[10].ToString() != "")
                                            {
                                                RegionesPaisesController cRegiones = new RegionesPaisesController();
                                                RegionesPaises contEmpRegionPais = cRegiones.GetRegionCompletaByNombre(row[10].ToString(), contEmpPaisID);
                                                if (contEmpRegionPais != null)
                                                {
                                                    contacto.Region = contEmpRegionPais.RegionPais;
                                                    // Provincia
                                                    if (row[11].ToString() != "")
                                                    {
                                                        ProvinciasController cProvincias = new ProvinciasController();
                                                        Provincias contEmpProvincia = cProvincias.GetProvinciaByNombre(row[11].ToString(), contEmpRegionPais.RegionPaisID);
                                                        if (contEmpProvincia != null)
                                                        {
                                                            contacto.Provincia = contEmpProvincia.Provincia;
                                                            // Municipio
                                                            if (row[12].ToString() != "")
                                                            {
                                                                MunicipiosController cMunicipios = new MunicipiosController();
                                                                long contEmpMunicipioID = cMunicipios.GetMunicipioIDByNombre(row[12].ToString(), contEmpProvincia.ProvinciaID);
                                                                if (contEmpMunicipioID > 0)
                                                                {
                                                                    contacto.MunicipioID = contEmpMunicipioID;
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---El MUNICIPIO '" + row[12].ToString() + "' no existe en TREE para dicha provincia:" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El MUNICIPIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---La PROVINCIA '" + row[11].ToString() + "' no existe en TREE para dicha region pais:" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La PROVINCIA no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---La REGION PAIS '" + row[10].ToString() + "' no existe en TREE para dicho pais:" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La REGION PAIS no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": CONTACTO EMAIL: " + sEmailContacto + "---El País '" + row[9].ToString() + "' no existe en TREE:" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO_CONTACTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El PAIS no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ALQUILER_CONTACTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    // Codigo Postal
                                    contacto.CP = row[13].ToString();

                                    // Direccion
                                    contacto.ContactoDireccion = row[14].ToString();

                                    // Observaciones
                                    contacto.Comentarios = row[15].ToString();

                                    if (bActualizar)
                                    {

                                        cContactos.UpdateItem(contacto);
                                        iActualizados++;
                                    }
                                    else
                                    {
                                        // Se pone activo
                                        contacto.Activo = true;
                                        contacto.AlquilerID = alquiler.AlquilerID;
                                        //Agregamos
                                        cContactos.AddItem(contacto);
                                        iCargados++;
                                    }

                                    #endregion

                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContactosTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContactosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContactosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContactosErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strContactoswarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinContactos" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTACTOS ALQUILERES  TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTACTOS ALQUILERES  CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTACTOS ALQUILERES  ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTACTOS ALQUILERES  ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": CONTACTOS ALQUILERES CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN CONTACTOS ALQUILERES" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region PRORROGAS
                            case 11:


                                maximo = result.Tables[11].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO PRORROGAS" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[11].Rows)
                                {

                                    cont = cont + 1;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    #region ACTUALIZACION DE PRORROGA


                                    // PRORROGA AUTOMÁTICA
                                    if (row[3].ToString().ToUpper() == "A")
                                    {
                                        alquiler.ProrrogaAutomatica = true;

                                        #region DATOS PRORROGAS

                                        // CADENCIA
                                        if (row[4].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.CadenciaProrrogaAutomatica = Convert.ToInt32(row[4].ToString());
                                            }
                                            catch (Exception ex)
                                            {

                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CADENCIA '" + row[4].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Cadencia: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La CADENCIA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // NUMERO PRORROGAS
                                        if (row[5].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.NumProrrogasMaximas = Convert.ToInt32(row[5].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La NUM EXTENSIONES MAXIMAS '" + row[5].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Num Extensiones Maximas: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM EXTENSIONES MAXIMAS no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // POTESTAD EXCLUSIVA TELEFONICA
                                        if (row[6].ToString().ToUpper() == "SI" || row[6].ToString().ToUpper() == "TRUE")
                                        {
                                            alquiler.PotestadExclusiva = true;
                                        }
                                        else if (row[6].ToString().ToUpper() == "NO" || row[6].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.PotestadExclusiva = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La POTESTAD EXCLUSIVA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // TERMINACION PRIMERA VENTANA
                                        if (row[7].ToString().ToUpper() == "SI" || row[7].ToString().ToUpper() == "TRUE")
                                        {
                                            alquiler.TerminacionPrevistaPrimeraVentana = true;
                                        }
                                        else if (row[7].ToString().ToUpper() == "NO" || row[7].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.TerminacionPrevistaPrimeraVentana = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La TERMINACION PRIMERA VENTANA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // TIEMPO DE NOTIFICACION PREVIA
                                        if (row[8].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.TiempoPrevioSolicitudRenovacion = Convert.ToInt32(row[8].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---EL TIEMPO DE NOTIFICACION PREVIA '" + row[8].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Tiempor Notificacion Previa: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El TIEMPO DE NOTIFICACION PREVIA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                        // FECHA EFECTIVA FIN CONTRATO
                                        if (row[9].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.FechaEfectivaFinContrato = Convert.ToDateTime(row[9].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA EFECTIVA FIN CONTRATO '" + row[9].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Tiempor Notificacion Previa: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La FECHA EFECTIVA FIN CONTRATO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        #endregion

                                    }
                                    else if (row[3].ToString().ToUpper() == "O")
                                    {
                                        alquiler.ProrrogaAutomatica = false;

                                        #region DATOS PRORROGAS

                                        // CADENCIA
                                        if (row[4].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.CadenciaProrrogaAutomatica = Convert.ToInt32(row[4].ToString());
                                            }
                                            catch (Exception ex)
                                            {

                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La CADENCIA '" + row[4].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Cadencia: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La CADENCIA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // NUMERO PRORROGAS
                                        if (row[5].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.NumProrrogasMaximas = Convert.ToInt32(row[5].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La NUM EXTENSIONES MAXIMAS '" + row[5].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Num Extensiones Maximas: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM EXTENSIONES MAXIMAS no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // POTESTAD EXCLUSIVA TELEFONICA
                                        if (row[6].ToString().ToUpper() == "SI" || row[6].ToString().ToUpper() == "TRUE")
                                        {
                                            alquiler.PotestadExclusiva = true;
                                        }
                                        else if (row[6].ToString().ToUpper() == "NO" || row[6].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.PotestadExclusiva = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La POTESTAD EXCLUSIVA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // TERMINACION PRIMERA VENTANA
                                        if (row[7].ToString().ToUpper() == "SI" || row[7].ToString().ToUpper() == "TRUE")
                                        {
                                            alquiler.TerminacionPrevistaPrimeraVentana = true;
                                        }
                                        else if (row[7].ToString().ToUpper() == "NO" || row[7].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.TerminacionPrevistaPrimeraVentana = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La TERMINACION PRIMERA VENTANA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // TIEMPO DE NOTIFICACION PREVIA
                                        if (row[8].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.TiempoPrevioSolicitudRenovacion = Convert.ToInt32(row[8].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La TIEMPO DE NOTIFICACION PREVIA '" + row[8].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Tiempor Notificacion Previa: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La TIEMPO DE NOTIFICACION PREVIA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                        // FECHA EFECTIVA FIN CONTRATO
                                        if (row[9].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.FechaEfectivaFinContrato = Convert.ToDateTime(row[9].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA EFECTIVA FIN CONTRATO '" + row[9].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_CONCEPTO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("Tiempor Notificacion Previa: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La FECHA EFECTIVA FIN CONTRATO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        #endregion
                                    }
                                    else if (row[3].ToString().ToUpper() == "P")
                                    {
                                        alquiler.ProrrogaAutomatica = false;
                                        alquiler.FechaEfectivaFinContrato = null;
                                        alquiler.CadenciaProrrogaAutomatica = null;
                                        alquiler.NumProrrogasMaximas = null;
                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La PRORROGA AUTOMATICA no puede ser vacia o no es A, ni O, ni P, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_PRORROGA + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }


                                    cAlquileres.UpdateItem(alquiler);
                                    iActualizados++;

                                    #endregion

                                    GC.Collect();
                                }
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strProrrogasTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strProrrogasCargadas" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strProrrogasActualizadas" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strProrrogasErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strProrrogasWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinProrrogas" + ": " + System.Environment.NewLine);

                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PRORROGAS TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PRORROGAS CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PRORROGAS ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PRORROGAS ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": PRORROGAS CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN PRORROGAS" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region RESCISIONES
                            case 12:


                                maximo = result.Tables[12].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO RESCISIONES" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[12].Rows)
                                {

                                    cont = cont + 1;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion



                                    try
                                    {
                                        #region ACTUALIZACION DE CLAUSULA DE RESCISION


                                        // Implica rescision
                                        if (row[3].ToString().ToUpper() == "SI" || row[3].ToString().ToUpper() == "TRUE")
                                        {

                                            //alquiler.SalidaAnticipada = true;
                                            alquiler.ImplicaRescision = true;

                                            // denominacion de la clausula
                                            if (row[4].ToString() != "")
                                            {

                                                alquiler.RescisionDenominacion = row[4].ToString();
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La DENOMINACION no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // parte rescisora
                                            if (row[5].ToString() != "")
                                            {
                                                IFRS16PartesRescisorasController cRescisora = new IFRS16PartesRescisorasController();
                                                IFRS16PartesRescisoras rescisora = null;
                                                rescisora = cRescisora.GetParteRescisoraByNombre(row[5].ToString());
                                                if (rescisora != null)
                                                {
                                                    alquiler.IFRS16ParteRescisoraID = rescisora.IFRS16ParteRescisoraID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La PARTE RESCISORA '" + row[5].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La PARTE RESCISORA no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            // TIEMPO PREAVISO CESE CONTRATO
                                            if (row[6].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.ResolucionAnticipadaPreaviso = Convert.ToInt32(row[6].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TIEMPO PREAVISO CESE CONTRATO '" + row[6].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Tiempo Preaviso Cese Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El TIEMPO PREAVISO CESE CONTRATO no puede ser vacia, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                            //Periodo de Gracia
                                            if (row[7].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.PeriodoGracia = Convert.ToInt32(row[7].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El PERIODO DE GRACIA '" + row[7].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Tiempo Preaviso Cese Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.PeriodoGracia = null;
                                            }

                                            // PENALIZACION
                                            if (row[8].ToString().ToUpper() == "SI" || row[8].ToString().ToUpper() == "TRUE")
                                            {

                                                alquiler.RescisionPenalizacion = true;

                                                //Porcentaje Resto Contrato
                                                if (row[9].ToString() != "")
                                                {
                                                    try
                                                    {
                                                        alquiler.RescisionPorcentajeRestoContrato = Convert.ToDouble(row[9].ToString());

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El PORCENTAJE RESTO CONTRATO '" + row[9].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                        //Comun.cLogV23.EscribirLog("El Porcentaje Resto Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                                else
                                                {
                                                    alquiler.RescisionPorcentajeRestoContrato = null;
                                                }

                                                //Numero Cuotas
                                                if (row[10].ToString() != "")
                                                {
                                                    try
                                                    {
                                                        alquiler.RescisionNumeroCuotas = Convert.ToInt32(row[10].ToString());

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El NUMERO CUOTAS '" + row[10].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                        //Comun.cLogV23.EscribirLog("El Tiempo Preaviso Cese Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                                else
                                                {
                                                    alquiler.RescisionNumeroCuotas = null;
                                                }

                                                //Multa Finalizacion
                                                if (row[11].ToString() != "")
                                                {
                                                    try
                                                    {
                                                        alquiler.MultaFinalizacion = Convert.ToDouble(row[11].ToString());

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El MULTA FINALIZACION '" + row[11].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                        //Comun.cLogV23.EscribirLog("El Multa Finalizacion: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                                else
                                                {
                                                    alquiler.MultaFinalizacion = null;
                                                }

                                            }
                                            else if (row[8].ToString().ToUpper() == "NO" || row[8].ToString().ToUpper() == "FALSE")
                                            {
                                                alquiler.RescisionPenalizacion = false;
                                                alquiler.RescisionPorcentajeRestoContrato = null;
                                                alquiler.RescisionNumeroCuotas = null;
                                                alquiler.MultaFinalizacion = null;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La PENALIZACION no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }


                                            // Salida Anticipada
                                            if (row[12].ToString().ToUpper() == "SI" || row[12].ToString().ToUpper() == "TRUE")
                                            {

                                                alquiler.SalidaAnticipada = true;

                                                //Penalizacion Salida Anticipada
                                                if (row[13].ToString() != "")
                                                {
                                                    try
                                                    {
                                                        alquiler.PenalizacionSalidaAnticipada = Convert.ToDouble(row[13].ToString());

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La PENALIZACION SALIDA ANTICIPADA '" + row[13].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                        //Comun.cLogV23.EscribirLog("El Multa Finalizacion: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                        iWarning++;
                                                    }
                                                }
                                                else
                                                {
                                                    alquiler.PenalizacionSalidaAnticipada = null;
                                                }

                                            }
                                            else if (row[12].ToString().ToUpper() == "NO" || row[12].ToString().ToUpper() == "FALSE")
                                            {
                                                alquiler.SalidaAnticipada = false;
                                                alquiler.PenalizacionSalidaAnticipada = null;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La SALIDA ANTICIPADA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }


                                            // DESCRIPCION DE LA RESCISION
                                            alquiler.RescisionObservaciones = row[14].ToString();

                                            //Periodo Obligado Cumplimiento
                                            if (row[15].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.PeriodoObligatorioCumplimiento = Convert.ToInt32(row[15].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La PERIODO OBLIGADO CUMPLIMIENTO '" + row[15].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Periodo Obligado Cumplimiento: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }

                                        }
                                        else if (row[3].ToString().ToUpper() == "NO" || row[3].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.SalidaAnticipada = false;
                                            alquiler.RescisionDenominacion = null;
                                            alquiler.IFRS16ParteRescisoraID = null;
                                            alquiler.ResolucionAnticipadaPreaviso = null;
                                            alquiler.PeriodoGracia = null;
                                            alquiler.RescisionPenalizacion = false;
                                            alquiler.RescisionPorcentajeRestoContrato = null;
                                            alquiler.RescisionNumeroCuotas = null;
                                            alquiler.MultaFinalizacion = null;
                                            alquiler.SalidaAnticipada = false;
                                            alquiler.PenalizacionSalidaAnticipada = null;
                                            alquiler.RescisionObservaciones = null;
                                            alquiler.PeriodoObligatorioCumplimiento = null;

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El campo IMPLICA RESCISION no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        cAlquileres.UpdateItem(alquiler);
                                        iActualizados++;
                                        #endregion
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog("Resoluciones  " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                    }
                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRescicionesTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRescicionesCargadas" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRescicionesActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRescicionesErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRescicionesWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinResciciones" + ": " + System.Environment.NewLine);

                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RESCISIONES TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RESCISIONES CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RESCISIONES ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RESCISIONES ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RESCISIONES CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN RESCISIONES" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region RETRASOS
                            case 13:


                                maximo = result.Tables[13].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO RETRASOS" + System.Environment.NewLine);
                                foreach (DataRow row in result.Tables[13].Rows)
                                {

                                    cont = cont + 1;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;


                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion


                                    try
                                    {
                                        #region ACTUALIZACION DE RESTRASO PAGO

                                        // DIAS DE RETRASO EN EL PAGO
                                        if (row[3].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.DiaLimitePagoSinRecargo = Convert.ToInt32(row[3].ToString());

                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El DIAS DE RETRASO EN EL PAGO '" + row[3].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("El Tiempo Preaviso Cese Contrato: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            alquiler.DiaLimitePagoSinRecargo = null;
                                        }

                                        // Multa Retraso Pago
                                        if (row[4].ToString() != "")
                                        {
                                            try
                                            {
                                                alquiler.MultaRetrasoPago = Convert.ToDouble(row[4].ToString());

                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La MULTA RETRASO PAGO '" + row[4].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_RETRASO_PAGO + System.Environment.NewLine);
                                                //Comun.cLogV23.EscribirLog("La Multa Retraso Pago: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            alquiler.MultaRetrasoPago = null;
                                        }

                                        // DESCRIPCION DEL RETRASO EN EL PAGO
                                        if (row[5].ToString() != "")
                                        {
                                            alquiler.ObservacionesRetrasoPago = row[5].ToString();
                                            //alquiler.DescripcionRetrasoEnElPago = row[5].ToString();
                                        }
                                        else
                                        {
                                            alquiler.ObservacionesRetrasoPago = null;
                                        }



                                        cAlquileres.UpdateItem(alquiler);
                                        iActualizados++;

                                        #endregion
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog("Retrasos  " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                    }
                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetrasosTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetrasosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetrasosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetrasosErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRetrasosWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinRetrasos" + ": " + System.Environment.NewLine);

                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETRASOS TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETRASOS CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETRASOS ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETRASOS ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": RETRASOS CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN RETRASOS" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region OTRAS CLAUSULAS
                            case 14:


                                maximo = result.Tables[14].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO OTRAS CLAUSULAS" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[14].Rows)
                                {

                                    cont = cont + 1;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion

                                    try
                                    {
                                        #region ACTUALIZACION DE OTRAS CLAUSULAS


                                        // POSIBILIDAD DE SUBARRENDAR
                                        if (row[3].ToString().ToUpper() == "SI" || row[3].ToString().ToUpper() == "TRUE")
                                        {
                                            alquiler.PosibilidadSubarrendar = true;
                                        }
                                        else if (row[3].ToString().ToUpper() == "NO" || row[3].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.PosibilidadSubarrendar = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La POSIBILIDAD DE SUBARRENDAR no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // POSIBILIDAD DE COMPARTICION
                                        if (row[4].ToString().ToUpper() == "SI" || row[4].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.CoubicacionTerceros = true;

                                        }
                                        else if (row[4].ToString().ToUpper() == "NO" || row[4].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.CoubicacionTerceros = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La POSIBILIDAD DE COMPARTICION no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // POSIBILIDAD DE CESION DE DERECHOS
                                        if (row[5].ToString().ToUpper() == "SI" || row[5].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.CesionDerechos = true;

                                        }
                                        else if (row[5].ToString().ToUpper() == "NO" || row[5].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.CesionDerechos = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La POSIBILIDAD DE CESION DE DERECHOS no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // REGLA CONDUCTA ETICA
                                        if (row[6].ToString().ToUpper() == "SI" || row[6].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.NormaConductaEtica = true;

                                        }
                                        else if (row[6].ToString().ToUpper() == "NO" || row[6].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.NormaConductaEtica = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La REGLA CONDUCTA ETICA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // TRABAJO INFANTIL
                                        if (row[7].ToString().ToUpper() == "SI" || row[7].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.NormaContraTrabInfantil = true;

                                        }
                                        else if (row[7].ToString().ToUpper() == "NO" || row[7].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.NormaContraTrabInfantil = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La TRABAJO INFANTIL no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // SEGURIDAD EN EL TRABAJO
                                        if (row[8].ToString().ToUpper() == "SI" || row[8].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.NormaSegSaludTrabajo = true;

                                        }
                                        else if (row[8].ToString().ToUpper() == "NO" || row[8].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.NormaSegSaludTrabajo = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": La SEGURIDAD EN EL TRABAJO no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Contra Blaqueo de Capitales
                                        if (row[9].ToString().ToUpper() == "SI" || row[9].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.ConformidadContraBlanqueoCapitales = true;

                                        }
                                        else if (row[9].ToString().ToUpper() == "NO" || row[9].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.ConformidadContraBlanqueoCapitales = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": CONTRA BLANQUEO DE CAPITALES no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Contraprestación Servicio
                                        if (row[10].ToString().ToUpper() == "SI" || row[10].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.ContraprestacionServicio = true;

                                        }
                                        else if (row[10].ToString().ToUpper() == "NO" || row[10].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.ContraprestacionServicio = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": CONTRAPRESTACION DE SERVICIO no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Aplicar CER
                                        if (row[11].ToString().ToUpper() == "SI" || row[11].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.AplicaCER = true;

                                        }
                                        else if (row[11].ToString().ToUpper() == "NO" || row[11].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.AplicaCER = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": APLICAR CER no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Aplica Grossing
                                        if (row[12].ToString().ToUpper() == "SI" || row[12].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.AplicaGrossing = true;

                                        }
                                        else if (row[12].ToString().ToUpper() == "NO" || row[12].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.AplicaGrossing = false;
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": APLICA GROSSING no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_OTRAS_CLAUSULAS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        cAlquileres.UpdateItem(alquiler);
                                        iActualizados++;
                                        #endregion
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog("Otros  " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                    }
                                    GC.Collect();
                                }


                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strOtrosTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strOtrosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strOtrosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strOtrosErroes" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strOtrosWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinOtrasClausulas" + ": " + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": OTROS TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": OTROS CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": OTROS ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": OTROS ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": OTROS CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN OTROS" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region ARBOL
                            case 15:


                                maximo = result.Tables[15].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO ARBOLES" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[15].Rows)
                                {

                                    cont = cont + 1;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    // Detalles alquileres
                                    AlquileresDetallesController cDetalle = new AlquileresDetallesController();
                                    AlquileresDetalles detalle = null;
                                    try
                                    {

                                        string sCodigoEmpAlq = "";
                                        string sOperadorEmpAlq = "";
                                        string sCodigoDetalle = "";

                                        #region DATOS PRINCIPALES

                                        //Codigo Emplazamiento
                                        if (row[0].ToString() != "")
                                        {
                                            sCodigoEmpAlq = row[0].ToString();

                                            //Operador Emplazamiento
                                            if (row[1].ToString() != "")
                                            {
                                                sOperadorEmpAlq = row[1].ToString();
                                                empAlquiler = new Emplazamientos();
                                                cEmpAlquiler = new EmplazamientosController();
                                                empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                                if (empAlquiler == null)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                                else
                                                {

                                                    if (row[2].ToString() != "")
                                                    {
                                                        sNumContrato = row[2].ToString();

                                                        alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                        if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                        {
                                                            //ID Concepto
                                                            if (row[3].ToString() != "")
                                                            {
                                                                sCodigoDetalle = row[3].ToString();
                                                                detalle = cDetalle.GetDetallesByCodigo(sCodigoDetalle, alquiler.AlquilerID);
                                                                if (detalle == null)
                                                                {
                                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---El ID CONCEPTO '" + sCodigoDetalle + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                        #endregion

                                        if (alquiler != null && detalle == null)
                                        {
                                            FinancieroArbolesController cArbolAnterior = new FinancieroArbolesController();
                                            FinancieroArboles arbolAnterior = cArbolAnterior.GetArbolActualByAlquiler(alquiler.AlquilerID);
                                            if (arbolAnterior != null)
                                            {
                                                #region ARBOL EXISTENTE
                                                arbolAnterior.Activo = false;
                                                cArbolAnterior.UpdateItem(arbolAnterior);
                                                iActualizados++;
                                                cArbolAnterior = null;
                                                #endregion

                                            }



                                        }
                                        else if (alquiler != null && detalle != null)
                                        {

                                            FinancieroArbolesController cArbolAnterior = new FinancieroArbolesController();
                                            FinancieroArboles arbolAnterior = cArbolAnterior.GetArbolActualByAlquilerDetalle(detalle.AlquilerDetalleID);
                                            if (arbolAnterior != null)
                                            {
                                                #region ARBOL EXISTENTE
                                                arbolAnterior.Activo = false;
                                                cArbolAnterior.UpdateItem(arbolAnterior);
                                                iActualizados++;
                                                cArbolAnterior = null;
                                                #endregion

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El Alquiler y/o Concepto NO EXISTE EN TREE:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        #region CREACION DE ARBOL

                                        FinancieroArbolesController cArbol = new FinancieroArbolesController();
                                        FinancieroArboles arbol = new FinancieroArboles();
                                        arbol.FinancieroArbol = "Arbol-" + alquiler.NumContrato;
                                        arbol.AlquilerID = alquiler.AlquilerID;
                                        arbol.Activo = true;
                                        arbol.FechaCreacion = DateTime.Now;
                                        arbol.UsuarioID = Convert.ToInt32(odoccarga.UsuarioID);
                                        if (detalle != null)
                                        {
                                            arbol.AlquilerDetalleID = detalle.AlquilerDetalleID;
                                        }
                                        arbol = cArbol.AddItem(arbol);
                                        iCargados++;
                                        if (arbol != null)
                                        {
                                            FinancieroArbolesPreguntasController cPreguntas = new FinancieroArbolesPreguntasController();
                                            List<FinancieroArbolesPreguntas> listaPreguntas = cPreguntas.GetPreguntasActivas(true);
                                            int i = 5;
                                            foreach (FinancieroArbolesPreguntas pregunta in listaPreguntas)
                                            {
                                                FinancieroArbolesRespuestasController cRespuesta = new FinancieroArbolesRespuestasController();
                                                FinancieroArbolesRespuestas respuesta = new FinancieroArbolesRespuestas();
                                                respuesta.Activo = true;
                                                respuesta.FinancieroArbolID = arbol.FinancieroArbolID;
                                                respuesta.FinancieroArbolPreguntaID = pregunta.FinancieroArbolPreguntaID;
                                                if (row[i].ToString() != "")
                                                {
                                                    FinancieroArbolesRespuestasPosiblesController cPosibles = new FinancieroArbolesRespuestasPosiblesController();
                                                    FinancieroArbolesRespuestasPosibles posible = cPosibles.GetRespuestaByPreguntaRespuesta(pregunta.FinancieroArbolPreguntaID, row[i].ToString());
                                                    if (posible != null)
                                                    {
                                                        respuesta.FinancieroArbolRespuestaPosibleID = posible.FinancieroArbolRespuestaPosibleID;
                                                        cRespuesta.AddItem(respuesta);
                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La RESPUESTA '" + row[i].ToString() + "' no es válida:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                        iWarning++;
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La RESPUESTA '" + i + "' no puede ser vacia:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                    iWarning++;
                                                    break;
                                                }
                                                i = i + 1;
                                            }

                                        }

                                        // Actualiza la clase de activo
                                        if (row[4].ToString() != "")
                                        {
                                            AlquileresClasesActivosController cClaseActivoController = new AlquileresClasesActivosController();
                                            AlquileresClasesActivos claseAc = cClaseActivoController.GetActivoByCodigo(row[4].ToString());
                                            if (claseAc != null)
                                            {
                                                alquiler.AlquilerClaseActivoID = claseAc.AlquilerClaseActivoID;
                                                cAlquileres.UpdateItem(alquiler);
                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CLASE ACTIVO '" + row[4].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + sCodigoDetalle + "---La CLASE ACTIVO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_ARBOL + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        #endregion



                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog("Arbol  " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                    }
                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strArbolesTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strArbolesCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strArbolesActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strArbolesErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strArbolesRespuestasErrores" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinArboles" + ": " + System.Environment.NewLine);

                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": ARBOLES TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": ARBOLES CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": ARBOLES ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": ARBOLES ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": ARBOLES CON RESPUESTA ERRONEA: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN ARBOLES" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region TRATAMIENTO PREVIO
                            case 16:


                                maximo = result.Tables[16].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO TRATAMIENTO PREVIO IFRS" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[16].Rows)
                                {

                                    cont = cont + 1;

                                    //Emplazamientos
                                    EmplazamientosController cEmpTrata = new EmplazamientosController();
                                    Emplazamientos oEmplazamientoTrata = null;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    try
                                    {

                                        string sCodigoEmpAlq = "";
                                        string sOperadorEmpAlq = "";


                                        #region DATOS PRINCIPALES

                                        //Codigo Emplazamiento
                                        if (row[0].ToString() != "")
                                        {
                                            sCodigoEmpAlq = row[0].ToString();

                                            //Operador Emplazamiento
                                            if (row[1].ToString() != "")
                                            {
                                                sOperadorEmpAlq = row[1].ToString();
                                                oEmplazamientoTrata = new Emplazamientos();
                                                cEmpTrata = new EmplazamientosController();
                                                oEmplazamientoTrata = cEmpTrata.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                                if (oEmplazamientoTrata == null)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }
                                                else
                                                {
                                                    //Num Contrato
                                                    if (row[2].ToString() != "")
                                                    {
                                                        sNumContrato = row[2].ToString();

                                                        alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, oEmplazamientoTrata.EmplazamientoID);

                                                        if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                        {

                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El ALQUILER NO EXISTE EN TREE" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }
                                        #endregion

                                        if (alquiler != null)
                                        {
                                            #region ACTUALIZACION DEL TRATAMIENTO PREVIO IFRS16

                                            // TRATAMIENTO PREVIO
                                            if (row[3].ToString() != "")
                                            {
                                                SAPIFRS16TratamientosPreviosController cTrata = new SAPIFRS16TratamientosPreviosController();
                                                IFRS16TratamientosPrevios tratamiento = cTrata.GetTratamientoPrevioByNombre(row[3].ToString());
                                                if (tratamiento != null)
                                                {
                                                    alquiler.IFRS16TratamientoPrevioID = tratamiento.IFRS16TratamientoPrevioID;
                                                    cAlquileres.UpdateItem(alquiler);
                                                    iActualizados++;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "---El TRATAMIENTO PREVIO '" + row[3].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }


                                            }
                                            else
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato/Concepto: " + sCodigoEmpAlq + "/" + sNumContrato + "/" + "---El TRATAMIENTO PREVIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_TRATAMIENTO_PREVIO_IFRS + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }


                                            #endregion
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog("Tratamiento Previo  " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                    }
                                    GC.Collect();
                                }


                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strTratamientosTotales" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strTratamientosCargados" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strTratamientosActualizados" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strTratamientosErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strTratamientosWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinTratamiento" + ": " + System.Environment.NewLine);

                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": TRATAMIENTO PREVIO TOTALES: " + maximo + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": TRATAMIENTO PREVIO CARGADOS: " + iCargados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": TRATAMIENTO PREVIO ACTUALIZADOS: " + iActualizados.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": TRATAMIENTO PREVIO ERRORES: " + iErrores.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": TRATAMIENTO PREVIO CARGADOS/ACTUALIZADOS CON WARNING: " + iWarning.ToString() + System.Environment.NewLine);
                                ////Comun.cLogV23.EscribirLog(Comun.INFO + ": FIN TRATAMIENTO PREVIO" + System.Environment.NewLine);
                                break;
                            #endregion

                            #region FIANZAS
                            case 17:


                                maximo = result.Tables[17].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ": INICIO FIANZAS" + System.Environment.NewLine);

                                foreach (DataRow row in result.Tables[17].Rows)
                                {

                                    cont = cont + 1;

                                    AlquileresController cAlquileres = new AlquileresController();
                                    Alquileres alquiler = null;

                                    string sCodigoEmpAlq = "";
                                    string sOperadorEmpAlq = "";

                                    #region DATOS PRINCIPALES

                                    //Codigo Emplazamiento
                                    if (row[0].ToString() != "")
                                    {
                                        sCodigoEmpAlq = row[0].ToString();

                                        //Operador Emplazamiento
                                        if (row[1].ToString() != "")
                                        {
                                            sOperadorEmpAlq = row[1].ToString();
                                            empAlquiler = new Emplazamientos();
                                            cEmpAlquiler = new EmplazamientosController();
                                            empAlquiler = cEmpAlquiler.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmpAlq, sOperadorEmpAlq, cliID);

                                            if (empAlquiler == null)
                                            {
                                                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El SITIO no existe en TREE:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                            else
                                            {

                                                if (row[2].ToString() != "")
                                                {
                                                    sNumContrato = row[2].ToString();

                                                    alquiler = cAlquileres.AlquilerByNumeroContrato(sNumContrato, empAlquiler.EmplazamientoID);

                                                    if (alquiler != null && alquiler.NumContrato != null && alquiler.NumContrato != "")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CONTRATO no existe en TREE para el sitio:" + sCodigoEmpAlq + "/" + sOperadorEmpAlq + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }

                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El NUM CONTRATO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El OPERADOR DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                    }
                                    else
                                    {
                                        //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }
                                    #endregion



                                    try
                                    {
                                        #region ACTUALIZACION DE FIANZA


                                        // Fianza
                                        if (row[3].ToString().ToUpper() == "SI" || row[3].ToString().ToUpper() == "TRUE")
                                        {

                                            alquiler.TieneFianza = true;

                                            // Monto Fianza
                                            if (row[4].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.ImporteFianza = Convert.ToDouble(row[4].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El MONTO FIANZA '" + row[4].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Monto Fianza: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.ImporteFianza = null;
                                            }

                                            // Moneda Fianza
                                            if (row[5].ToString() != "")
                                            {
                                                MonedasController cFianzaMonedas = new MonedasController();
                                                long fianzaMonedaID = cFianzaMonedas.GetMonedaBySimbolo(row[5].ToString());

                                                if (fianzaMonedaID > 0)
                                                {
                                                    alquiler.MonedaFianzaID = fianzaMonedaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El SIMBOLO MONEDA '" + row[5].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.MonedaFianzaID = null;
                                            }


                                            // Aseguradora
                                            if (row[6].ToString() != "")
                                            {
                                                AseguradorasController cAseguradoras = new AseguradorasController();
                                                Aseguradoras oAseguradora = null;
                                                oAseguradora = cAseguradoras.GetItem("Aseguradora ==\"" + row[6].ToString() + "\" &&Activo");
                                                if (cAseguradoras != null)
                                                {
                                                    alquiler.AseguradoraID = oAseguradora.AseguradoraID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La ASEGURADORA '" + row[6].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_RESCISION + System.Environment.NewLine);
                                                    iWarning++;
                                                }

                                            }
                                            else
                                            {
                                                alquiler.AseguradoraID = null;
                                            }

                                            // Importe Deposito Garantia
                                            if (row[7].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.ImporteDepositoGarantia = Convert.ToDouble(row[7].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El DEPOSITO GARANTIA '" + row[7].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Deposito Garantia: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.ImporteDepositoGarantia = null;
                                            }


                                            // Moneda Fianza
                                            if (row[8].ToString() != "")
                                            {
                                                MonedasController cDepositoMonedas = new MonedasController();
                                                long depositoMonedaID = cDepositoMonedas.GetMonedaBySimbolo(row[8].ToString());

                                                if (depositoMonedaID > 0)
                                                {
                                                    alquiler.MonedaDepositoID = depositoMonedaID;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El SIMBOLO MONEDA DEPOSITO '" + row[8].ToString() + "' no existe en TREE:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.MonedaDepositoID = null;
                                            }

                                            // Fecha Vencimiento
                                            if (row[9].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.FechaVencimiento = Convert.ToDateTime(row[9].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---La FECHA VENCIMIENTO '" + row[9].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("La Fecha Vencimiento: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.FechaVencimiento = null;
                                            }



                                            //Incremento fianza
                                            if (row[10].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.IncrementoFianza = Convert.ToDouble(row[10].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El INCREMENTO FIANZA '" + row[10].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Incremento fianza: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.IncrementoFianza = null;
                                            }

                                            //% Interes Mora
                                            if (row[11].ToString() != "")
                                            {
                                                try
                                                {
                                                    alquiler.PorcentajeInteresMora = Convert.ToDouble(row[11].ToString());

                                                }
                                                catch (Exception ex)
                                                {
                                                    //Comun.cLogV23.EscribirLog(Comun.ERROR + ": Codigo/NumContrato: " + sCodigoEmpAlq + "/" + sNumContrato + "---El % INTERES MORA '" + row[11].ToString() + "' no tiene el formato correcto:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                                    //Comun.cLogV23.EscribirLog("El Incremento fianza: " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                                                    iWarning++;
                                                }
                                            }
                                            else
                                            {
                                                alquiler.PorcentajeInteresMora = null;
                                            }


                                        }
                                        else if (row[3].ToString().ToUpper() == "NO" || row[3].ToString().ToUpper() == "FALSE")
                                        {
                                            alquiler.TieneFianza = false;
                                            alquiler.ImporteFianza = null;
                                            alquiler.MonedaFianzaID = null;
                                            alquiler.AseguradoraID = null;
                                            alquiler.ImporteDepositoGarantia = null;
                                            alquiler.MonedaDepositoID = null;
                                            alquiler.FechaVencimiento = null;
                                            alquiler.IncrementoFianza = null;
                                            alquiler.PorcentajeInteresMora = null;

                                        }
                                        else
                                        {
                                            //Comun.cLogV23.EscribirLog(Comun.ERROR + ": El campo TIENE FIANZA no puede ser vacia o no es SI, ni NO, es un campo obligatorio:" + Comun.ERROR_NO_CREADO_FIANZA + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        cAlquileres.UpdateItem(alquiler);
                                        iActualizados++;
                                        #endregion
                                    }
                                    catch (Exception ex)
                                    {
                                        //Comun.cLogV23.EscribirLog("Fianzas  " + sCodigo + " - " + "V23" + " Exception Code 100" + Environment.NewLine);
                                    }
                                    GC.Collect();
                                }

                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFianzasTotal" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFianzasCargadas" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFianzasActualizadas" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFianzasErrores" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFianzasWarning" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strFinFianzas" + ": " + System.Environment.NewLine);


                                break;
                                #endregion


                        }

                        #region Control Estadistica Cargas Masivas


                        MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
                        int iCounterExitos = 0;
                        int iCounterFallos = 0;
                        string sTipoCarga = "V23";

                        cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


                        #endregion
                    }


                }
                else
                {
                    //Comun.cLogV23.EscribirLog("Cargar Plantilla V23:No se puede realizar la carga,falta datos necesario  " + Environment.NewLine);
                    sSalida = "ERROR";
                }


            }
            catch (Exception ex)
            {

                //Comun.cLogV23.EscribirLog(Comun.ERROR + ": SERVICEIMPORTEXPORTCargarPlantillaV23; " + "V23" + " Exception Code 100" + System.Environment.NewLine);
                sSalida = "ERROR";
            }

            return sSalida;
            // Returns the result

        }*/

        //public static string CargarPlantillaV23Propietarios(System.IO.Stream datos, DocumentosCargas odoccarga)
        //{
        //    string sSalida = "";

        //    long cliID = 0;

        //    int maximo = 0;
        //    //string tipocarga = "PLANTILLA V23";
        //    DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
        //    DocumentosCargas odocumentocarga = new DocumentosCargas();
        //    try
        //    {
        //        // Reads the information from the excel file

        //        IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
        //        System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
        //        prov.NumberDecimalSeparator = ".";

        //        DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
        //        {
        //            ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
        //            {
        //                UseHeaderRow = true
        //            }
        //        });




        //        // Reads client information
        //        if (odoccarga.ClienteID != null && odoccarga.OperadorID != null && odoccarga.TabInicial != null && odoccarga.TabFinal != null)
        //        {
        //            cliID = Convert.ToInt32(odoccarga.ClienteID);

        //            // Stores the information
        //            int iInitialTab = 0;

        //            int numTabs = result.Tables.Count;
        //            int k = 3;
        //            //numTabs = 5;
        //            int iCargados = 0;
        //            int iActualizados = 0;
        //            int iErrores = 0;
        //            int iWarning = 0;


        //            if (odoccarga.TabInicial != null)
        //            {
        //                iInitialTab = (int)odoccarga.TabInicial;
        //            }

        //            if (odoccarga.TabFinal != null)
        //            {
        //                numTabs = (int)odoccarga.TabFinal;
        //            }
        //            // Checks all the tabs
        //            for (k = iInitialTab; k < numTabs; k = k + 1)
        //            {
        //                switch (k)
        //                {
        //                    #region PROPIETARIOS
        //                    case 1:

        //                        maximo = result.Tables[0].Rows.Count;
        //                        iActualizados = 0;
        //                        iCargados = 0;
        //                        iErrores = 0;
        //                        iWarning = 0;

        //                        EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strImportar + " " + Recursos.strPropietario);
        //                        foreach (DataRow row in result.Tables[0].Rows)
        //                        {


        //                            string sIdentificador = row[0].ToString();
        //                            string sRazonSocial = row[3].ToString();
        //                            string sEmail = row[6].ToString();

        //                            Propietarios propietario = null;
        //                            PropietariosController cPropietario = new PropietariosController();
        //                            propietario = cPropietario.GetPropietarioByDNI(sIdentificador);

        //                            if (propietario != null)
        //                            {
        //                                #region ACTUALIZAR PROPIETARIO

        //                                // Codigo SAP                                            
        //                                propietario.CodigoSAP = row[1].ToString();

        //                                //Tipo Propietario
        //                                if (row[2].ToString() != "")
        //                                {
        //                                    AlquileresTiposPropietariosController cTiposPropietarios = new AlquileresTiposPropietariosController();
        //                                    long tipopropietarioID = cTiposPropietarios.GetTipoByNombreAll(row[2].ToString());

        //                                    if (tipopropietarioID > 0)
        //                                    {
        //                                        propietario.TipoPropietarioID = tipopropietarioID;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoPropietarios(sIdentificador, Recursos.strTipoPropietario);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                }

        //                                // razón social
        //                                if (sRazonSocial != "")
        //                                {
        //                                    propietario.Nombre = sRazonSocial;
        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoPropietarios(sIdentificador, Recursos.strNombre);
        //                                    iErrores++;
        //                                    continue;
        //                                }

        //                                // Apellidos
        //                                if (row[4].ToString() != "" && row[4].ToString() != null)
        //                                {
        //                                    propietario.Apellidos = row[4].ToString();
        //                                }
        //                                else
        //                                {
        //                                    propietario.Apellidos = "";
        //                                }

        //                                //Alias
        //                                propietario.Alias = row[5].ToString();

        //                                // Email
        //                                if (sEmail != "")
        //                                {

        //                                    if (sEmail.Contains("@"))
        //                                    {
        //                                        propietario.Email = sEmail;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoPropietarios(sIdentificador, Recursos.strEmail);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoPropietarios(sIdentificador, Recursos.strEmail);
        //                                    iErrores++;
        //                                    continue;
        //                                }


        //                                // Telefono
        //                                propietario.Telefono = row[7].ToString();

        //                                // Telefono 2
        //                                propietario.Telefono2 = row[8].ToString();

        //                                // Telefono movil
        //                                propietario.Movil = row[9].ToString();



        //                                // Pais
        //                                if (row[10].ToString() != "")
        //                                {
        //                                    PaisesController cPaises = new PaisesController();
        //                                    long paisID = cPaises.GetPaisByNombre(row[10].ToString());
        //                                    if (paisID > 0)
        //                                    {
        //                                        propietario.PaisID = paisID;

        //                                        // Region
        //                                        if (row[11].ToString() != "")
        //                                        {
        //                                            RegionesPaisesController cRegiones = new RegionesPaisesController();
        //                                            long propietarioRegionID = cRegiones.GetRegionIDByNombre(row[11].ToString(), paisID);
        //                                            if (propietarioRegionID > 0)
        //                                            {
        //                                                propietario.RegionID = propietarioRegionID;

        //                                                // Provincia
        //                                                if (row[12].ToString() != "")
        //                                                {
        //                                                    ProvinciasController cProvincias = new ProvinciasController();
        //                                                    long provinciaID = cProvincias.GetProvinciaIDByNombre(row[12].ToString(), propietarioRegionID);
        //                                                    if (provinciaID > 0)
        //                                                    {
        //                                                        propietario.ProvinciaID = provinciaID;

        //                                                        // Municipio
        //                                                        if (row[13].ToString() != "")
        //                                                        {
        //                                                            MunicipiosController cMunicipios = new MunicipiosController();
        //                                                            long municipioID = cMunicipios.GetMunicipioIDByNombre(row[13].ToString(), provinciaID);
        //                                                            if (municipioID > 0)
        //                                                            {
        //                                                                propietario.MunicipioID = municipioID;
        //                                                            }
        //                                                            else
        //                                                            {
        //                                                                LogInfoCampoNoCreadoPropietarios(sIdentificador, Recursos.strMunicipio);
        //                                                                iWarning++;
        //                                                            }
        //                                                        }

        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        LogInfoCampoNoCreadoPropietarios(sIdentificador, Recursos.strProvincia);
        //                                                        iWarning++;
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                LogInfoCampoNoCreadoPropietarios(sIdentificador, Recursos.strRegionPais);
        //                                                iWarning++;
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoNoCreadoPropietarios(sIdentificador, Recursos.strPais);
        //                                        iErrores++;
        //                                        continue;
        //                                    }
        //                                }

        //                                // Direccion
        //                                propietario.Direccion = row[14].ToString();

        //                                // Codigo postal
        //                                propietario.CodigoPostal = row[15].ToString();

        //                                // Observaciones
        //                                propietario.Observaciones = row[16].ToString();

        //                                // Se pone activo
        //                                propietario.Activo = true;

        //                                cPropietario.UpdateItem(propietario);
        //                                iActualizados++;

        //                                #endregion

        //                            }
        //                            else
        //                            {
        //                                #region CREAR PROPIETARIO

        //                                propietario = new Propietarios();

        //                                // Clientes
        //                                propietario.ClienteID = cliID;

        //                                // ID Propietario-DNI
        //                                if (sIdentificador != "")
        //                                {

        //                                    propietario.DNIPropietario = sIdentificador;
        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoPropietarios(sIdentificador, Recursos.strCIF);
        //                                    iErrores++;
        //                                    continue;
        //                                }
        //                                // ID Propietario SAP-Codigo SAP                                            
        //                                propietario.CodigoSAP = row[1].ToString();

        //                                //Tipo Propietario
        //                                if (row[2].ToString() != "")
        //                                {
        //                                    AlquileresTiposPropietariosController cTiposPropietarios = new AlquileresTiposPropietariosController();
        //                                    long tipopropietarioID = cTiposPropietarios.GetTipoByNombreAll(row[2].ToString());

        //                                    if (tipopropietarioID > 0)
        //                                    {
        //                                        propietario.TipoPropietarioID = tipopropietarioID;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoNoCreadoPropietarios(sIdentificador, Recursos.strTipoPropietario);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                }

        //                                // Razon Social/Nombre

        //                                if (sRazonSocial != "")
        //                                {
        //                                    propietario.Nombre = sRazonSocial;
        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoPropietarios(sIdentificador, Recursos.strNombre);
        //                                    iErrores++;
        //                                    continue;
        //                                }


        //                                // Apellidos
        //                                if (row[4].ToString() != "" && row[4].ToString() != null)
        //                                {
        //                                    propietario.Apellidos = row[4].ToString();
        //                                }
        //                                else
        //                                {
        //                                    propietario.Apellidos = "";
        //                                }



        //                                //Alias
        //                                propietario.Alias = row[5].ToString();

        //                                // Email
        //                                if (sEmail != "")
        //                                {

        //                                    if (sEmail.Contains("@"))
        //                                    {
        //                                        propietario.Email = row[6].ToString();
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoPropietarios(sIdentificador, Recursos.strEmail);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoPropietarios(sIdentificador, Recursos.strEmail);
        //                                    iErrores++;
        //                                    continue;
        //                                }


        //                                // Telefono
        //                                propietario.Telefono = row[7].ToString();

        //                                // Telefono 2
        //                                propietario.Telefono2 = row[8].ToString();

        //                                // Telefono movil
        //                                propietario.Movil = row[9].ToString();

        //                                // Pais
        //                                if (row[10].ToString() != "")
        //                                {
        //                                    PaisesController cPaises = new PaisesController();
        //                                    long paisID = cPaises.GetPaisByNombre(row[10].ToString());
        //                                    if (paisID > 0)
        //                                    {
        //                                        propietario.PaisID = paisID;

        //                                        // Region
        //                                        if (row[11].ToString() != "")
        //                                        {
        //                                            RegionesPaisesController cRegiones = new RegionesPaisesController();
        //                                            long propietarioRegionID = cRegiones.GetRegionIDByNombre(row[11].ToString(), paisID);
        //                                            if (propietarioRegionID > 0)
        //                                            {
        //                                                propietario.RegionID = propietarioRegionID;

        //                                                // Provincia
        //                                                if (row[12].ToString() != "")
        //                                                {
        //                                                    ProvinciasController cProvincias = new ProvinciasController();
        //                                                    long provinciaID = cProvincias.GetProvinciaIDByNombre(row[12].ToString(), propietarioRegionID);
        //                                                    if (provinciaID > 0)
        //                                                    {
        //                                                        propietario.ProvinciaID = provinciaID;

        //                                                        // Municipio
        //                                                        if (row[13].ToString() != "")
        //                                                        {
        //                                                            MunicipiosController cMunicipios = new MunicipiosController();
        //                                                            long municipioID = cMunicipios.GetMunicipioIDByNombre(row[13].ToString(), provinciaID);
        //                                                            if (municipioID > 0)
        //                                                            {
        //                                                                propietario.MunicipioID = municipioID;
        //                                                            }
        //                                                            else
        //                                                            {
        //                                                                LogInfoCampoNoCreadoPropietarios(sIdentificador, Recursos.strMunicipio);
        //                                                                iWarning++;
        //                                                            }
        //                                                        }

        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        LogInfoCampoNoCreadoPropietarios(sIdentificador, Recursos.strProvincia);
        //                                                        iWarning++;
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {

        //                                                LogInfoCampoNoCreadoPropietarios(sIdentificador, Recursos.strRegionPais);
        //                                                iWarning++;
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoNoCreadoPropietarios(sIdentificador, Recursos.strPais);
        //                                        iErrores++;
        //                                        continue;
        //                                    }
        //                                }


        //                                // Direccion
        //                                propietario.Direccion = row[14].ToString();

        //                                // Codigo postal
        //                                propietario.CodigoPostal = row[15].ToString();

        //                                // Observaciones
        //                                propietario.Observaciones = row[16].ToString();

        //                                // Se pone activo
        //                                propietario.Activo = true;

        //                                //Agregamos
        //                                cPropietario.AddItem(propietario);
        //                                iCargados++;


        //                                #endregion
        //                            }

        //                            GC.Collect();
        //                        }
        //                        EscritorLogs.EscribeLogs("TOTAL OWNERS" + ": " + maximo);
        //                        EscritorLogs.EscribeLogs("OWNERS CHARGED" + ": " + iCargados.ToString());
        //                        EscritorLogs.EscribeLogs("OWNERS UPDATED" + ": " + iActualizados.ToString());
        //                        EscritorLogs.EscribeLogs("OWNERS ERROR" + ": " + iErrores.ToString());
        //                        EscritorLogs.EscribeLogs("OWNER WARNING" + ": " + iWarning.ToString());
        //                        EscritorLogs.EscribeLogs("END OWNERS");

        //                        break;
        //                        #endregion
        //                }

        //                #region Control Estadistica Cargas Masivas


        //                MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
        //                int iCounterExitos = 0;
        //                int iCounterFallos = 0;
        //                string sTipoCarga = "V23";

        //                cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


        //                #endregion
        //            }


        //        }
        //        else
        //        {
        //            log.Error("Owners load: Cannot to load,missing necessary data.");
        //            sSalida = "ERROR";
        //        }


        //    }
        //    catch (Exception ex)
        //    {

        //        log.Error("SERVICEIMPORTEXPORTOWNERS: " + "OWNERS LOAD " + Recursos.strCodigoExcepcion100);
        //        sSalida = "ERROR";
        //    }

        //    return sSalida;
        //    // Returns the result

        //}

        //public static string CargarPlantillaV23Proveedores(System.IO.Stream datos, DocumentosCargas odoccarga)
        //{


        //    string sSalida = "";
        //    string sCodigo = null;
        //    long cliID = 0;
        //    int cont = 0;
        //    int maximo = 0;
        //    //string tipocarga = "PLANTILLA V23";
        //    DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
        //    DocumentosCargas odocumentocarga = new DocumentosCargas();
        //    try
        //    {
        //        // Reads the information from the excel file

        //        IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
        //        System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
        //        prov.NumberDecimalSeparator = ".";

        //        DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
        //        {
        //            ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
        //            {
        //                UseHeaderRow = true
        //            }
        //        });




        //        // Reads client information
        //        if (odoccarga.ClienteID != null && odoccarga.OperadorID != null && odoccarga.TabInicial != null && odoccarga.TabFinal != null)
        //        {
        //            cliID = Convert.ToInt32(odoccarga.ClienteID);

        //            // Stores the information
        //            int iInitialTab = 0;

        //            int numTabs = result.Tables.Count;
        //            int k = 3;
        //            //numTabs = 5;
        //            int iCargados = 0;
        //            int iActualizados = 0;
        //            int iErrores = 0;
        //            int iWarning = 0;



        //            if (odoccarga.TabInicial != null)
        //            {
        //                iInitialTab = (int)odoccarga.TabInicial;
        //            }

        //            if (odoccarga.TabFinal != null)
        //            {
        //                numTabs = (int)odoccarga.TabFinal;
        //            }




        //            // Checks all the tabs
        //            for (k = iInitialTab; k < numTabs; k = k + 1)
        //            {
        //                switch (k)
        //                {


        //                    #region PROVEEDORES
        //                    case 1:

        //                        maximo = result.Tables[0].Rows.Count;
        //                        iActualizados = 0;
        //                        iCargados = 0;
        //                        iErrores = 0;
        //                        iWarning = 0;

        //                        EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strImportar + " " + Recursos.strProveedor);

        //                        foreach (DataRow row in result.Tables[0].Rows)
        //                        {

        //                            cont = cont + 1;
        //                            string sIdentificador = row[0].ToString();
        //                            string sRazonSocial = row[1].ToString();
        //                            string sDireccion = row[2].ToString();
        //                            string sCodigoSAP = row[28].ToString();


        //                            // Proveedores
        //                            Proveedores proveedor = null;
        //                            ProveedoresController cProveedores = new ProveedoresController();



        //                            // Gets the renting contract
        //                            if (sIdentificador != "" && sCodigoSAP != "")
        //                            {
        //                                proveedor = cProveedores.GetProveedorByCIFSAP(sIdentificador, sCodigoSAP);


        //                                if (proveedor != null)
        //                                {
        //                                    #region UPDATES PROVIDER

        //                                    // Razon Social/Nombre
        //                                    if (sRazonSocial != "")
        //                                    {
        //                                        proveedor.FacturacionRazonSocial = sRazonSocial;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strNombre);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // Direccion
        //                                    if (sDireccion != "")
        //                                    {
        //                                        proveedor.FacturacionDireccion = sDireccion;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strDireccion);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // Codigo Postal
        //                                    proveedor.FacturacionCP = row[3].ToString();

        //                                    // Pais
        //                                    if (row[4].ToString() != "")
        //                                    {
        //                                        PaisesController cPais = new PaisesController();
        //                                        long paisID = cPais.GetPaisByNombre(row[4].ToString());
        //                                        if (paisID > 0)
        //                                        {
        //                                            proveedor.PaisID = paisID;

        //                                            // Region
        //                                            if (row[5].ToString() != "")
        //                                            {
        //                                                RegionesPaisesController cRegion = new RegionesPaisesController();
        //                                                RegionesPaises region = cRegion.GetRegionCompletaByNombre(row[5].ToString(), proveedor.PaisID);
        //                                                if (region != null)
        //                                                {
        //                                                    proveedor.Region = row[5].ToString();

        //                                                    // Provincia
        //                                                    if (row[6].ToString() != "")
        //                                                    {
        //                                                        ProvinciasController cProvincias = new ProvinciasController();
        //                                                        Provincias provincia = cProvincias.GetProvinciaByNombre(row[6].ToString(), region.RegionPaisID);
        //                                                        if (provincia != null)
        //                                                        {
        //                                                            proveedor.FacturacionProvicia = row[6].ToString();

        //                                                            // Municipio
        //                                                            if (row[7].ToString() != "")
        //                                                            {
        //                                                                MunicipiosController cMunicipios = new MunicipiosController();
        //                                                                long municipioID = cMunicipios.GetMunicipioIDByNombre(row[7].ToString(), provincia.ProvinciaID);
        //                                                                if (municipioID > 0)
        //                                                                {
        //                                                                    proveedor.FacturacionMunicipio = row[7].ToString();
        //                                                                }
        //                                                                else
        //                                                                {
        //                                                                    LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strMunicipio);
        //                                                                    iWarning++;
        //                                                                }
        //                                                            }


        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strProvincia);
        //                                                            iWarning++;
        //                                                        }
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                    }

        //                                                }
        //                                                else
        //                                                {
        //                                                    LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strRegionPais);
        //                                                    iWarning++;
        //                                                }
        //                                            }

        //                                        }
        //                                        else
        //                                        {
        //                                            LogErrorCampoNoCreadoProveedores(sIdentificador, Recursos.strPais);
        //                                            iErrores++;
        //                                            continue;
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoNoCreadoProveedores(sIdentificador, Recursos.strPais);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // LITERAL FORMA PAGO
        //                                    if (row[8].ToString() != "")
        //                                    {
        //                                        MetodosPagosController cMetodo = new MetodosPagosController();
        //                                        long metodoID = cMetodo.GetMetodoByCodigoAll(row[8].ToString());
        //                                        if (metodoID > 0)
        //                                        {
        //                                            proveedor.MetodoPagoID = metodoID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strMetodoPago);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // TIPO CONTRIBUYENTE
        //                                    if (row[9].ToString() != "")
        //                                    {
        //                                        TiposContribuyentesController cContribuyente = new TiposContribuyentesController();
        //                                        long contriID = cContribuyente.GetTiposContribuyentes(row[9].ToString());
        //                                        if (contriID > 0)
        //                                        {
        //                                            proveedor.TipoContribuyenteID = contriID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogErrorCampoNoCreadoProveedores(sIdentificador, Recursos.strTipoContribuyente);
        //                                            iErrores++;
        //                                            continue;
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strTipoContribuyente);
        //                                        iErrores++;
        //                                        continue;
        //                                    }



        //                                    // Tipo de número de identificación fiscal (SAPTiposNIF - Codigo)
        //                                    SAPTiposNIFController cTipoNif = new SAPTiposNIFController();
        //                                    if (row[10].ToString() != "")
        //                                    {
        //                                        SAPTiposNIF tipoNif = cTipoNif.GetTipoNifByCodigo(row[10].ToString());
        //                                        if (tipoNif != null)
        //                                        {
        //                                            proveedor.SAPTipoNIFID = tipoNif.SAPTipoNIFID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoProveedores(sIdentificador, Recursos.strCIF);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // Tratamiento del proveedor
        //                                    SAPTratamientosController cTratamiento = new SAPTratamientosController();
        //                                    if (row[11].ToString() != "")
        //                                    {
        //                                        SAPTratamientos tratamiento = cTratamiento.GetTratamientoByNombre(row[11].ToString());
        //                                        if (tratamiento != null)
        //                                        {
        //                                            proveedor.SAPTratamientoID = tratamiento.SAPTratamientoID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoProveedores(sIdentificador, Recursos.strTratamiento);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // Grupo de cuentas acreedor                                        
        //                                    SAPGruposCuentasController cGrupoCuenta = new SAPGruposCuentasController();
        //                                    if (row[12].ToString() != "")
        //                                    {
        //                                        SAPGruposCuentas grupoCuenta = cGrupoCuenta.GetGrupoCuentaByNombre(row[12].ToString());
        //                                        if (grupoCuenta != null)
        //                                        {
        //                                            proveedor.SAPGrupoCuentaID = grupoCuenta.SAPGrupoCuentaID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strGrupoCuenta);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // Cuenta asociada a la contabilidad principal
        //                                    SAPCuentasAsociadasController cSAPCuentasAsociadas = new SAPCuentasAsociadasController();
        //                                    if (row[13].ToString() != "")
        //                                    {
        //                                        SAPCuentasAsociadas CuentaAsociada = cSAPCuentasAsociadas.GetCuentaAsociadaByNombre(row[13].ToString());
        //                                        if (CuentaAsociada != null)
        //                                        {
        //                                            proveedor.SAPCuentaAsociadaID = CuentaAsociada.SAPCuentaAsociadaID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strCuentasAsociadas);
        //                                            iWarning++;
        //                                        }
        //                                    }


        //                                    // CLAVE PARA CLASIFICAR
        //                                    SAPClavesClasificacionesController cClave = new SAPClavesClasificacionesController();
        //                                    if (row[14].ToString() != "")
        //                                    {
        //                                        SAPClavesClasificaciones claveClasificacion = cClave.GetClaveClasificacionByNombre(row[14].ToString());
        //                                        if (claveClasificacion != null)
        //                                        {
        //                                            proveedor.SAPClaveClasificacionID = claveClasificacion.SAPClaveClasificacionID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strClaveClasificacion);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // GRUPO TESORERÍA
        //                                    SAPGruposTesoreriasController cGrupoTesoreria = new SAPGruposTesoreriasController();
        //                                    if (row[15].ToString() != "")
        //                                    {
        //                                        SAPGruposTesorerias grupoTesoreria = cGrupoTesoreria.GetGrupoTesoreriaByNombre(row[15].ToString());
        //                                        if (grupoTesoreria != null)
        //                                        {
        //                                            proveedor.SAPGrupoTesoreriaID = grupoTesoreria.SAPGrupoTesoreriaID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strGrupoTesoreria);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // CLAVE CONDICIONES DE PAGO
        //                                    CondicionesPagosController cCondiciones = new CondicionesPagosController();
        //                                    if (row[16].ToString() != "")
        //                                    {
        //                                        CondicionesPagos condiciones = cCondiciones.GetCondicionPagoByNombre(row[16].ToString());
        //                                        if (condiciones != null)
        //                                        {
        //                                            proveedor.CondicionPagoID = condiciones.CondicionPagoID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strCondicionesPagos);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // BANCO
        //                                    if (row[17].ToString() != "")
        //                                    {
        //                                        BancosController cBancos = new BancosController();
        //                                        Bancos banco = cBancos.GetBancoByNombre(row[17].ToString());
        //                                        if (banco != null)
        //                                        {
        //                                            proveedor.BancoID = banco.BancoID;
        //                                            proveedor.Banco = banco.Banco;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strBanco);
        //                                            iWarning++;
        //                                            proveedor.Banco = " ";
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        proveedor.Banco = " ";
        //                                    }

        //                                    // CUENTA CORRIENT
        //                                    proveedor.IBAN = row[18].ToString();

        //                                    // Checks for the current iban object
        //                                    try
        //                                    {

        //                                        ProveedoresCuentasCorrientesController cCuentas = new ProveedoresCuentasCorrientesController();
        //                                        ProveedoresCuentasCorrientes cuenta = cCuentas.GetCuentaByProveedorIBAN(proveedor.ProveedorID, proveedor.IBAN);
        //                                        ProveedoresCuentasCorrientesController cCuentasDefecto = new ProveedoresCuentasCorrientesController();
        //                                        ProveedoresCuentasCorrientes cuentaDefecto = cCuentas.GetCuentaByProveedorDefecto(proveedor.ProveedorID);
        //                                        bool bCuenta = true;
        //                                        if (cuenta == null)
        //                                        {
        //                                            cuenta = new ProveedoresCuentasCorrientes();
        //                                            if (proveedor.BancoID != null)
        //                                            {
        //                                                cuenta.BancoID = (long)proveedor.BancoID;
        //                                            }
        //                                            else
        //                                            {
        //                                                bCuenta = false;
        //                                            }
        //                                            cuenta.Activo = true;
        //                                            cuenta.IBAN = proveedor.IBAN;
        //                                            cuenta.ProveedorID = proveedor.ProveedorID;
        //                                            if (bCuenta)
        //                                            {
        //                                                if (cuentaDefecto != null)
        //                                                {
        //                                                    cuenta.Defecto = false;
        //                                                }
        //                                                else
        //                                                {
        //                                                    cuenta.Defecto = true;
        //                                                }
        //                                                cCuentas.AddItem(cuenta);
        //                                            }
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strCuenta);
        //                                        iErrores++;
        //                                    }

        //                                    // NOMBRE REPRESENTANTE
        //                                    proveedor.NombreRepresentanteLegal = row[19].ToString();

        //                                    // DNI REPRESENTANTE
        //                                    proveedor.DNIRepresentanteLegal = row[20].ToString();

        //                                    // NOMBRE CONTACTO
        //                                    proveedor.NombreContacto = row[21].ToString();

        //                                    // TELEFONO CONTACTO
        //                                    proveedor.TelefonoContacto = row[22].ToString();

        //                                    // EMAIL CONTACTO
        //                                    proveedor.EmailContacto = row[23].ToString();

        //                                    // NOMBRE CONTACTO FACTURACION
        //                                    proveedor.NombreFacturacion = row[24].ToString();

        //                                    // TELEFONO FACTURACION
        //                                    proveedor.FacturacionTelefono = row[25].ToString();

        //                                    // EMAIL FACTURACION
        //                                    proveedor.FacturacionEmail = row[26].ToString();

        //                                    //NUM PROVEEDOR
        //                                    proveedor.NumProveedor = row[27].ToString();

        //                                    // Codigo SAP
        //                                    if (sCodigoSAP != "")
        //                                    {
        //                                        proveedor.CodigoSAP = row[28].ToString();
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strCodigoSap);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // DESTINATARIO DEL PAGO
        //                                    proveedor.ANombreDeQuienSaleElPago = row[29].ToString();

        //                                    // TELEFONO DESTINATARIO DEL PAGO
        //                                    proveedor.TelefonoDestinatarioPago = row[30].ToString();

        //                                    // EMAIL DESTINATARIO DEL PAGO
        //                                    proveedor.EmailDeAQuienSaleElPago = row[31].ToString();

        //                                    //Clave SAP Forma Pago. Es solo para exportar, ya se guarda la forma de pago desde la columna Literal Forma Pago

        //                                    // Updates the information
        //                                    cProveedores.UpdateItem(proveedor);
        //                                    iActualizados = iActualizados + 1;
        //                                    #endregion
        //                                }
        //                                else
        //                                {
        //                                    #region CREATES PROVIDER

        //                                    proveedor = new Proveedores();

        //                                    // Tipo del numero de identificación

        //                                    if (sIdentificador != "")
        //                                    {

        //                                        proveedor.FacturacionDNICIF = row[0].ToString();
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strCIF);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // Razon Social/Nombre
        //                                    if (sRazonSocial != "")
        //                                    {
        //                                        proveedor.FacturacionRazonSocial = sRazonSocial;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strNombre);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // Direccion
        //                                    if (sDireccion != "")
        //                                    {
        //                                        proveedor.FacturacionDireccion = sDireccion;
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strDireccion);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // Codigo Postal
        //                                    proveedor.FacturacionCP = row[3].ToString();

        //                                    // Pais
        //                                    if (row[4].ToString() != "")
        //                                    {
        //                                        PaisesController cPais = new PaisesController();
        //                                        long paisID = cPais.GetPaisByNombre(row[4].ToString());
        //                                        if (paisID > 0)
        //                                        {
        //                                            proveedor.PaisID = paisID;

        //                                            // Region
        //                                            if (row[5].ToString() != "")
        //                                            {
        //                                                RegionesPaisesController cRegion = new RegionesPaisesController();
        //                                                RegionesPaises region = cRegion.GetRegionCompletaByNombre(row[5].ToString(), proveedor.PaisID);
        //                                                if (region != null)
        //                                                {
        //                                                    proveedor.Region = row[5].ToString();

        //                                                    // Provincia
        //                                                    if (row[6].ToString() != "")
        //                                                    {
        //                                                        ProvinciasController cProvincias = new ProvinciasController();
        //                                                        Provincias provincia = cProvincias.GetProvinciaByNombre(row[6].ToString(), region.RegionPaisID);
        //                                                        if (provincia != null)
        //                                                        {
        //                                                            proveedor.FacturacionProvicia = row[6].ToString();

        //                                                            // Municipio
        //                                                            if (row[7].ToString() != "")
        //                                                            {
        //                                                                MunicipiosController cMunicipios = new MunicipiosController();
        //                                                                long municipioID = cMunicipios.GetMunicipioIDByNombre(row[7].ToString(), provincia.ProvinciaID);
        //                                                                if (municipioID > 0)
        //                                                                {
        //                                                                    proveedor.FacturacionMunicipio = row[7].ToString();
        //                                                                }
        //                                                                else
        //                                                                {
        //                                                                    LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strMunicipio);
        //                                                                    iWarning++;
        //                                                                    proveedor.FacturacionMunicipio = " ";
        //                                                                }
        //                                                            }
        //                                                            else
        //                                                            {
        //                                                                proveedor.FacturacionMunicipio = " ";
        //                                                            }


        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strProvincia);
        //                                                            iWarning++;
        //                                                            proveedor.FacturacionProvicia = " ";
        //                                                            proveedor.FacturacionMunicipio = " ";
        //                                                        }
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        proveedor.FacturacionProvicia = " ";
        //                                                        proveedor.FacturacionMunicipio = " ";
        //                                                    }

        //                                                }
        //                                                else
        //                                                {
        //                                                    LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strRegionPais);
        //                                                    iWarning++;
        //                                                    proveedor.FacturacionProvicia = " ";
        //                                                    proveedor.FacturacionMunicipio = " ";
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                proveedor.FacturacionProvicia = " ";
        //                                                proveedor.FacturacionMunicipio = " ";
        //                                            }

        //                                        }
        //                                        else
        //                                        {
        //                                            LogErrorCampoProveedores(sIdentificador, Recursos.strPais);
        //                                            iErrores++;
        //                                            proveedor.FacturacionProvicia = " ";
        //                                            proveedor.FacturacionMunicipio = " ";
        //                                            continue;
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoNoCreadoProveedores(sIdentificador, Recursos.strPais);
        //                                        iErrores++;
        //                                        proveedor.FacturacionProvicia = " ";
        //                                        proveedor.FacturacionMunicipio = " ";
        //                                        continue;
        //                                    }

        //                                    // LITERAL FORMA PAGO
        //                                    if (row[8].ToString() != "")
        //                                    {
        //                                        MetodosPagosController cMetodo = new MetodosPagosController();
        //                                        long metodoID = cMetodo.GetMetodoByCodigoAll(row[8].ToString());
        //                                        if (metodoID > 0)
        //                                        {
        //                                            proveedor.MetodoPagoID = metodoID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strMetodoPago);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // TIPO CONTRIBUYENTE
        //                                    if (row[9].ToString() != "")
        //                                    {
        //                                        TiposContribuyentesController cContribuyente = new TiposContribuyentesController();
        //                                        long contriID = cContribuyente.GetTiposContribuyentes(row[9].ToString());
        //                                        if (contriID > 0)
        //                                        {
        //                                            proveedor.TipoContribuyenteID = contriID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogErrorCampoNoCreadoProveedores(sIdentificador, Recursos.strTipoContribuyente);
        //                                            iErrores++;
        //                                            continue;
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strTipoContribuyente);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // Tipo de número de identificación fiscal (SAPTiposNIF - Codigo)
        //                                    SAPTiposNIFController cTipoNif = new SAPTiposNIFController();
        //                                    if (row[10].ToString() != "")
        //                                    {
        //                                        SAPTiposNIF tipoNif = cTipoNif.GetTipoNifByCodigo(row[10].ToString());
        //                                        if (tipoNif != null)
        //                                        {
        //                                            proveedor.SAPTipoNIFID = tipoNif.SAPTipoNIFID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strTipoNIF);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // Tratamiento del proveedor
        //                                    SAPTratamientosController cTratamiento = new SAPTratamientosController();
        //                                    if (row[11].ToString() != "")
        //                                    {
        //                                        SAPTratamientos tratamiento = cTratamiento.GetTratamientoByNombre(row[11].ToString());
        //                                        if (tratamiento != null)
        //                                        {
        //                                            proveedor.SAPTratamientoID = tratamiento.SAPTratamientoID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strTratamiento);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // Grupo de cuentas acreedor                                        
        //                                    SAPGruposCuentasController cGrupoCuenta = new SAPGruposCuentasController();
        //                                    if (row[12].ToString() != "")
        //                                    {
        //                                        SAPGruposCuentas grupoCuenta = cGrupoCuenta.GetGrupoCuentaByNombre(row[12].ToString());
        //                                        if (grupoCuenta != null)
        //                                        {
        //                                            proveedor.SAPGrupoCuentaID = grupoCuenta.SAPGrupoCuentaID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strGrupoCuenta);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // Cuenta asociada a la contabilidad principal
        //                                    SAPCuentasAsociadasController cSAPCuentasAsociadas = new SAPCuentasAsociadasController();
        //                                    if (row[13].ToString() != "")
        //                                    {
        //                                        SAPCuentasAsociadas CuentaAsociada = cSAPCuentasAsociadas.GetCuentaAsociadaByNombre(row[13].ToString());
        //                                        if (CuentaAsociada != null)
        //                                        {
        //                                            proveedor.SAPCuentaAsociadaID = CuentaAsociada.SAPCuentaAsociadaID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strCuentaAsociada);
        //                                            iWarning++;
        //                                        }
        //                                    }


        //                                    // CLAVE PARA CLASIFICAR
        //                                    SAPClavesClasificacionesController cClave = new SAPClavesClasificacionesController();
        //                                    if (row[14].ToString() != "")
        //                                    {
        //                                        SAPClavesClasificaciones claveClasificacion = cClave.GetClaveClasificacionByNombre(row[14].ToString());
        //                                        if (claveClasificacion != null)
        //                                        {
        //                                            proveedor.SAPClaveClasificacionID = claveClasificacion.SAPClaveClasificacionID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strClaveClasificacion);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // GRUPO TESORERÍA
        //                                    SAPGruposTesoreriasController cGrupoTesoreria = new SAPGruposTesoreriasController();
        //                                    if (row[15].ToString() != "")
        //                                    {
        //                                        SAPGruposTesorerias grupoTesoreria = cGrupoTesoreria.GetGrupoTesoreriaByNombre(row[15].ToString());
        //                                        if (grupoTesoreria != null)
        //                                        {
        //                                            proveedor.SAPGrupoTesoreriaID = grupoTesoreria.SAPGrupoTesoreriaID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strGrupoTesoreria);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // CLAVE CONDICIONES DE PAGO
        //                                    CondicionesPagosController cCondiciones = new CondicionesPagosController();
        //                                    if (row[16].ToString() != "")
        //                                    {
        //                                        CondicionesPagos condiciones = cCondiciones.GetCondicionPagoByNombre(row[16].ToString());
        //                                        if (condiciones != null)
        //                                        {
        //                                            proveedor.CondicionPagoID = condiciones.CondicionPagoID;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strCondicionPago);
        //                                            iWarning++;
        //                                        }
        //                                    }

        //                                    // BANCO
        //                                    if (row[17].ToString() != "")
        //                                    {
        //                                        BancosController cBancos = new BancosController();
        //                                        Bancos banco = cBancos.GetBancoByNombre(row[17].ToString());
        //                                        if (banco != null)
        //                                        {
        //                                            proveedor.BancoID = banco.BancoID;
        //                                            proveedor.Banco = banco.Banco;
        //                                        }
        //                                        else
        //                                        {
        //                                            LogInfoCampoNoCreadoProveedores(sIdentificador, Recursos.strBanco);
        //                                            iWarning++;
        //                                            proveedor.Banco = " ";
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        proveedor.Banco = " ";
        //                                    }

        //                                    // CUENTA CORRIENTE
        //                                    proveedor.IBAN = row[18].ToString();

        //                                    // NOMBRE REPRESENTANTE
        //                                    proveedor.NombreRepresentanteLegal = row[19].ToString();

        //                                    // DNI REPRESENTANTE
        //                                    proveedor.DNIRepresentanteLegal = row[20].ToString();

        //                                    // NOMBRE CONTACTO
        //                                    proveedor.NombreContacto = row[21].ToString();

        //                                    // TELEFONO CONTACTO
        //                                    proveedor.TelefonoContacto = row[22].ToString();

        //                                    // EMAIL CONTACTO
        //                                    proveedor.EmailContacto = row[23].ToString();

        //                                    // NOMBRE CONTACTO FACTURACION
        //                                    proveedor.NombreFacturacion = row[24].ToString();

        //                                    // TELEFONO FACTURACION
        //                                    proveedor.FacturacionTelefono = row[25].ToString();

        //                                    // EMAIL FACTURACION
        //                                    proveedor.FacturacionEmail = row[26].ToString();

        //                                    //NUM PROVEEDOR
        //                                    proveedor.NumProveedor = row[27].ToString();

        //                                    // Codigo SAP
        //                                    if (sCodigoSAP != "")
        //                                    {
        //                                        proveedor.CodigoSAP = row[28].ToString();
        //                                    }
        //                                    else
        //                                    {
        //                                        LogErrorCampoProveedores(sIdentificador, Recursos.strCodigoSap);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                    // DESTINATARIO DEL PAGO
        //                                    proveedor.ANombreDeQuienSaleElPago = row[29].ToString();

        //                                    // TELEFONO DESTINATARIO DEL PAGO
        //                                    proveedor.TelefonoDestinatarioPago = row[30].ToString();

        //                                    // EMAIL DESTINATARIO DEL PAGO
        //                                    proveedor.EmailDeAQuienSaleElPago = row[31].ToString();

        //                                    //Clave SAP Forma Pago. Es solo para exportar, ya se guarda la forma de pago desde la columna Literal Forma Pago


        //                                    // Otros elementos
        //                                    proveedor.ProveedorCandidato = false;
        //                                    proveedor.Activo = true;
        //                                    proveedor.ClienteID = cliID;

        //                                    // Adds the information
        //                                    try
        //                                    {
        //                                        cProveedores.AddItem(proveedor);
        //                                        iCargados = iCargados + 1;
        //                                        // Checks for the current iban object
        //                                        try
        //                                        {
        //                                            ProveedoresCuentasCorrientesController cCuentas = new ProveedoresCuentasCorrientesController();
        //                                            ProveedoresCuentasCorrientes cuenta = null;
        //                                            bool bCuenta = true;

        //                                            cuenta = new ProveedoresCuentasCorrientes();
        //                                            if (proveedor.BancoID != null)
        //                                            {
        //                                                cuenta.BancoID = (long)proveedor.BancoID;
        //                                            }
        //                                            else
        //                                            {
        //                                                bCuenta = false;
        //                                            }
        //                                            cuenta.Activo = true;
        //                                            cuenta.Defecto = true;
        //                                            cuenta.IBAN = proveedor.IBAN;
        //                                            cuenta.ProveedorID = proveedor.ProveedorID;
        //                                            if (bCuenta)
        //                                            {
        //                                                cCuentas.AddItem(cuenta);
        //                                            }

        //                                        }
        //                                        catch (Exception ex)
        //                                        {
        //                                            log.Error("Excepcion to add an IBAN: " + proveedor.FacturacionRazonSocial + " - " + "PROVIDERS LOAD" + Recursos.strCodigoExcepcion100);
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {
        //                                        log.Error("Excepcion to add an IBAN: " + proveedor.FacturacionRazonSocial + " - " + "PROVIDERS LOAD" + Recursos.strCodigoExcepcion100);
        //                                    }
        //                                    #endregion
        //                                }

        //                            }
        //                            GC.Collect();

        //                        }

        //                        EscritorLogs.EscribeLogs("PROVIDERS TOTAL" + ": " + maximo);
        //                        EscritorLogs.EscribeLogs("PROVIDERS CHARGED" + ": " + iCargados.ToString());
        //                        EscritorLogs.EscribeLogs("PROVIDERS UPDLOADED" + ": " + iActualizados.ToString());
        //                        EscritorLogs.EscribeLogs("PROVIDERS ERRORS" + ": " + iErrores.ToString());
        //                        EscritorLogs.EscribeLogs("PROVIDERS WARNING" + ": " + iWarning.ToString());
        //                        EscritorLogs.EscribeLogs("END PROVIDERS");

        //                        break;
        //                        #endregion


        //                }

        //                #region Control Estadistica Cargas Masivas


        //                MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
        //                int iCounterExitos = 0;
        //                int iCounterFallos = 0;
        //                string sTipoCarga = "V23";

        //                cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


        //                #endregion
        //            }


        //        }
        //        else
        //        {
        //            log.Error("Providers load:Connot to load,missing necessary data");
        //            sSalida = "ERROR";
        //        }


        //    }
        //    catch (Exception ex)
        //    {

        //        log.Error("SERVICEIMPORTEXPORTPROVIDERS; " + "PROVIDERS LOAD" + Recursos.strCodigoExcepcion100);
        //        sSalida = "ERROR";
        //    }

        //    return sSalida;
        //    // Returns the result

        //}

        /*public static string CargarPlantillaV23Emplazamientos(System.IO.Stream datos, DocumentosCargas odoccarga)
        {


            string sSalida = "";
            string sCodigo = null;
            string sOperador = null;
            long cliID = 0;
            int cont = 0;
            int maximo = 0;
            //string tipocarga = "PLANTILLA V23";
            DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
            DocumentosCargas odocumentocarga = new DocumentosCargas();
            try
            {
                // Reads the information from the excel file

                IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
                System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
                prov.NumberDecimalSeparator = ".";

                DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true
                    }
                });




                // Reads client information
                if (odoccarga.ClienteID != null && odoccarga.OperadorID != null && odoccarga.TabInicial != null && odoccarga.TabFinal != null)
                {
                    cliID = Convert.ToInt32(odoccarga.ClienteID);

                    // Stores the information
                    int iInitialTab = 0;

                    int numTabs = result.Tables.Count;
                    int k = 3;
                    //numTabs = 5;
                    int iCargados = 0;
                    int iActualizados = 0;
                    int iErrores = 0;
                    int iWarning = 0;

                    bool bActualizar = false;

                    bool bActualizarEmplazamientoCamposAdicionales = false;

                    if (odoccarga.TabInicial != null)
                    {
                        iInitialTab = (int)odoccarga.TabInicial;
                    }

                    if (odoccarga.TabFinal != null)
                    {
                        numTabs = (int)odoccarga.TabFinal;
                    }




                    // Checks all the tabs
                    for (k = iInitialTab; k < numTabs; k = k + 1)
                    {
                        switch (k)
                        {


                            #region EMPLAZAMIENTOS
                            case 1:

                                // Local variables
                                EmplazamientosController cEmplazamientos = new EmplazamientosController();
                                Emplazamientos emplazamiento = null;
                                Emplazamientos emplazamientoOriginal = null;
                                EstadosGlobalesController cGlobales = new EstadosGlobalesController();

                                PaisesController cSitePaises = new PaisesController();
                                OperadoresController cOperadorPrincipal = new OperadoresController();
                                PropietariosController cPropietarios = new PropietariosController();
                                MonedasController cMonedas = new MonedasController();
                                RegionesController cSiteRegiones = new RegionesController();

                                EmplazamientosController cEmplazamientoPadre = new EmplazamientosController();
                                Emplazamientos oEmplazamientoPadre = new Emplazamientos();

                                EmplazamientosCamposAdicionales emplazamientoCamposAdicionales = null;
                                EmplazamientosCamposAdicionales emplazamientoCamposAdicionalesOriginal = null;
                                EmplazamientosCamposAdicionalesController cEmplazamientosCamposAdicionales = new EmplazamientosCamposAdicionalesController();

                                long sitePaisID = 0;
                                long operadorID = 0;
                                long propietarioSueloID = 0;
                                long propietarioEstructuraID = 0;
                                long estadoGlobalID = 0;
                                long monedaID = 0;
                                long regionID = 0;

                                // Reads client information
                                cliID = Convert.ToInt32(odoccarga.ClienteID);
                                //operadorID = cOperadorPrincipal.GetOperadorByNombre(txtOperador.Text);
                                if (odoccarga.OperadorID != null)
                                {
                                    sOperador = cOperadorPrincipal.GetItem((long)odoccarga.OperadorID).Operador;
                                }
                                else
                                {
                                    //Generate log and return
                                }


                                // Stores the information

                                maximo = result.Tables[0].Rows.Count;
                                iActualizados = 0;
                                iCargados = 0;
                                iErrores = 0;
                                iWarning = 0;
                                bActualizar = false;
                                bActualizarEmplazamientoCamposAdicionales = false;
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ": Start Sites" + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "ServiceImportExport.App_GlobalResources.Comun.strInicioEmplazamientos" + ": " + System.Environment.NewLine);
                                foreach (DataRow row in result.Tables[0].Rows)
                                {

                                    cont = cont + 1;

                                    // Reads the client information
                                    emplazamientoOriginal = new Emplazamientos();
                                    //EmplazamientosController cEmplazamientosNuevo = new EmplazamientosController();

                                    // Reads the site code


                                    if (row[0].ToString() != "")
                                    {
                                        sCodigo = row[0].ToString();
                                    }
                                    else
                                    {
                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": El CODIGO DEL SITIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                        iErrores++;
                                        continue;
                                    }

                                    emplazamientoOriginal = cEmplazamientos.GetEmplazamientoByCodigoyOperadoryCliente(sCodigo, sOperador, cliID);
                                    emplazamiento = new Emplazamientos();
                                    emplazamientoCamposAdicionales = new EmplazamientosCamposAdicionales();
                                    emplazamientoCamposAdicionalesOriginal = new EmplazamientosCamposAdicionales();
                                    if (emplazamientoOriginal != null && emplazamientoOriginal.Codigo != null && emplazamientoOriginal.Codigo != "")
                                    {
                                        bActualizar = true;
                                        emplazamiento = cEmplazamientos.GetItem(emplazamientoOriginal.EmplazamientoID);
                                        emplazamientoCamposAdicionalesOriginal = cEmplazamientos.GetEmplazamientosCamposAdicionales(emplazamientoOriginal.EmplazamientoID);
                                        if (emplazamientoCamposAdicionalesOriginal != null)
                                        {
                                            bActualizarEmplazamientoCamposAdicionales = true;
                                            emplazamientoCamposAdicionales.EmplazamientoID = emplazamientoOriginal.EmplazamientoID;
                                        }
                                        else
                                        {
                                            bActualizarEmplazamientoCamposAdicionales = false;
                                        }
                                    }
                                    else
                                    {
                                        bActualizar = false;
                                        emplazamiento.Codigo = sCodigo;
                                    }

                                    #region GESTION EMPLAZAMIENTO

                                    try
                                    {


                                        #region DATOS PRINCIPALES

                                        emplazamiento.ClienteID = cliID;
                                        //emplazamiento.OperadorID = operadorID;

                                        //Nombre Sitio

                                        if (row[1].ToString() != "")
                                        {
                                            emplazamiento.NombreSitio = row[1].ToString();
                                        }
                                        else
                                        {
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El NOMBRE no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Name " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }



                                        //Propietario, este es el antiguo campo de propietario antes de cambiar a Propietario Suelo y Propietario Estructura. No se rellena valor en el, pero es necesario por que es obligatorio en BD
                                        emplazamiento.Propietario = "";

                                        //Propietario Suelo
                                        if (!row[2].ToString().Equals(""))
                                        {
                                            propietarioSueloID = cPropietarios.GetPropietarioByDNI(row[2].ToString()).PropietarioID;
                                            if (propietarioSueloID > 0)
                                            {
                                                emplazamiento.PropietarioSueloID = propietarioSueloID;
                                            }
                                            else
                                            {
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO SUELO '" + row[2].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "--- Land owner" + row[2].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":Code" + ": " + sCodigo + "---Land owner" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO SUELO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        if (!row[3].ToString().Equals(""))
                                        {
                                            propietarioEstructuraID = cPropietarios.GetPropietarioByDNI(row[3].ToString()).PropietarioID;
                                            if (propietarioEstructuraID > 0)
                                            {
                                                emplazamiento.PropietarioEstructuraID = propietarioEstructuraID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Structure owner" + row[3].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO ESTRUCTURA '" + row[3].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Structure owner" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PROPIETARIO ESTRUCTURA no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Operador
                                        if (!row[4].ToString().Equals(""))
                                        {
                                            operadorID = cOperadorPrincipal.GetOperadorByNombre(row[4].ToString());
                                            if (operadorID > 0)
                                            {
                                                emplazamiento.OperadorID = operadorID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Operator " + row[4].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El OPERADOR '" + row[4].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Operator " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El OPERADOR no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Moneda
                                        if (!row[5].ToString().Equals(""))
                                        {
                                            monedaID = cMonedas.GetMonedaBySimbolo(row[5].ToString());
                                            if (monedaID > 0)
                                            {
                                                emplazamiento.MonedaID = monedaID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Currency " + row[5].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La MONEDA '" + row[5].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Currency " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La MONEDA no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }


                                        // Estado global
                                        if (!row[6].ToString().Equals(""))
                                        {
                                            estadoGlobalID = cGlobales.GetEstadoGlobalByNombre(row[6].ToString());
                                            if (estadoGlobalID > 0)
                                            {
                                                emplazamiento.EstadoGlobalID = estadoGlobalID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Global state:" + row[6].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El ESTADO GLOBAL '" + row[6].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---Global state" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El ESTADO GLOBAL no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        #region CATEGORIZACION DEL SITIO

                                        // Categoria Sitio
                                        EmplazamientosCategoriasSitiosController cCategoria = new EmplazamientosCategoriasSitiosController();
                                        long categoriaID = 0;

                                        if (row[7].ToString() != "")
                                        {
                                            try
                                            {
                                                categoriaID = cCategoria.GetCategoriaByNombreAll(row[7].ToString());
                                                if (categoriaID > 0)
                                                {
                                                    emplazamiento.CategoriaEmplazamientoID = categoriaID;
                                                    cCategoria = null;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---" + " The site Category: " + row[7].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La CATEGORIA SITIO '" + row[7].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    cCategoria = null;
                                                    continue;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---" + " The site Category: " + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                iErrores++;
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Categorias: " + "SITES LOAD" +" Exception Code 100" + Comun.NuevaLinea);
                                                cCategoria = null;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + sCodigo + "---" + " The site Category: " + " " + Comun.FORMATO_INCORRETO + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La CATEGORIA SITIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Tipo Edificacion (EMPLAZAMIENTO TIPO)                       
                                        EmplazamientosTiposController cEmpTipo = new EmplazamientosTiposController();
                                        EmplazamientosTiposEdificiosController cTipoEdificio = new EmplazamientosTiposEdificiosController();
                                        EmplazamientosTiposEstructurasController cTipoEstructura = new EmplazamientosTiposEstructurasController();

                                        long empTipoID = 0;
                                        long tipoEdificioID = 0;
                                        long tipoEstructuraID = 0;

                                        if (row[8].ToString() != "")
                                        {
                                            try
                                            {
                                                empTipoID = cEmpTipo.GetTipoByNombreAll(row[8].ToString());

                                                if (empTipoID > 0)
                                                {
                                                    //Tipo Edificio
                                                    if (row[9].ToString() != "")
                                                    {
                                                        try
                                                        {
                                                            tipoEdificioID = cTipoEdificio.GetTipoEdificioByNombreAndTipoEmplazamiento(empTipoID, row[9].ToString());

                                                            if (tipoEdificioID > 0)
                                                            {
                                                                //Tipo Estructura
                                                                if (row[10].ToString() != "")
                                                                {
                                                                    tipoEstructuraID = cTipoEstructura.GetTipoEstructuraByNombreAndTipoEdificio(tipoEdificioID, row[10].ToString());

                                                                    if (tipoEstructuraID > 0)
                                                                    {
                                                                        emplazamiento.EmplazamientoTipoEstructuraID = tipoEstructuraID;
                                                                        cTipoEstructura = null;
                                                                    }
                                                                    else
                                                                    {

                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---structure Type " + row[10].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO ESTRUCTURA '" + row[10].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                        iErrores++;
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---structure Type " + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                    //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO ESTRUCTURA no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }

                                                                emplazamiento.TipoEdificacionID = tipoEdificioID;
                                                                cTipoEdificio = null;
                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Building Type " + row[9].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO EDIFICION '" + row[9].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Building Type " + " " + Comun.NO_EXISTE_TREE + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                            ////Comun.cLogV23Emplazamientos.EscribirLog("Tipos Edificios: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                            cTipoEdificio = null;
                                                        }

                                                        emplazamiento.EmplazamientoTipoID = empTipoID;
                                                        cEmpTipo = null;
                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Building Type" + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TIPO EDIFICIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Sites Types " + row[8].ToString() + " " + Comun.NO_EXISTE_TREE + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El EMPLAZAMIENTO TIPO '" + row[8].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    cCategoria = null;
                                                    continue;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Sites Types" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Emplazamientos tipos: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                cEmpTipo = null;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Sites Types" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El EMPLAZAMIENTO TIPO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        // Tamaño Edificio
                                        EmplazamientosTamanosController cTamano = new EmplazamientosTamanosController();
                                        long tamanoID = 0;

                                        if (row[11].ToString() != "")
                                        {
                                            try
                                            {
                                                tamanoID = cTamano.GetTamanoByNombreAll(row[11].ToString());
                                                if (tamanoID > 0)
                                                {
                                                    emplazamiento.EmplazamientoTamanoID = tamanoID;
                                                    cTamano = null;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strTamano" + row[11].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TAMAÑO EDIFICIO '" + row[11].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    cTamano = null;
                                                    continue;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strTamano" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Tamaño: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                cTamano = null;
                                            }
                                        }
                                        else
                                        {
                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAvisoTamañoEdificio" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El TAMAÑO EDIFICIO no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            cTamano = null;
                                            continue;
                                        }

                                        #endregion


                                        // Fecha Activacion
                                        DateTime fActiva = DateTime.MinValue;
                                        if (row[12].ToString() != null && row[12].ToString() != "")
                                        {
                                            try
                                            {
                                                fActiva = Convert.ToDateTime(row[12].ToString());
                                                emplazamiento.FechaActivacion = fActiva;
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Activation date" + row[12].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La FECHA ACTIVACION '" + row[12].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Activacion date" + " " + Comun.FORMATO_INCORRETO + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                //// Comun.cLogV23Emplazamientos.EscribirLog("Fecha Activacion: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;

                                            }
                                        }

                                        // Fecha DesActivacion
                                        DateTime fDesActiva = DateTime.MinValue;
                                        if (row[13].ToString() != null && row[13].ToString() != "")
                                        {
                                            try
                                            {
                                                fDesActiva = Convert.ToDateTime(row[13].ToString());
                                                emplazamiento.FechaDesactivacion = fDesActiva;
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Desactivation date" + row[13].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La FECHA ACTIVACION '" + row[12].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Desactivation date" + " " + Comun.FORMATO_INCORRETO + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                //// Comun.cLogV23Emplazamientos.EscribirLog("Fecha Activacion: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }

                                        #endregion

                                        #region LOCALIZACION SITIO

                                        // Region
                                        if (!row[14].ToString().Equals(""))
                                        {

                                            regionID = cSiteRegiones.GetRegionCompletaByNombre(row[14].ToString()).RegionID;
                                            if (regionID > 0)
                                            {
                                                emplazamiento.Region = row[14].ToString();

                                                // Pais
                                                if (!row[15].ToString().Equals(""))
                                                {
                                                    sitePaisID = cSitePaises.GetPaisByNombreRegion(row[15].ToString(), regionID);
                                                    if (sitePaisID > 0)
                                                    {
                                                        emplazamiento.PaisID = sitePaisID;

                                                        // Region Pais
                                                        if (row[16].ToString() != "")
                                                        {
                                                            RegionesPaisesController cRegionPais = new RegionesPaisesController();
                                                            RegionesPaises oRegionPais = cRegionPais.GetRegionCompletaByNombre(row[16].ToString(), sitePaisID);
                                                            if (oRegionPais != null)
                                                            {
                                                                emplazamiento.RegionPais = row[16].ToString();

                                                                // Provincia
                                                                if (row[17].ToString() != "")
                                                                {
                                                                    ProvinciasController cProvincias = new ProvinciasController();
                                                                    Provincias provincia = cProvincias.GetProvinciaByNombre(row[17].ToString(), oRegionPais.RegionPaisID);
                                                                    if (provincia != null)
                                                                    {
                                                                        emplazamiento.Provincia = row[17].ToString();

                                                                        // Municipio
                                                                        if (row[18].ToString() != "")
                                                                        {
                                                                            MunicipiosController cMunicipios = new MunicipiosController();
                                                                            long municipioID = cMunicipios.GetMunicipioIDByNombre(row[18].ToString(), provincia.ProvinciaID);
                                                                            if (municipioID > 0)
                                                                            {
                                                                                emplazamiento.Municipio = row[18].ToString();
                                                                                emplazamiento.MunicipioID = municipioID;

                                                                                //Municipalidad
                                                                                if (row[19].ToString() != "")
                                                                                {
                                                                                    GlobalMunicipalidadesController cMunicipalidades = new GlobalMunicipalidadesController();
                                                                                    long municipalidadID = cMunicipalidades.GetMunicipalidadesByNombreMunicipioID(row[19].ToString(), municipioID);
                                                                                    if (municipalidadID > 0)
                                                                                    {
                                                                                        emplazamiento.GlobalMunicipalidadID = municipalidadID;

                                                                                        //Partidos
                                                                                        if (row[20].ToString() != "")
                                                                                        {
                                                                                            GlobalPartidosController cPartidos = new GlobalPartidosController();
                                                                                            long partidoID = cPartidos.GetPartidosByNombreMunicipalidadID(row[20].ToString(), municipalidadID);
                                                                                            if (partidoID > 0)
                                                                                            {
                                                                                                emplazamiento.GlobalPartidoID = partidoID;

                                                                                                //Localidades
                                                                                                if (row[21].ToString() != "")
                                                                                                {
                                                                                                    GlobalLocalidadesController cLocalidades = new GlobalLocalidadesController();
                                                                                                    long localidadID = cLocalidades.GetLocalidadesByNombrePartidoID(row[21].ToString(), partidoID);
                                                                                                    if (localidadID > 0)
                                                                                                    {
                                                                                                        emplazamiento.GlobalLocalidadID = localidadID;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---City " + row[21].ToString() + " does not exist in tree in said Split" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La LOCALIDAD '" + row[21].ToString() + "' no existe en TREE para dicho partido:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                        iWarning++;
                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Split " + " does not exist in tree in said Municipality" + row[20].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoExistePartido" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---El PARTIDO '" + row[20].ToString() + "' no existe en TREE para dicha municipalidad:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                                iWarning++;
                                                                                            }

                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Municipality " + row[19].ToString() + " does not exist in tree in said Municipality" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La MUNICIPALIDAD '" + row[19].ToString() + "' no existe en TREE para dicho municipio:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                        iWarning++;
                                                                                    }

                                                                                }


                                                                            }
                                                                            else
                                                                            {
                                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Municipality " + row[18].ToString() + " does not exist in tree in said Municipality" + "ServiceImportExport.App_GlobalResources.Comun.strNoExisteMunicipo" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El MUNICIPIO '" + row[18].ToString() + "' no existe en TREE para dicha provincia:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                                iErrores++;
                                                                                continue;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Municipality " + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El MUNICIPIO no puede ser vacio, es un campo obligatorio: " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                            iErrores++;
                                                                            continue;
                                                                        }


                                                                    }
                                                                    else
                                                                    {
                                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Province " + row[17].ToString() + " does not exist in tree in said region country " + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La PROVINCIA '" + row[17].ToString() + "' no existe en TREE para dicha region pais:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                        iErrores++;
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---Province " + " " + Comun.FORMATO_INCORRETO + row[17].ToString() + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La PROVINCIA no puede ser vacio, es un campo obligatorio: " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                    iErrores++;
                                                                    continue;
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---The region country " + row[16].ToString() + " does not exist in tree in said country" + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION PAIS '" + row[16].ToString() + "' no existe en TREE para dicho pais:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                                iErrores++;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---The region country " + row[16].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION PAIS no puede ser vacio, es un campo obligatorio: " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                            iErrores++;
                                                            continue;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "--The Country " + row[15].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                        ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PAIS '" + row[15].ToString() + "' no existe en TREE para dicha region:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                        iErrores++;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":Code" + ": " + "---The Country " + row[15].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El PAIS no puede ser vacio, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    iErrores++;
                                                    continue;
                                                }

                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---The region" + row[14].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION '" + row[14].ToString() + "' no existe en TREE " + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }

                                        }
                                        else
                                        {

                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":Code" + ": " + "---The region" + row[14].ToString() + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La REGION no puede ser vacia, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }

                                        //Barrio
                                        emplazamiento.Barrio = row[22].ToString();

                                        // Direccion
                                        if (!row[23].ToString().Equals(""))
                                        {
                                            emplazamiento.Direccion = row[23].ToString();
                                        }
                                        else
                                        {

                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":Code" + ": " + "---Address" + " " + Comun.FORMATO_INCORRETO + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---La DIRECCION no puede ser vacia, es un campo obligatorio:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            iErrores++;
                                            continue;
                                        }




                                        // Codigo postal
                                        emplazamiento.CodigoPostal = row[24].ToString();

                                        // Latitud - Longitud
                                        if (row[25].ToString() != "" && row[26].ToString() != "" && row[25].ToString() != "0" && row[26].ToString() != "0")
                                        {
                                            double lat = 0;
                                            double lon = 0;

                                            lat = cEmplazamientos.ConvertirGrados2Decimal(row[25].ToString());
                                            lon = cEmplazamientos.ConvertirGrados2Decimal(row[26].ToString());

                                            if (lat > 90 || lat < -90)
                                            {
                                                string la = "";
                                                la = row[25].ToString().Replace(',', '.');
                                                emplazamiento.Latitud = Convert.ToDouble(la, System.Globalization.CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                emplazamiento.Latitud = lat;
                                            }

                                            if (lon > 180 || lon < -180)
                                            {
                                                string lo = "";
                                                lo = row[26].ToString().Replace(',', '.');
                                                emplazamiento.Longitud = Convert.ToDouble(lo, System.Globalization.CultureInfo.InvariantCulture);
                                            }
                                            else
                                            {
                                                emplazamiento.Longitud = lon;
                                            }

                                        }
                                        else
                                        {

                                            emplazamiento.Latitud = 0;
                                            emplazamiento.Longitud = 0;

                                            //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---Latitud/longitude" + row[25].ToString() + "/" + row[26].ToString() + "are not correct, they will be saved as 0/0:" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                            //// Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La LATITUD y LONGITUD '" + row[25].ToString() + "/" + row[26].ToString() + "'are not correct, they will be saved as 0/0:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                            iWarning++;

                                        }

                                        #endregion

                                        #region DATOS ADICIONALES

                                        // Empresa Compradora
                                        emplazamiento.EmpresaCompradora = row[27].ToString();

                                        // Operador dueño infra
                                        OperadoresController cOperadorInfra = new OperadoresController();
                                        long operadorInfraId = cOperadorInfra.GetOperadorByNombre(row[28].ToString());
                                        if (operadorInfraId > 0)
                                        {
                                            emplazamiento.OperadorPropietarioEstructuraID = operadorInfraId;
                                        }

                                        //Nemonico - Campo Generico 18
                                        emplazamiento.CampoGenerico18 = row[29].ToString();

                                        // Codigo torrero
                                        emplazamiento.CodigoTorrero = row[30].ToString();

                                        // Codigo telco
                                        emplazamiento.CodigoTelco = row[31].ToString();

                                        // Venta Sitio A Tercero
                                        emplazamiento.VentaSitioATercero = row[32].ToString();

                                        //Codigo SAP
                                        emplazamiento.CodigoSAP = row[33].ToString();

                                        // Clave catastral
                                        emplazamiento.ClaveCatastral = row[34].ToString();

                                        // Potencial Sitio
                                        emplazamiento.PotencialSitio = row[35].ToString();

                                        // Acta judicial
                                        emplazamiento.CampoGenerico6 = row[36].ToString();

                                        // Varianza renta
                                        emplazamiento.VarRentaRentaMediaZona = row[37].ToString();

                                        // Supervisor
                                        emplazamiento.Supervisor = row[38].ToString();

                                        // Uso Sitio
                                        emplazamiento.UsoSitio = row[39].ToString();

                                        // Superficie Sitio
                                        if (row[40].ToString() != "")
                                        {
                                            try
                                            {
                                                double dSuperficie = Convert.ToDouble(row[40].ToString());
                                                emplazamiento.SuperficieSitio = dSuperficie.ToString();
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieSitio" + row[40].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieSitio" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La SUPERFICIE DEL SITIO '" + row[40].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Superficie Sitio: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }


                                        // Altura Sitio
                                        if (row[41].ToString() != "")
                                        {
                                            try
                                            {
                                                emplazamiento.AltitudSitio = Convert.ToDouble(row[41].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAlturaSitio" + row[41].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strAlturaSitio" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La ALTURA DEL SITIO '" + row[41].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Altura Sitio: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }


                                        // Superficie Vertical

                                        if (row[42].ToString() != "")
                                        {
                                            try
                                            {
                                                double dSuperficieV = Convert.ToDouble(row[42].ToString());
                                                emplazamiento.SuperficieVertical = dSuperficieV.ToString();
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieVertical" + row[42].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strSuperficieVertical" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La SUPERFICIE VERTICAL '" + row[42].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);

                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Superficie Vertical: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }

                                        // Numero sitios dependientes
                                        if (row[43].ToString() != "")
                                        {
                                            try
                                            {
                                                emplazamiento.NumSitiosDependientes = Convert.ToInt32(row[43].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                emplazamiento.NumSitiosDependientes = 0;

                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strNumeroSitios" + row[43].ToString() + "ServiceImportExport.App_GlobalResources.Comun.strNoTieneFormato" + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ":" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strNumeroSitios" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.WARNING + ": Codigo: " + sCodigo + "---La NUMERO DE SITIOS DEPENDIENTES '" + row[43].ToString() + "' no tiene el formato correcto:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Numero de sitios dependientes: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                iWarning++;
                                            }
                                        }
                                        else
                                        {
                                            emplazamiento.NumSitiosDependientes = 0;
                                        }

                                        //Riesgos
                                        EmplazamientosRiesgosController cRiesgos = new EmplazamientosRiesgosController();
                                        long riesgoID = 0;

                                        if (row[44].ToString() != "")
                                        {
                                            try
                                            {
                                                riesgoID = cRiesgos.GetEmplazamientosRiesgoIDByNombre(row[44].ToString());
                                                if (riesgoID > 0)
                                                {
                                                    emplazamiento.EmplazamientoRiesgoID = riesgoID;
                                                    cRiesgos = null;
                                                }
                                                else
                                                {
                                                    //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strRiesgo" + row[44].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                    ////Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El RIESGO '" + row[44].ToString() + "' no existe en TREE:" + " "+Comun.ERROR_NO_CREADO_DATO + System.Environment.NewLine);

                                                    iWarning++;
                                                    cRiesgos = null;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":" + "ServiceImportExport.App_GlobalResources.Comun.strRiesgo" + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                                ////Comun.cLogV23Emplazamientos.EscribirLog("Riesgo: " + "SITES LOAD" +" Exception Code 100" + System.Environment.NewLine);
                                                cRiesgos = null;
                                            }
                                        }

                                        // Situacion Ingenieria
                                        emplazamiento.SituacionIngenieria = row[45].ToString();

                                        // Comentarios equipos
                                        emplazamiento.CometariosEquipos = row[46].ToString();

                                        // Comentarios edificios
                                        emplazamiento.ComentarioEdificio = row[47].ToString();

                                        // Comentarios Generales
                                        emplazamiento.ComentariosGenerales = row[48].ToString();

                                        // Compartido
                                        if (row[49].ToString().ToUpper() != "SI")
                                        {
                                            emplazamiento.Compartido = false;
                                        }
                                        else
                                        {
                                            emplazamiento.Compartido = true;
                                        }

                                        if (emplazamiento.Compartido)
                                        {
                                            emplazamiento.CodigoTelco = emplazamiento.CodigoTorrero;
                                            if (emplazamiento.OperadorID != emplazamiento.OperadorPropietarioEstructuraID)
                                            {
                                                emplazamiento.Outbound = true;
                                                emplazamiento.Inbound = false;
                                            }
                                            else
                                            {
                                                emplazamiento.Outbound = false;
                                                emplazamiento.Inbound = true;
                                            }
                                        }

                                        #endregion

                                        #region DATOS DE OTROS MODULOS

                                        // Imposible Legalizar
                                        if (row[50].ToString().ToUpper() != "SI")
                                        {
                                            emplazamiento.ImposibleLicenciar = false;
                                        }
                                        else
                                        {
                                            emplazamiento.ImposibleLicenciar = true;
                                        }

                                        // Agencia Adquisiciones
                                        emplazamiento.CampoGenerico11 = row[51].ToString();

                                        // Estudio jurídico
                                        emplazamiento.CampoGenerico12 = row[52].ToString();

                                        #endregion

                                        #region DATOS EMPLAZAMIENTO PADRE

                                        if (row[53].ToString() != "")
                                        {
                                            string sCodigoPadre = row[53].ToString();
                                            oEmplazamientoPadre = cEmplazamientoPadre.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoPadre, sOperador, cliID);
                                            if (oEmplazamientoPadre != null)
                                            {
                                                emplazamiento.EmplazamientoPadreID = oEmplazamientoPadre.EmplazamientoID;
                                            }
                                            else
                                            {
                                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Code" + ": " + "---" + "ServiceImportExport.App_GlobalResources.Comun.strCodigoPadre" + row[53].ToString() + " " + Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                ////  Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": Codigo: " + sCodigo + "---El CODIGO PADRE '" + row[53].ToString() + "' no existe en TREE:" + " " +Comun.ERROR_NO_CREADO_EMPLAZAMIENTO + System.Environment.NewLine);
                                                iErrores++;
                                                continue;
                                            }
                                        }



                                        #endregion

                                        #region DATOS ADICIONALES 2

                                        // Tipo Maestro
                                        if (row[54].ToString().ToUpper() != "SI")
                                        {
                                            emplazamientoCamposAdicionales.EsTipoMaestro = false;
                                        }
                                        else
                                        {
                                            emplazamientoCamposAdicionales.EsTipoMaestro = true;
                                        }

                                        // Codigo Maestro
                                        emplazamientoCamposAdicionales.CodigoMaestro = row[55].ToString();

                                        // Codigo Adicional
                                        emplazamientoCamposAdicionales.CodigoAdicional = row[56].ToString();

                                        // Codigo Unico
                                        emplazamientoCamposAdicionales.CodigoUnico = row[57].ToString();

                                        #endregion

                                        if (bActualizar)
                                        {
                                            cEmplazamientos.UpdateItem(emplazamiento);
                                            if (!bActualizarEmplazamientoCamposAdicionales)
                                            {
                                                cEmplazamientosCamposAdicionales.AddItem(emplazamientoCamposAdicionales);
                                            }
                                            else
                                            {
                                                cEmplazamientosCamposAdicionales.UpdateItem(emplazamientoCamposAdicionales);
                                            }
                                            iActualizados++;
                                        }
                                        else
                                        {
                                            Emplazamientos emplazamientoNuevo = new Emplazamientos();
                                            emplazamientoNuevo = cEmplazamientos.AddItem(emplazamiento);

                                            if (emplazamientoNuevo != null)
                                            {
                                                emplazamientoCamposAdicionales.EmplazamientoID = emplazamientoNuevo.EmplazamientoID;
                                                cEmplazamientosCamposAdicionales.AddItem(emplazamientoCamposAdicionales);
                                            }
                                            iCargados++;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ////Comun.cLogV23Emplazamientos.EscribirLog("No se pudo agregar el emplazamiento: " + emplazamiento.Codigo + " - " + "SITES LOAD" +" Exception Code 100" + Comun.NuevaLinea);
                                        //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ":" + "Sites could not be added " + ": " + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                                    }


                                    #endregion



                                }

                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES TOTALS" + ": " + maximo + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES CHARGED" + ": " + iCargados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES UPLOADED" + ": " + iActualizados.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES ERROR" + ": " + iErrores.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "SITES WARNING" + ": " + iWarning.ToString() + System.Environment.NewLine);
                                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.INFO + ":" + "END SITES" + ": " + System.Environment.NewLine);


                                break;
                                #endregion


                        }

                        #region Control Estadistica Cargas Masivas


                        MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
                        int iCounterExitos = 0;
                        int iCounterFallos = 0;
                        string sTipoCarga = "V23";

                        cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


                        #endregion
                    }


                }
                else
                {
                    //Comun.cLogV23Emplazamientos.EscribirLog("Sites load:Connot to load,missing necessary data  " + Environment.NewLine);
                    sSalida = "ERROR";
                }


            }
            catch (Exception ex)
            {

                //Comun.cLogV23Emplazamientos.EscribirLog(Comun.ERROR + ": SERVICEIMPORTEXPORTSITES; " + "SITES LOAD" + " Exception Code 100" + System.Environment.NewLine);
                sSalida = "ERROR";
            }

            return sSalida;
            // Returns the result

        }*/

        //public static string CargarPlantillaV23EmplazamientosContactos(System.IO.Stream datos, DocumentosCargas odoccarga)
        //{


        //    string sSalida = "";
        //    long cliID = 0;
        //    int cont = 0;
        //    int maximo = 0;
        //    //string tipocarga = "PLANTILLA V23";
        //    DocumentosCargasController cDocumentosCargasController = new DocumentosCargasController();
        //    DocumentosCargas odocumentocarga = new DocumentosCargas();
        //    try
        //    {
        //        // Reads the information from the excel file

        //        IExcelDataReader excelReader = ExcelReaderFactory.CreateOpenXmlReader(datos);
        //        System.Globalization.NumberFormatInfo prov = new System.Globalization.NumberFormatInfo();
        //        prov.NumberDecimalSeparator = ".";

        //        DataSet result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
        //        {
        //            ConfigureDataTable = (tableReader) => new ExcelDataTableConfiguration()
        //            {
        //                UseHeaderRow = true
        //            }
        //        });




        //        // Reads client information
        //        if (odoccarga.ClienteID != null && odoccarga.OperadorID != null && odoccarga.TabInicial != null && odoccarga.TabFinal != null)
        //        {
        //            cliID = Convert.ToInt32(odoccarga.ClienteID);

        //            // Stores the information
        //            int iInitialTab = 0;

        //            int numTabs = result.Tables.Count;
        //            int k = 3;
        //            //numTabs = 5;
        //            int iCargados = 0;
        //            int iActualizados = 0;
        //            int iErrores = 0;
        //            int iWarning = 0;
        //            bool bActualizar = false;


        //            if (odoccarga.TabInicial != null)
        //            {
        //                iInitialTab = (int)odoccarga.TabInicial;
        //            }

        //            if (odoccarga.TabFinal != null)
        //            {
        //                numTabs = (int)odoccarga.TabFinal;
        //            }




        //            // Checks all the tabs
        //            for (k = iInitialTab; k < numTabs; k = k + 1)
        //            {
        //                switch (k)
        //                {

        //                    #region EMPLAZAMIENTOS CONTACTOS
        //                    case 1:
        //                        maximo = result.Tables[0].Rows.Count;
        //                        iActualizados = 0;
        //                        iCargados = 0;
        //                        iErrores = 0;
        //                        iWarning = 0;
        //                        bActualizar = false;
        //                        EscritorLogs.EscribeLogs(Recursos.strInicioExportacion + " " + Recursos.strImportar + " " + Recursos.strContactos);

        //                        Emplazamientos emp = null;
        //                        EmplazamientosController cEmpContactos = null;
        //                        ContactosGlobalesEmplazamientosController cContEmpAux = null;
        //                        ContactosGlobalesEmplazamientos oContEmpAux = null;
        //                        ContactosGlobalesController cContactosGlobales = new ContactosGlobalesController();
        //                        ContactosGlobales contactoglobal = new ContactosGlobales();

        //                        foreach (DataRow row in result.Tables[0].Rows)
        //                        {
        //                            cont = cont + 1;

        //                            string sCodigoEmp = "";
        //                            string sOperadorEmp = "";
        //                            string sEmailContacto = "";
        //                            string sTelefonoContacto = "";

        //                            //Codigo Emplazamiento
        //                            if (row[0].ToString() != "")
        //                            {
        //                                sCodigoEmp = row[0].ToString();

        //                                //Operador Emplazamiento
        //                                if (row[1].ToString() != "")
        //                                {
        //                                    sOperadorEmp = row[1].ToString();
        //                                    emp = new Emplazamientos();
        //                                    cEmpContactos = new EmplazamientosController();
        //                                    emp = cEmpContactos.GetEmplazamientoByCodigoyOperadoryCliente(sCodigoEmp, sOperadorEmp, cliID);

        //                                    if (emp == null)
        //                                    {
        //                                        LogErrorCampoNoCreadoContactos(row[6].ToString(), Recursos.strEmplazamiento);
        //                                        iErrores++;
        //                                        continue;
        //                                    }

        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoContactos(row[6].ToString(), Recursos.strOperador);
        //                                    iErrores++;
        //                                    continue;
        //                                }



        //                            }
        //                            else
        //                            {
        //                                LogErrorCampoContactos(row[6].ToString(), Recursos.strEmplazamiento);
        //                                iErrores++;
        //                                continue;
        //                            }

        //                            //Contacto Email
        //                            if (row[6].ToString() != "")
        //                            {
        //                                if (row[6].ToString().Contains('@'))
        //                                {
        //                                    sEmailContacto = row[6].ToString();
        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoContactos(sEmailContacto, Recursos.strEmail);
        //                                    iErrores++;
        //                                    continue;
        //                                }
        //                            }
        //                            else
        //                            {
        //                                LogErrorCampoContactos(sEmailContacto, Recursos.strEmail);
        //                                iErrores++;
        //                                continue;
        //                            }
        //                            // Contacto Telefono
        //                            if (row[4].ToString() != "")
        //                            {
        //                                sTelefonoContacto = row[4].ToString();
        //                            }
        //                            else
        //                            {
        //                                LogErrorCampoContactos(sEmailContacto, Recursos.strTelefonoContacto);
        //                                iErrores++;
        //                                continue;
        //                            }
        //                            contactoglobal = cContactosGlobales.GetContactoByTelefonoEmail(sTelefonoContacto, sEmailContacto);

        //                            if (contactoglobal != null)
        //                            {

        //                                bActualizar = true;
        //                            }
        //                            else
        //                            {


        //                                contactoglobal = new ContactosGlobales();
        //                                bActualizar = false;
        //                            }

        //                            #region GESTION CONTACTOS EMPLAZAMIENTOS

        //                            // Contacto Nombre
        //                            if (row[2].ToString() != "")
        //                            {
        //                                contactoglobal.Nombre = row[2].ToString();
        //                            }
        //                            else
        //                            {
        //                                LogErrorCampoContactos(sEmailContacto, Recursos.strNombre);
        //                                iErrores++;
        //                                continue;
        //                            }

        //                            // Contacto Apelldio
        //                            if (row[3].ToString() != "")
        //                            {
        //                                contactoglobal.Apellidos = row[3].ToString();
        //                            }
        //                            else
        //                            {
        //                                LogErrorCampoContactos(sEmailContacto, Recursos.strApellidos);
        //                                iErrores++;
        //                                continue;
        //                            }


        //                            //Telefono 2
        //                            contactoglobal.Telefono2 = row[5].ToString();
        //                            //Telefono 
        //                            contactoglobal.Telefono = sTelefonoContacto;
        //                            //email
        //                            contactoglobal.Email = sEmailContacto;


        //                            // Pais
        //                            if (row[7].ToString() != "")
        //                            {
        //                                PaisesController cPaises = new PaisesController();
        //                                long contEmpPaisID = cPaises.GetPaisByNombre(row[7].ToString());
        //                                if (contEmpPaisID > 0)
        //                                {

        //                                    // Region
        //                                    if (row[8].ToString() != "")
        //                                    {
        //                                        RegionesPaisesController cRegiones = new RegionesPaisesController();
        //                                        RegionesPaises contEmpRegionPais = cRegiones.GetRegionCompletaByNombre(row[8].ToString(), contEmpPaisID);
        //                                        if (contEmpRegionPais != null)
        //                                        {
        //                                            // Provincia
        //                                            if (row[9].ToString() != "")
        //                                            {
        //                                                ProvinciasController cProvincias = new ProvinciasController();
        //                                                Provincias contEmpProvincia = cProvincias.GetProvinciaByNombre(row[9].ToString(), contEmpRegionPais.RegionPaisID);
        //                                                if (contEmpProvincia != null)
        //                                                {
        //                                                    // Municipio
        //                                                    if (row[10].ToString() != "")
        //                                                    {
        //                                                        MunicipiosController cMunicipios = new MunicipiosController();
        //                                                        long contEmpMunicipioID = cMunicipios.GetMunicipioIDByNombre(row[10].ToString(), contEmpProvincia.ProvinciaID);
        //                                                        if (contEmpMunicipioID > 0)
        //                                                        {
        //                                                            contactoglobal.MunicipioID = contEmpMunicipioID;
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            LogErrorCampoNoCreadoContactos(sEmailContacto, Recursos.strMunicipio);
        //                                                            iErrores++;
        //                                                            continue;
        //                                                        }
        //                                                    }

        //                                                }
        //                                                else
        //                                                {
        //                                                    LogErrorCampoNoCreadoContactos(sEmailContacto, Recursos.strProvincia);
        //                                                    iErrores++;
        //                                                    continue;
        //                                                }
        //                                            }
        //                                        }
        //                                        else
        //                                        {
        //                                            LogErrorCampoNoCreadoContactos(sEmailContacto, Recursos.strRegionPais);
        //                                            iErrores++;
        //                                            continue;
        //                                        }
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    LogErrorCampoNoCreadoContactos(sEmailContacto, Recursos.strPais);
        //                                    iErrores++;
        //                                    continue;
        //                                }
        //                            }


        //                            // Codigo Postal
        //                            contactoglobal.CP = row[11].ToString();

        //                            // Direccion
        //                            contactoglobal.Direccion = row[12].ToString();

        //                            // Observaciones
        //                            contactoglobal.Comentarios = row[13].ToString();




        //                            if (bActualizar)
        //                            {
        //                                cContactosGlobales.UpdateItem(contactoglobal);

        //                                if (emp != null)
        //                                {
        //                                    oContEmpAux = new ContactosGlobalesEmplazamientos();
        //                                    cContEmpAux = new ContactosGlobalesEmplazamientosController();
        //                                    oContEmpAux = cContEmpAux.GetContactosByID(emp.EmplazamientoID, contactoglobal.ContactoGlobalID);
        //                                    if (oContEmpAux == null)
        //                                    {

        //                                        oContEmpAux = new ContactosGlobalesEmplazamientos();
        //                                        cContEmpAux = new ContactosGlobalesEmplazamientosController();
        //                                        oContEmpAux.EmplazamientoID = emp.EmplazamientoID;
        //                                        oContEmpAux.ContactoGlobalID = contactoglobal.ContactoGlobalID;
        //                                        cContEmpAux.AddItem(oContEmpAux);
        //                                    }
        //                                }


        //                                iActualizados++;
        //                            }
        //                            else
        //                            {
        //                                // Se pone activo
        //                                contactoglobal.Activo = true;
        //                                contactoglobal.ClienteID = cliID;
        //                                //Agregamos
        //                                contactoglobal = cContactosGlobales.AddItem(contactoglobal);

        //                                if (emp != null)
        //                                {
        //                                    oContEmpAux = new ContactosGlobalesEmplazamientos();
        //                                    cContEmpAux = new ContactosGlobalesEmplazamientosController();
        //                                    oContEmpAux.EmplazamientoID = emp.EmplazamientoID;
        //                                    oContEmpAux.ContactoGlobalID = contactoglobal.ContactoGlobalID;
        //                                    cContEmpAux.AddItem(oContEmpAux);

        //                                }


        //                                iCargados++;
        //                            }

        //                            #endregion

        //                            GC.Collect();
        //                        }

        //                        EscritorLogs.EscribeLogs("SITES CONTACTS TOTAL" + ": " + maximo);
        //                        EscritorLogs.EscribeLogs("SITES CONTACTS CHARGED" + ": " + iCargados.ToString());
        //                        EscritorLogs.EscribeLogs("SITES CONTACTS UPLOADED" + ": " + iActualizados.ToString());
        //                        EscritorLogs.EscribeLogs("SITES CONTACTS ERROR" + ": " + iErrores.ToString());
        //                        EscritorLogs.EscribeLogs("SITES CONTACTS WARNING" + ": " + iWarning.ToString());
        //                        EscritorLogs.EscribeLogs("END SITES CONTACTS");

        //                        break;
        //                        #endregion

        //                }

        //                #region Control Estadistica Cargas Masivas


        //                MonitoringCargasMasivasController cCargaEst = new MonitoringCargasMasivasController();
        //                int iCounterExitos = 0;
        //                int iCounterFallos = 0;
        //                string sTipoCarga = "V23";

        //                cCargaEst.GenerarEstadisticaCarga(odoccarga.UsuarioID, iCounterExitos, iCounterFallos, sTipoCarga, odoccarga.DocumentoCarga);


        //                #endregion
        //            }


        //        }
        //        else
        //        {
        //            log.Error("CONTACT SITES LOAD;Connot to load,missing necessary data");
        //            sSalida = "ERROR";
        //        }


        //    }
        //    catch (Exception ex)
        //    {

        //        log.Error("SERVICEIMPORTEXPORTCONTACTSITES; " + "CONTACTS SITES LOAD" + Recursos.strCodigoExcepcion100);
        //        sSalida = "ERROR";
        //    }

        //    return sSalida;
        //    // Returns the result

        //}

        //public static double ActualizarCantidadBeneficiario(double renta, double porcentaje, long monedaOrigenID, long monedaDestinoID)
        //{
        //    
        //    //Calculo de Cantidad a pagar al beneficiario

        //    AlquileresDetallesController cAlqDet = new AlquileresDetallesController();
        //    AlquileresDetalles alqDet = new AlquileresDetalles();
        //    MonedasController cMonedas = new MonedasController();
        //    double res = 0;
        //    try
        //    {

        //        double valor = porcentaje * renta / 100;
        //        res = cMonedas.ConvertMoneda(valor, monedaOrigenID, monedaDestinoID);


        //    }
        //    catch (Exception ex)
        //    {
        //        log.Error("CARGA EMPLAZAMIENTO" + "ActualizarCantidadBeneficiario" + "V23" + " Exception Code 100");
        //        string codTit = "";
        //        codTit = Util.ExceptionHandler(ex.Message);
        //        res = -1;
        //    }


        //    return res;
        //}

        #endregion

        #endregion

        #region Export
        public static string ExportTemplateData(CoreExportacionDatosPlantillas plantilla, List<ColumnasModeloDatos> columnasModeloDatos, 
                                                Dictionary<long, TiposDatos> dicTiposDatos)
        {
            DateTime fechaEjecucion = DateTime.Now;
            string sSalida = "";

            #region Controllers
            CoreExportacionDatosPlantillasController cCoreExportacionDatosPlantillas = new CoreExportacionDatosPlantillasController();
            CoreExportacionDatosPlantillasColumnasController cCoreExportacionDatosPlantillasColumnas = new CoreExportacionDatosPlantillasColumnasController();
            cCoreExportacionDatosPlantillasColumnas.SetDataContext(cCoreExportacionDatosPlantillas.Context);
            CoreExportacionDatosPlantillasFilasController cCoreExportacionDatosPlantillasFilas = new CoreExportacionDatosPlantillasFilasController();
            cCoreExportacionDatosPlantillasFilas.SetDataContext(cCoreExportacionDatosPlantillas.Context);
            CoreExportacionDatosPlantillasCeldasController cCoreExportacionDatosPlantillasCeldas = new CoreExportacionDatosPlantillasCeldasController();
            cCoreExportacionDatosPlantillasCeldas.SetDataContext(cCoreExportacionDatosPlantillas.Context);
            ColumnasModeloDatosController cColumnasModeloDatos = new ColumnasModeloDatosController();
            cColumnasModeloDatos.SetDataContext(cCoreExportacionDatosPlantillas.Context);
            TiposDatosController cTiposDatos = new TiposDatosController();
            CoreExportacionDatosPlantillasReglasCeldasController cCoreExportacionDatosPlantillasReglasCeldas = new CoreExportacionDatosPlantillasReglasCeldasController();
            #endregion

            List<string> cabecera = new List<string>();
            List<JsonObject> listaOut = new List<JsonObject>();
            Dictionary<string, string> formatosfechas = new Dictionary<string, string>();
            Dictionary<string, string> outformatosfechas = new Dictionary<string, string>();

            string rutaFichero = TreeCore.DirectoryMapping.GetExportDirectory();
            Export.CrearRutaSiNoExiste(rutaFichero);
            string nombreFichero = plantilla.Nombre + " - " + Export.GetStrFecha();
            string archivo = "";

            try
            {
                List<CoreExportacionDatosPlantillasCeldas> celdas = cCoreExportacionDatosPlantillasCeldas.GetByPlantillaID(plantilla.CoreExportacionDatoPlantillaID);
                List<CoreExportacionDatosPlantillasFilas> filas = cCoreExportacionDatosPlantillasFilas.GetByPlantillaID(plantilla.CoreExportacionDatoPlantillaID);
                List<CoreExportacionDatosPlantillasColumnas> columnas = cCoreExportacionDatosPlantillasColumnas.GetByPlantillaID(plantilla.CoreExportacionDatoPlantillaID);
                List<Vw_CoreExportacionDatosPlantillasReglasCeldas> reglasCelda = cCoreExportacionDatosPlantillasReglasCeldas.GetByPlantilla(plantilla.CoreExportacionDatoPlantillaID);

                #region load dictionaries
                Dictionary<long, ColumnasModeloDatos> dicColumnasModeloDatos = new Dictionary<long, ColumnasModeloDatos>();
                Dictionary<long, string> dicNombresTablas = new Dictionary<long, string>();
                Dictionary<long, string> dicControladores = new Dictionary<long, string>();
                Dictionary< long, string> dicDisplay = new Dictionary<long, string>();

                columnasModeloDatos.ForEach(colModDat => {
                    if (colModDat.ForeignKeyID.HasValue)
                    {
                        string sNombreTabla = cColumnasModeloDatos.getDataSourceTablaColumna(colModDat.ForeignKeyID.Value);
                        if (!dicNombresTablas.ContainsKey(colModDat.ForeignKeyID.Value))
                        {
                            dicNombresTablas.Add(colModDat.ForeignKeyID.Value, sNombreTabla);
                        }
                    }

                    if (colModDat.ForeignKeyID.HasValue)
                    {
                        string sControlador = cColumnasModeloDatos.getControllerColumna(colModDat.ForeignKeyID.Value);
                        if (!dicControladores.ContainsKey(colModDat.ForeignKeyID.Value))
                        {
                            dicControladores.Add(colModDat.ForeignKeyID.Value, sControlador);
                        }
                    }

                    string sDisplay = cColumnasModeloDatos.getDisplay(colModDat.ColumnaModeloDatosID);
                    if (!dicDisplay.ContainsKey(colModDat.ColumnaModeloDatosID))
                    {
                        dicDisplay.Add(colModDat.ColumnaModeloDatosID, sDisplay);
                    }
                });

                if (plantilla.ColumnaModeloDatoID.HasValue)
                {
                    ColumnasModeloDatos colModDatFiltro = cColumnasModeloDatos.GetItem(plantilla.ColumnaModeloDatoID.Value);
                    if (colModDatFiltro != null && !dicColumnasModeloDatos.ContainsKey(plantilla.ColumnaModeloDatoID.Value))
                    {
                        dicColumnasModeloDatos.Add(plantilla.ColumnaModeloDatoID.Value, colModDatFiltro);
                    }
                }

                #endregion


                if (columnas != null)
                {
                    columnas.ForEach(col =>
                    {
                        cabecera.Add(col.Nombre);
                    });
                }

                long countFilas = 1;
                foreach (CoreExportacionDatosPlantillasFilas fila in filas)
                {
                    log.Info("Procesing category: " + countFilas++.ToString() + "/" + filas.Count);
                    long? TipoFiltroID = null;
                    long? TipoFiltroDinamicoID = null;
                    if (fila.TipoFiltroID.HasValue)
                    {
                        TipoFiltroID = fila.TipoFiltroID;
                    }
                    else if (fila.TipoFiltroDinamicoID.HasValue)
                    {
                        TipoFiltroDinamicoID = fila.TipoFiltroDinamicoID;
                    }

                    List<CoreExportacionDatosPlantillasCeldas> celdasTemp = celdas.FindAll(c => c.CoreExportacionDatosPlantillaFilaID == fila.CoreExportacionDatosPlantillaFilaID);

                    string query = Export.GenerateQuery(plantilla, celdasTemp, plantilla.TablaModeloDatosID, plantilla.ColumnaModeloDatoID, null, TipoFiltroID, TipoFiltroDinamicoID);
                    log.Info("Generated Query");
                    List<JsonObject> listaTemp = cCoreExportacionDatosPlantillas.ejecutarConsulta(query);
                    log.Info("Query executed");
                    listaTemp = Export.GetBodyExcel(plantilla, listaTemp, columnas, celdas, filas, formatosfechas, out formatosfechas, fila, 
                        dicColumnasModeloDatos, dicNombresTablas, dicControladores, dicDisplay, dicTiposDatos, reglasCelda);
                    log.Info("Structure table generated");

                    listaOut.AddRange(listaTemp);
                }
                archivo = Export.GenerateAndSaveFile(cabecera, listaOut, rutaFichero, nombreFichero, plantilla.TipoFichero, formatosfechas);
                log.Info("File saved: " + archivo);

                Export.GenerateHistory(plantilla.CoreExportacionDatoPlantillaID, archivo, fechaEjecucion);
                log.Info("History generated");

                
                TimeSpan ts = DateTime.Now.Subtract(fechaEjecucion);


                log.Info($"Execution time: { ts.Days} Days, { ts.Hours} Hours, { ts.Minutes} Minutes, { ts.Seconds} Seconds, {ts.Milliseconds} Milliseconds");
            }
            catch (Exception ex)
            {
                log.Error(ex);
                sSalida = ex.Message;
            }

            return sSalida;
        }

        #endregion
    }
}